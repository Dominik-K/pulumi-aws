// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Lightsail Instance. Amazon Lightsail is a service to provide easy virtual private servers
// with custom software already setup. See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail)
// for more information.
// 
// > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
// 
// ## Availability Zones
// 
// Lightsail currently supports the following Availability Zones (e.g. `us-east-1a`):
// 
// - `ap-northeast-1{a,c,d}`
// - `ap-northeast-2{a,c}`
// - `ap-south-1{a,b}`
// - `ap-southeast-1{a,b,c}`
// - `ap-southeast-2{a,b,c}`
// - `ca-central-1{a,b}`
// - `eu-central-1{a,b,c}`
// - `eu-west-1{a,b,c}`
// - `eu-west-2{a,b,c}`
// - `eu-west-3{a,b,c}`
// - `us-east-1{a,b,c,d,e,f}`
// - `us-east-2{a,b,c}`
// - `us-west-2{a,b,c}`
// 
// ## Blueprints
// 
// Lightsail currently supports the following Blueprint IDs:
// 
// ### OS Only
// 
// - `amazonLinux20180302`
// - `centos7190101`
// - `debian87`
// - `debian95`
// - `freebsd111`
// - `opensuse422`
// - `ubuntu16042`
// - `ubuntu1804`
// 
// ### Apps and OS
// 
// - `drupal856`
// - `gitlab11141`
// - `joomla3811`
// - `lamp56372`
// - `lamp71201`
// - `magento225`
// - `mean401`
// - `nginx11401`
// - `nodejs1080`
// - `pleskUbuntu178111`
// - `redmine346`
// - `wordpress498`
// - `wordpressMultisite498`
// 
// ## Bundles
// 
// Lightsail currently supports the following Bundle IDs (e.g. an instance in `ap-northeast-1` would use `small20`):
// 
// ### Prefix
// 
// A Bundle ID starts with one of the below size prefixes:
// 
// - `nano_`
// - `micro_`
// - `small_`
// - `medium_`
// - `large_`
// - `xlarge_`
// - `2xlarge_`
// 
// ### Suffix
// 
// A Bundle ID ends with one of the following suffixes depending on Availability Zone:
// 
// - ap-northeast-1: `20`
// - ap-northeast-2: `20`
// - ap-south-1: `21`
// - ap-southeast-1: `20`
// - ap-southeast-2: `22`
// - ca-central-1: `20`
// - eu-central-1: `20`
// - eu-west-1: `20`
// - eu-west-2: `20`
// - eu-west-3: `20`
// - us-east-1: `20`
// - us-east-2: `20`
// - us-west-2: `20`
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lightsail_instance.html.markdown.
type Instance struct {
	pulumi.CustomResourceState

	// The ARN of the Lightsail instance (matches `id`).
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The Availability Zone in which to create your
	// instance (see list below)
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`

	// The ID for a virtual private server image
	// (see list below)
	BlueprintId pulumi.StringOutput `pulumi:"blueprintId"`

	// The bundle of specification information (see list below)
	BundleId pulumi.StringOutput `pulumi:"bundleId"`

	CpuCount pulumi.IntOutput `pulumi:"cpuCount"`

	// The timestamp when the instance was created.
	// * `availabilityZone`
	// * `blueprintId`
	// * `bundleId`
	// * `keyPairName`
	// * `userData`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`

	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`

	IsStaticIp pulumi.BoolOutput `pulumi:"isStaticIp"`

	// The name of your key pair. Created in the
	// Lightsail console (cannot use `ec2.KeyPair` at this time)
	KeyPairName pulumi.StringOutput `pulumi:"keyPairName"`

	// The name of the Lightsail Instance
	Name pulumi.StringOutput `pulumi:"name"`

	PrivateIpAddress pulumi.StringOutput `pulumi:"privateIpAddress"`

	PublicIpAddress pulumi.StringOutput `pulumi:"publicIpAddress"`

	RamSize pulumi.IntOutput `pulumi:"ramSize"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// launch script to configure server with additional user data
	UserData pulumi.StringOutput `pulumi:"userData"`

	Username pulumi.StringOutput `pulumi:"username"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.BlueprintId == nil {
		return nil, errors.New("missing required argument 'BlueprintId'")
	}
	if args == nil || args.BundleId == nil {
		return nil, errors.New("missing required argument 'BundleId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AvailabilityZone; i != nil { inputs["availabilityZone"] = i.ToStringOutput() }
		if i := args.BlueprintId; i != nil { inputs["blueprintId"] = i.ToStringOutput() }
		if i := args.BundleId; i != nil { inputs["bundleId"] = i.ToStringOutput() }
		if i := args.KeyPairName; i != nil { inputs["keyPairName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.UserData; i != nil { inputs["userData"] = i.ToStringOutput() }
	}
	var resource Instance
	err := ctx.RegisterResource("aws:lightsail/instance:Instance", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.AvailabilityZone; i != nil { inputs["availabilityZone"] = i.ToStringOutput() }
		if i := state.BlueprintId; i != nil { inputs["blueprintId"] = i.ToStringOutput() }
		if i := state.BundleId; i != nil { inputs["bundleId"] = i.ToStringOutput() }
		if i := state.CpuCount; i != nil { inputs["cpuCount"] = i.ToIntOutput() }
		if i := state.CreatedAt; i != nil { inputs["createdAt"] = i.ToStringOutput() }
		if i := state.Ipv6Address; i != nil { inputs["ipv6Address"] = i.ToStringOutput() }
		if i := state.IsStaticIp; i != nil { inputs["isStaticIp"] = i.ToBoolOutput() }
		if i := state.KeyPairName; i != nil { inputs["keyPairName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PrivateIpAddress; i != nil { inputs["privateIpAddress"] = i.ToStringOutput() }
		if i := state.PublicIpAddress; i != nil { inputs["publicIpAddress"] = i.ToStringOutput() }
		if i := state.RamSize; i != nil { inputs["ramSize"] = i.ToIntOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UserData; i != nil { inputs["userData"] = i.ToStringOutput() }
		if i := state.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource Instance
	err := ctx.ReadResource("aws:lightsail/instance:Instance", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// The ARN of the Lightsail instance (matches `id`).
	Arn pulumi.StringInput `pulumi:"arn"`
	// The Availability Zone in which to create your
	// instance (see list below)
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The ID for a virtual private server image
	// (see list below)
	BlueprintId pulumi.StringInput `pulumi:"blueprintId"`
	// The bundle of specification information (see list below)
	BundleId pulumi.StringInput `pulumi:"bundleId"`
	CpuCount pulumi.IntInput `pulumi:"cpuCount"`
	// The timestamp when the instance was created.
	// * `availabilityZone`
	// * `blueprintId`
	// * `bundleId`
	// * `keyPairName`
	// * `userData`
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	IsStaticIp pulumi.BoolInput `pulumi:"isStaticIp"`
	// The name of your key pair. Created in the
	// Lightsail console (cannot use `ec2.KeyPair` at this time)
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The name of the Lightsail Instance
	Name pulumi.StringInput `pulumi:"name"`
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
	PublicIpAddress pulumi.StringInput `pulumi:"publicIpAddress"`
	RamSize pulumi.IntInput `pulumi:"ramSize"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// launch script to configure server with additional user data
	UserData pulumi.StringInput `pulumi:"userData"`
	Username pulumi.StringInput `pulumi:"username"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The Availability Zone in which to create your
	// instance (see list below)
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The ID for a virtual private server image
	// (see list below)
	BlueprintId pulumi.StringInput `pulumi:"blueprintId"`
	// The bundle of specification information (see list below)
	BundleId pulumi.StringInput `pulumi:"bundleId"`
	// The name of your key pair. Created in the
	// Lightsail console (cannot use `ec2.KeyPair` at this time)
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The name of the Lightsail Instance
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// launch script to configure server with additional user data
	UserData pulumi.StringInput `pulumi:"userData"`
}
