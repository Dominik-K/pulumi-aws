// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a GuardDuty member. To accept invitations in member accounts, see the [`guardduty.InviteAccepter` resource](https://www.terraform.io/docs/providers/aws/r/guardduty_invite_accepter.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/guardduty_member.html.markdown.
type Member struct {
	pulumi.CustomResourceState

	// AWS account ID for member account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`

	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumi.StringOutput `pulumi:"detectorId"`

	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumi.BoolOutput `pulumi:"disableEmailNotification"`

	// Email address for member account.
	Email pulumi.StringOutput `pulumi:"email"`

	// Message for invitation.
	InvitationMessage pulumi.StringOutput `pulumi:"invitationMessage"`

	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumi.BoolOutput `pulumi:"invite"`

	// The status of the relationship between the member account and its master account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
	RelationshipStatus pulumi.StringOutput `pulumi:"relationshipStatus"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.DetectorId == nil {
		return nil, errors.New("missing required argument 'DetectorId'")
	}
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountId; i != nil { inputs["accountId"] = i.ToStringOutput() }
		if i := args.DetectorId; i != nil { inputs["detectorId"] = i.ToStringOutput() }
		if i := args.DisableEmailNotification; i != nil { inputs["disableEmailNotification"] = i.ToBoolOutput() }
		if i := args.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := args.InvitationMessage; i != nil { inputs["invitationMessage"] = i.ToStringOutput() }
		if i := args.Invite; i != nil { inputs["invite"] = i.ToBoolOutput() }
	}
	var resource Member
	err := ctx.RegisterResource("aws:guardduty/member:Member", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountId; i != nil { inputs["accountId"] = i.ToStringOutput() }
		if i := state.DetectorId; i != nil { inputs["detectorId"] = i.ToStringOutput() }
		if i := state.DisableEmailNotification; i != nil { inputs["disableEmailNotification"] = i.ToBoolOutput() }
		if i := state.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := state.InvitationMessage; i != nil { inputs["invitationMessage"] = i.ToStringOutput() }
		if i := state.Invite; i != nil { inputs["invite"] = i.ToBoolOutput() }
		if i := state.RelationshipStatus; i != nil { inputs["relationshipStatus"] = i.ToStringOutput() }
	}
	var resource Member
	err := ctx.ReadResource("aws:guardduty/member:Member", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type MemberState struct {
	// AWS account ID for member account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumi.StringInput `pulumi:"detectorId"`
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumi.BoolInput `pulumi:"disableEmailNotification"`
	// Email address for member account.
	Email pulumi.StringInput `pulumi:"email"`
	// Message for invitation.
	InvitationMessage pulumi.StringInput `pulumi:"invitationMessage"`
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumi.BoolInput `pulumi:"invite"`
	// The status of the relationship between the member account and its master account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
	RelationshipStatus pulumi.StringInput `pulumi:"relationshipStatus"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// AWS account ID for member account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The detector ID of the GuardDuty account where you want to create member accounts.
	DetectorId pulumi.StringInput `pulumi:"detectorId"`
	// Boolean whether an email notification is sent to the accounts. Defaults to `false`.
	DisableEmailNotification pulumi.BoolInput `pulumi:"disableEmailNotification"`
	// Email address for member account.
	Email pulumi.StringInput `pulumi:"email"`
	// Message for invitation.
	InvitationMessage pulumi.StringInput `pulumi:"invitationMessage"`
	// Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationshipStatus` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
	Invite pulumi.BoolInput `pulumi:"invite"`
}
