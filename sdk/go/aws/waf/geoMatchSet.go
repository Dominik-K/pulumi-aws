// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a WAF Geo Match Set Resource
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/waf_geo_match_set.html.markdown.
type GeoMatchSet struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN)
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints GeoMatchSetGeoMatchConstraintsArrayOutput `pulumi:"geoMatchConstraints"`

	// The name or description of the GeoMatchSet.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewGeoMatchSet registers a new resource with the given unique name, arguments, and options.
func NewGeoMatchSet(ctx *pulumi.Context,
	name string, args *GeoMatchSetArgs, opts ...pulumi.ResourceOption) (*GeoMatchSet, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.GeoMatchConstraints; i != nil { inputs["geoMatchConstraints"] = i.ToGeoMatchSetGeoMatchConstraintsArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource GeoMatchSet
	err := ctx.RegisterResource("aws:waf/geoMatchSet:GeoMatchSet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeoMatchSet gets an existing GeoMatchSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeoMatchSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeoMatchSetState, opts ...pulumi.ResourceOption) (*GeoMatchSet, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.GeoMatchConstraints; i != nil { inputs["geoMatchConstraints"] = i.ToGeoMatchSetGeoMatchConstraintsArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource GeoMatchSet
	err := ctx.ReadResource("aws:waf/geoMatchSet:GeoMatchSet", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeoMatchSet resources.
type GeoMatchSetState struct {
	// Amazon Resource Name (ARN)
	Arn pulumi.StringInput `pulumi:"arn"`
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints GeoMatchSetGeoMatchConstraintsArrayInput `pulumi:"geoMatchConstraints"`
	// The name or description of the GeoMatchSet.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a GeoMatchSet resource.
type GeoMatchSetArgs struct {
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints GeoMatchSetGeoMatchConstraintsArrayInput `pulumi:"geoMatchConstraints"`
	// The name or description of the GeoMatchSet.
	Name pulumi.StringInput `pulumi:"name"`
}
type GeoMatchSetGeoMatchConstraints struct {
	// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
	Type string `pulumi:"type"`
	// The country that you want AWS WAF to search for.
	// This is the two-letter country code, e.g. `US`, `CA`, `RU`, `CN`, etc.
	// See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchConstraint.html) for all supported values.
	Value string `pulumi:"value"`
}
var geoMatchSetGeoMatchConstraintsType = reflect.TypeOf((*GeoMatchSetGeoMatchConstraints)(nil)).Elem()

type GeoMatchSetGeoMatchConstraintsInput interface {
	pulumi.Input

	ToGeoMatchSetGeoMatchConstraintsOutput() GeoMatchSetGeoMatchConstraintsOutput
	ToGeoMatchSetGeoMatchConstraintsOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsOutput
}

type GeoMatchSetGeoMatchConstraintsArgs struct {
	// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
	Type pulumi.StringInput `pulumi:"type"`
	// The country that you want AWS WAF to search for.
	// This is the two-letter country code, e.g. `US`, `CA`, `RU`, `CN`, etc.
	// See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchConstraint.html) for all supported values.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GeoMatchSetGeoMatchConstraintsArgs) ElementType() reflect.Type {
	return geoMatchSetGeoMatchConstraintsType
}

func (a GeoMatchSetGeoMatchConstraintsArgs) ToGeoMatchSetGeoMatchConstraintsOutput() GeoMatchSetGeoMatchConstraintsOutput {
	return pulumi.ToOutput(a).(GeoMatchSetGeoMatchConstraintsOutput)
}

func (a GeoMatchSetGeoMatchConstraintsArgs) ToGeoMatchSetGeoMatchConstraintsOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GeoMatchSetGeoMatchConstraintsOutput)
}

type GeoMatchSetGeoMatchConstraintsOutput struct { *pulumi.OutputState }

// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
func (o GeoMatchSetGeoMatchConstraintsOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v GeoMatchSetGeoMatchConstraints) string {
		return v.Type
	}).(pulumi.StringOutput)
}

// The country that you want AWS WAF to search for.
// This is the two-letter country code, e.g. `US`, `CA`, `RU`, `CN`, etc.
// See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchConstraint.html) for all supported values.
func (o GeoMatchSetGeoMatchConstraintsOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v GeoMatchSetGeoMatchConstraints) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (GeoMatchSetGeoMatchConstraintsOutput) ElementType() reflect.Type {
	return geoMatchSetGeoMatchConstraintsType
}

func (o GeoMatchSetGeoMatchConstraintsOutput) ToGeoMatchSetGeoMatchConstraintsOutput() GeoMatchSetGeoMatchConstraintsOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintsOutput) ToGeoMatchSetGeoMatchConstraintsOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(GeoMatchSetGeoMatchConstraintsOutput{}) }

var geoMatchSetGeoMatchConstraintsArrayType = reflect.TypeOf((*[]GeoMatchSetGeoMatchConstraints)(nil)).Elem()

type GeoMatchSetGeoMatchConstraintsArrayInput interface {
	pulumi.Input

	ToGeoMatchSetGeoMatchConstraintsArrayOutput() GeoMatchSetGeoMatchConstraintsArrayOutput
	ToGeoMatchSetGeoMatchConstraintsArrayOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsArrayOutput
}

type GeoMatchSetGeoMatchConstraintsArrayArgs []GeoMatchSetGeoMatchConstraintsInput

func (GeoMatchSetGeoMatchConstraintsArrayArgs) ElementType() reflect.Type {
	return geoMatchSetGeoMatchConstraintsArrayType
}

func (a GeoMatchSetGeoMatchConstraintsArrayArgs) ToGeoMatchSetGeoMatchConstraintsArrayOutput() GeoMatchSetGeoMatchConstraintsArrayOutput {
	return pulumi.ToOutput(a).(GeoMatchSetGeoMatchConstraintsArrayOutput)
}

func (a GeoMatchSetGeoMatchConstraintsArrayArgs) ToGeoMatchSetGeoMatchConstraintsArrayOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GeoMatchSetGeoMatchConstraintsArrayOutput)
}

type GeoMatchSetGeoMatchConstraintsArrayOutput struct { *pulumi.OutputState }

func (o GeoMatchSetGeoMatchConstraintsArrayOutput) Index(i pulumi.IntInput) GeoMatchSetGeoMatchConstraintsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) GeoMatchSetGeoMatchConstraints {
		return vs[0].([]GeoMatchSetGeoMatchConstraints)[vs[1].(int)]
	}).(GeoMatchSetGeoMatchConstraintsOutput)
}

func (GeoMatchSetGeoMatchConstraintsArrayOutput) ElementType() reflect.Type {
	return geoMatchSetGeoMatchConstraintsArrayType
}

func (o GeoMatchSetGeoMatchConstraintsArrayOutput) ToGeoMatchSetGeoMatchConstraintsArrayOutput() GeoMatchSetGeoMatchConstraintsArrayOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintsArrayOutput) ToGeoMatchSetGeoMatchConstraintsArrayOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(GeoMatchSetGeoMatchConstraintsArrayOutput{}) }

