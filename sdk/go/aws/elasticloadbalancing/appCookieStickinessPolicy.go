// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancing

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an application cookie stickiness policy, which allows an ELB to wed its sticky cookie's expiration to a cookie generated by your application.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/app_cookie_stickiness_policy_legacy.html.markdown.
type AppCookieStickinessPolicy struct {
	pulumi.CustomResourceState

	// The application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumi.StringOutput `pulumi:"cookieName"`

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumi.IntOutput `pulumi:"lbPort"`

	// The name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumi.StringOutput `pulumi:"loadBalancer"`

	// The name of the stickiness policy.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppCookieStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewAppCookieStickinessPolicy(ctx *pulumi.Context,
	name string, args *AppCookieStickinessPolicyArgs, opts ...pulumi.ResourceOption) (*AppCookieStickinessPolicy, error) {
	if args == nil || args.CookieName == nil {
		return nil, errors.New("missing required argument 'CookieName'")
	}
	if args == nil || args.LbPort == nil {
		return nil, errors.New("missing required argument 'LbPort'")
	}
	if args == nil || args.LoadBalancer == nil {
		return nil, errors.New("missing required argument 'LoadBalancer'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CookieName; i != nil { inputs["cookieName"] = i.ToStringOutput() }
		if i := args.LbPort; i != nil { inputs["lbPort"] = i.ToIntOutput() }
		if i := args.LoadBalancer; i != nil { inputs["loadBalancer"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource AppCookieStickinessPolicy
	err := ctx.RegisterResource("aws:elasticloadbalancing/appCookieStickinessPolicy:AppCookieStickinessPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCookieStickinessPolicy gets an existing AppCookieStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCookieStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCookieStickinessPolicyState, opts ...pulumi.ResourceOption) (*AppCookieStickinessPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.CookieName; i != nil { inputs["cookieName"] = i.ToStringOutput() }
		if i := state.LbPort; i != nil { inputs["lbPort"] = i.ToIntOutput() }
		if i := state.LoadBalancer; i != nil { inputs["loadBalancer"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource AppCookieStickinessPolicy
	err := ctx.ReadResource("aws:elasticloadbalancing/appCookieStickinessPolicy:AppCookieStickinessPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCookieStickinessPolicy resources.
type AppCookieStickinessPolicyState struct {
	// The application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumi.StringInput `pulumi:"cookieName"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumi.StringInput `pulumi:"loadBalancer"`
	// The name of the stickiness policy.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a AppCookieStickinessPolicy resource.
type AppCookieStickinessPolicyArgs struct {
	// The application cookie whose lifetime the ELB's cookie should follow.
	CookieName pulumi.StringInput `pulumi:"cookieName"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumi.IntInput `pulumi:"lbPort"`
	// The name of load balancer to which the policy
	// should be attached.
	LoadBalancer pulumi.StringInput `pulumi:"loadBalancer"`
	// The name of the stickiness policy.
	Name pulumi.StringInput `pulumi:"name"`
}
