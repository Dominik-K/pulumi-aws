// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glacier

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Glacier Vault Resource. You can refer to the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html) for a full explanation of the Glacier Vault functionality
// 
// > **NOTE:** When removing a Glacier Vault, the Vault must be empty.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glacier_vault.html.markdown.
type Vault struct {
	pulumi.CustomResourceState

	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringOutput `pulumi:"accessPolicy"`

	// The ARN of the vault.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The URI of the vault that was created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringOutput `pulumi:"name"`

	// The notifications for the Vault. Fields documented below.
	Notifications VaultNotificationsArrayOutput `pulumi:"notifications"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *pulumi.Context,
	name string, args *VaultArgs, opts ...pulumi.ResourceOption) (*Vault, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccessPolicy; i != nil { inputs["accessPolicy"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Notifications; i != nil { inputs["notifications"] = i.ToVaultNotificationsArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Vault
	err := ctx.RegisterResource("aws:glacier/vault:Vault", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultState, opts ...pulumi.ResourceOption) (*Vault, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccessPolicy; i != nil { inputs["accessPolicy"] = i.ToStringOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Notifications; i != nil { inputs["notifications"] = i.ToVaultNotificationsArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Vault
	err := ctx.ReadResource("aws:glacier/vault:Vault", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vault resources.
type VaultState struct {
	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The ARN of the vault.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The URI of the vault that was created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringInput `pulumi:"name"`
	// The notifications for the Vault. Fields documented below.
	Notifications VaultNotificationsArrayInput `pulumi:"notifications"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringInput `pulumi:"name"`
	// The notifications for the Vault. Fields documented below.
	Notifications VaultNotificationsArrayInput `pulumi:"notifications"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type VaultNotifications struct {
	// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
	Events []string `pulumi:"events"`
	// The SNS Topic ARN.
	SnsTopic string `pulumi:"snsTopic"`
}
var vaultNotificationsType = reflect.TypeOf((*VaultNotifications)(nil)).Elem()

type VaultNotificationsInput interface {
	pulumi.Input

	ToVaultNotificationsOutput() VaultNotificationsOutput
	ToVaultNotificationsOutputWithContext(ctx context.Context) VaultNotificationsOutput
}

type VaultNotificationsArgs struct {
	// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// The SNS Topic ARN.
	SnsTopic pulumi.StringInput `pulumi:"snsTopic"`
}

func (VaultNotificationsArgs) ElementType() reflect.Type {
	return vaultNotificationsType
}

func (a VaultNotificationsArgs) ToVaultNotificationsOutput() VaultNotificationsOutput {
	return pulumi.ToOutput(a).(VaultNotificationsOutput)
}

func (a VaultNotificationsArgs) ToVaultNotificationsOutputWithContext(ctx context.Context) VaultNotificationsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VaultNotificationsOutput)
}

type VaultNotificationsOutput struct { *pulumi.OutputState }

// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
func (o VaultNotificationsOutput) Events() pulumi.StringArrayOutput {
	return o.Apply(func(v VaultNotifications) []string {
		return v.Events
	}).(pulumi.StringArrayOutput)
}

// The SNS Topic ARN.
func (o VaultNotificationsOutput) SnsTopic() pulumi.StringOutput {
	return o.Apply(func(v VaultNotifications) string {
		return v.SnsTopic
	}).(pulumi.StringOutput)
}

func (VaultNotificationsOutput) ElementType() reflect.Type {
	return vaultNotificationsType
}

func (o VaultNotificationsOutput) ToVaultNotificationsOutput() VaultNotificationsOutput {
	return o
}

func (o VaultNotificationsOutput) ToVaultNotificationsOutputWithContext(ctx context.Context) VaultNotificationsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VaultNotificationsOutput{}) }

var vaultNotificationsArrayType = reflect.TypeOf((*[]VaultNotifications)(nil)).Elem()

type VaultNotificationsArrayInput interface {
	pulumi.Input

	ToVaultNotificationsArrayOutput() VaultNotificationsArrayOutput
	ToVaultNotificationsArrayOutputWithContext(ctx context.Context) VaultNotificationsArrayOutput
}

type VaultNotificationsArrayArgs []VaultNotificationsInput

func (VaultNotificationsArrayArgs) ElementType() reflect.Type {
	return vaultNotificationsArrayType
}

func (a VaultNotificationsArrayArgs) ToVaultNotificationsArrayOutput() VaultNotificationsArrayOutput {
	return pulumi.ToOutput(a).(VaultNotificationsArrayOutput)
}

func (a VaultNotificationsArrayArgs) ToVaultNotificationsArrayOutputWithContext(ctx context.Context) VaultNotificationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VaultNotificationsArrayOutput)
}

type VaultNotificationsArrayOutput struct { *pulumi.OutputState }

func (o VaultNotificationsArrayOutput) Index(i pulumi.IntInput) VaultNotificationsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VaultNotifications {
		return vs[0].([]VaultNotifications)[vs[1].(int)]
	}).(VaultNotificationsOutput)
}

func (VaultNotificationsArrayOutput) ElementType() reflect.Type {
	return vaultNotificationsArrayType
}

func (o VaultNotificationsArrayOutput) ToVaultNotificationsArrayOutput() VaultNotificationsArrayOutput {
	return o
}

func (o VaultNotificationsArrayOutput) ToVaultNotificationsArrayOutputWithContext(ctx context.Context) VaultNotificationsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VaultNotificationsArrayOutput{}) }

