// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an RDS DB parameter group resource .Documentation of the available parameters for various RDS engines can be found at:
// * [Aurora MySQL Parameters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Reference.html)
// * [Aurora PostgreSQL Parameters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraPostgreSQL.Reference.html)
// * [MariaDB Parameters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.MariaDB.Parameters.html)
// * [Oracle Parameters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ModifyInstance.Oracle.html#USER_ModifyInstance.Oracle.sqlnet)
// * [PostgreSQL Parameters](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.PostgreSQL.CommonDBATasks.html#Appendix.PostgreSQL.CommonDBATasks.Parameters)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/db_parameter_group.html.markdown.
type ParameterGroup struct {
	pulumi.CustomResourceState

	// The ARN of the db parameter group.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The description of the DB parameter group. Defaults to "Managed by Pulumi".
	Description pulumi.StringOutput `pulumi:"description"`

	// The family of the DB parameter group.
	Family pulumi.StringOutput `pulumi:"family"`

	// The name of the DB parameter.
	Name pulumi.StringOutput `pulumi:"name"`

	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via [`aws rds describe-db-parameters`](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-parameters.html) after initial creation of the group.
	Parameters ParameterGroupParametersArrayOutput `pulumi:"parameters"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewParameterGroup registers a new resource with the given unique name, arguments, and options.
func NewParameterGroup(ctx *pulumi.Context,
	name string, args *ParameterGroupArgs, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	if args == nil || args.Family == nil {
		return nil, errors.New("missing required argument 'Family'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["description"] = pulumi.Any("Managed by Pulumi")
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Family; i != nil { inputs["family"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToParameterGroupParametersArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource ParameterGroup
	err := ctx.RegisterResource("aws:rds/parameterGroup:ParameterGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameterGroup gets an existing ParameterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterGroupState, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Family; i != nil { inputs["family"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToParameterGroupParametersArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource ParameterGroup
	err := ctx.ReadResource("aws:rds/parameterGroup:ParameterGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParameterGroup resources.
type ParameterGroupState struct {
	// The ARN of the db parameter group.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The description of the DB parameter group. Defaults to "Managed by Pulumi".
	Description pulumi.StringInput `pulumi:"description"`
	// The family of the DB parameter group.
	Family pulumi.StringInput `pulumi:"family"`
	// The name of the DB parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via [`aws rds describe-db-parameters`](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-parameters.html) after initial creation of the group.
	Parameters ParameterGroupParametersArrayInput `pulumi:"parameters"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a ParameterGroup resource.
type ParameterGroupArgs struct {
	// The description of the DB parameter group. Defaults to "Managed by Pulumi".
	Description pulumi.StringInput `pulumi:"description"`
	// The family of the DB parameter group.
	Family pulumi.StringInput `pulumi:"family"`
	// The name of the DB parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via [`aws rds describe-db-parameters`](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-parameters.html) after initial creation of the group.
	Parameters ParameterGroupParametersArrayInput `pulumi:"parameters"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type ParameterGroupParameters struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name string `pulumi:"name"`
	// The value of the DB parameter.
	Value string `pulumi:"value"`
}
var parameterGroupParametersType = reflect.TypeOf((*ParameterGroupParameters)(nil)).Elem()

type ParameterGroupParametersInput interface {
	pulumi.Input

	ToParameterGroupParametersOutput() ParameterGroupParametersOutput
	ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput
}

type ParameterGroupParametersArgs struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod pulumi.StringInput `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the DB parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ParameterGroupParametersArgs) ElementType() reflect.Type {
	return parameterGroupParametersType
}

func (a ParameterGroupParametersArgs) ToParameterGroupParametersOutput() ParameterGroupParametersOutput {
	return pulumi.ToOutput(a).(ParameterGroupParametersOutput)
}

func (a ParameterGroupParametersArgs) ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ParameterGroupParametersOutput)
}

type ParameterGroupParametersOutput struct { *pulumi.OutputState }

// "immediate" (default), or "pending-reboot". Some
// engines can't apply some parameters without a reboot, and you will need to
// specify "pending-reboot" here.
func (o ParameterGroupParametersOutput) ApplyMethod() pulumi.StringOutput {
	return o.Apply(func(v ParameterGroupParameters) string {
		if v.ApplyMethod == nil { return *new(string) } else { return *v.ApplyMethod }
	}).(pulumi.StringOutput)
}

// The name of the DB parameter.
func (o ParameterGroupParametersOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ParameterGroupParameters) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// The value of the DB parameter.
func (o ParameterGroupParametersOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v ParameterGroupParameters) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (ParameterGroupParametersOutput) ElementType() reflect.Type {
	return parameterGroupParametersType
}

func (o ParameterGroupParametersOutput) ToParameterGroupParametersOutput() ParameterGroupParametersOutput {
	return o
}

func (o ParameterGroupParametersOutput) ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ParameterGroupParametersOutput{}) }

var parameterGroupParametersArrayType = reflect.TypeOf((*[]ParameterGroupParameters)(nil)).Elem()

type ParameterGroupParametersArrayInput interface {
	pulumi.Input

	ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput
	ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput
}

type ParameterGroupParametersArrayArgs []ParameterGroupParametersInput

func (ParameterGroupParametersArrayArgs) ElementType() reflect.Type {
	return parameterGroupParametersArrayType
}

func (a ParameterGroupParametersArrayArgs) ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput {
	return pulumi.ToOutput(a).(ParameterGroupParametersArrayOutput)
}

func (a ParameterGroupParametersArrayArgs) ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ParameterGroupParametersArrayOutput)
}

type ParameterGroupParametersArrayOutput struct { *pulumi.OutputState }

func (o ParameterGroupParametersArrayOutput) Index(i pulumi.IntInput) ParameterGroupParametersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ParameterGroupParameters {
		return vs[0].([]ParameterGroupParameters)[vs[1].(int)]
	}).(ParameterGroupParametersOutput)
}

func (ParameterGroupParametersArrayOutput) ElementType() reflect.Type {
	return parameterGroupParametersArrayType
}

func (o ParameterGroupParametersArrayOutput) ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput {
	return o
}

func (o ParameterGroupParametersArrayOutput) ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ParameterGroupParametersArrayOutput{}) }

