// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Glue Workflow resource.
// The workflow graph (DAG) can be build using the `glue.Trigger` resource. 
// See the example below for creating a graph with four nodes (two triggers and two jobs). 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_workflow.html.markdown.
type Workflow struct {
	pulumi.CustomResourceState

	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumi.MapOutput `pulumi:"defaultRunProperties"`

	// Description of the workflow.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name you assign to this workflow.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DefaultRunProperties; i != nil { inputs["defaultRunProperties"] = i.ToMapOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource Workflow
	err := ctx.RegisterResource("aws:glue/workflow:Workflow", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DefaultRunProperties; i != nil { inputs["defaultRunProperties"] = i.ToMapOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource Workflow
	err := ctx.ReadResource("aws:glue/workflow:Workflow", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type WorkflowState struct {
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumi.MapInput `pulumi:"defaultRunProperties"`
	// Description of the workflow.
	Description pulumi.StringInput `pulumi:"description"`
	// The name you assign to this workflow.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumi.MapInput `pulumi:"defaultRunProperties"`
	// Description of the workflow.
	Description pulumi.StringInput `pulumi:"description"`
	// The name you assign to this workflow.
	Name pulumi.StringInput `pulumi:"name"`
}
