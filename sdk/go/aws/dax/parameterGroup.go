// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DAX Parameter Group resource.
// 
// ## parameters
// 
// `parameters` supports the following:
// 
// * `name` - (Required) The name of the parameter.
// * `value` - (Required) The value for the parameter.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dax_parameter_group.html.markdown.
type ParameterGroup struct {
	pulumi.CustomResourceState

	// A description of the parameter group.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the parameter group.
	Name pulumi.StringOutput `pulumi:"name"`

	// The parameters of the parameter group.
	Parameters ParameterGroupParametersArrayOutput `pulumi:"parameters"`
}

// NewParameterGroup registers a new resource with the given unique name, arguments, and options.
func NewParameterGroup(ctx *pulumi.Context,
	name string, args *ParameterGroupArgs, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToParameterGroupParametersArrayOutput() }
	}
	var resource ParameterGroup
	err := ctx.RegisterResource("aws:dax/parameterGroup:ParameterGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameterGroup gets an existing ParameterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterGroupState, opts ...pulumi.ResourceOption) (*ParameterGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToParameterGroupParametersArrayOutput() }
	}
	var resource ParameterGroup
	err := ctx.ReadResource("aws:dax/parameterGroup:ParameterGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParameterGroup resources.
type ParameterGroupState struct {
	// A description of the parameter group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the parameter group.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters of the parameter group.
	Parameters ParameterGroupParametersArrayInput `pulumi:"parameters"`
}

// The set of arguments for constructing a ParameterGroup resource.
type ParameterGroupArgs struct {
	// A description of the parameter group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the parameter group.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters of the parameter group.
	Parameters ParameterGroupParametersArrayInput `pulumi:"parameters"`
}
type ParameterGroupParameters struct {
	// The name of the parameter group.
	Name string `pulumi:"name"`
	Value string `pulumi:"value"`
}
var parameterGroupParametersType = reflect.TypeOf((*ParameterGroupParameters)(nil)).Elem()

type ParameterGroupParametersInput interface {
	pulumi.Input

	ToParameterGroupParametersOutput() ParameterGroupParametersOutput
	ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput
}

type ParameterGroupParametersArgs struct {
	// The name of the parameter group.
	Name pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ParameterGroupParametersArgs) ElementType() reflect.Type {
	return parameterGroupParametersType
}

func (a ParameterGroupParametersArgs) ToParameterGroupParametersOutput() ParameterGroupParametersOutput {
	return pulumi.ToOutput(a).(ParameterGroupParametersOutput)
}

func (a ParameterGroupParametersArgs) ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ParameterGroupParametersOutput)
}

type ParameterGroupParametersOutput struct { *pulumi.OutputState }

// The name of the parameter group.
func (o ParameterGroupParametersOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v ParameterGroupParameters) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ParameterGroupParametersOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v ParameterGroupParameters) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (ParameterGroupParametersOutput) ElementType() reflect.Type {
	return parameterGroupParametersType
}

func (o ParameterGroupParametersOutput) ToParameterGroupParametersOutput() ParameterGroupParametersOutput {
	return o
}

func (o ParameterGroupParametersOutput) ToParameterGroupParametersOutputWithContext(ctx context.Context) ParameterGroupParametersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ParameterGroupParametersOutput{}) }

var parameterGroupParametersArrayType = reflect.TypeOf((*[]ParameterGroupParameters)(nil)).Elem()

type ParameterGroupParametersArrayInput interface {
	pulumi.Input

	ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput
	ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput
}

type ParameterGroupParametersArrayArgs []ParameterGroupParametersInput

func (ParameterGroupParametersArrayArgs) ElementType() reflect.Type {
	return parameterGroupParametersArrayType
}

func (a ParameterGroupParametersArrayArgs) ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput {
	return pulumi.ToOutput(a).(ParameterGroupParametersArrayOutput)
}

func (a ParameterGroupParametersArrayArgs) ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ParameterGroupParametersArrayOutput)
}

type ParameterGroupParametersArrayOutput struct { *pulumi.OutputState }

func (o ParameterGroupParametersArrayOutput) Index(i pulumi.IntInput) ParameterGroupParametersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ParameterGroupParameters {
		return vs[0].([]ParameterGroupParameters)[vs[1].(int)]
	}).(ParameterGroupParametersOutput)
}

func (ParameterGroupParametersArrayOutput) ElementType() reflect.Type {
	return parameterGroupParametersArrayType
}

func (o ParameterGroupParametersArrayOutput) ToParameterGroupParametersArrayOutput() ParameterGroupParametersArrayOutput {
	return o
}

func (o ParameterGroupParametersArrayOutput) ToParameterGroupParametersArrayOutputWithContext(ctx context.Context) ParameterGroupParametersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ParameterGroupParametersArrayOutput{}) }

