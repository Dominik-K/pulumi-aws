// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Direct Connect BGP peer resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dx_bgp_peer.html.markdown.
type BgpPeer struct {
	pulumi.CustomResourceState

	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`

	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumi.StringOutput `pulumi:"amazonAddress"`

	// The Direct Connect endpoint on which the BGP peer terminates.
	AwsDevice pulumi.StringOutput `pulumi:"awsDevice"`

	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntOutput `pulumi:"bgpAsn"`

	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringOutput `pulumi:"bgpAuthKey"`

	// The ID of the BGP peer.
	BgpPeerId pulumi.StringOutput `pulumi:"bgpPeerId"`

	// The Up/Down state of the BGP peer.
	BgpStatus pulumi.StringOutput `pulumi:"bgpStatus"`

	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumi.StringOutput `pulumi:"customerAddress"`

	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumi.StringOutput `pulumi:"virtualInterfaceId"`
}

// NewBgpPeer registers a new resource with the given unique name, arguments, and options.
func NewBgpPeer(ctx *pulumi.Context,
	name string, args *BgpPeerArgs, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	if args == nil || args.AddressFamily == nil {
		return nil, errors.New("missing required argument 'AddressFamily'")
	}
	if args == nil || args.BgpAsn == nil {
		return nil, errors.New("missing required argument 'BgpAsn'")
	}
	if args == nil || args.VirtualInterfaceId == nil {
		return nil, errors.New("missing required argument 'VirtualInterfaceId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AddressFamily; i != nil { inputs["addressFamily"] = i.ToStringOutput() }
		if i := args.AmazonAddress; i != nil { inputs["amazonAddress"] = i.ToStringOutput() }
		if i := args.BgpAsn; i != nil { inputs["bgpAsn"] = i.ToIntOutput() }
		if i := args.BgpAuthKey; i != nil { inputs["bgpAuthKey"] = i.ToStringOutput() }
		if i := args.CustomerAddress; i != nil { inputs["customerAddress"] = i.ToStringOutput() }
		if i := args.VirtualInterfaceId; i != nil { inputs["virtualInterfaceId"] = i.ToStringOutput() }
	}
	var resource BgpPeer
	err := ctx.RegisterResource("aws:directconnect/bgpPeer:BgpPeer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpPeer gets an existing BgpPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpPeerState, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AddressFamily; i != nil { inputs["addressFamily"] = i.ToStringOutput() }
		if i := state.AmazonAddress; i != nil { inputs["amazonAddress"] = i.ToStringOutput() }
		if i := state.AwsDevice; i != nil { inputs["awsDevice"] = i.ToStringOutput() }
		if i := state.BgpAsn; i != nil { inputs["bgpAsn"] = i.ToIntOutput() }
		if i := state.BgpAuthKey; i != nil { inputs["bgpAuthKey"] = i.ToStringOutput() }
		if i := state.BgpPeerId; i != nil { inputs["bgpPeerId"] = i.ToStringOutput() }
		if i := state.BgpStatus; i != nil { inputs["bgpStatus"] = i.ToStringOutput() }
		if i := state.CustomerAddress; i != nil { inputs["customerAddress"] = i.ToStringOutput() }
		if i := state.VirtualInterfaceId; i != nil { inputs["virtualInterfaceId"] = i.ToStringOutput() }
	}
	var resource BgpPeer
	err := ctx.ReadResource("aws:directconnect/bgpPeer:BgpPeer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpPeer resources.
type BgpPeerState struct {
	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringInput `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumi.StringInput `pulumi:"amazonAddress"`
	// The Direct Connect endpoint on which the BGP peer terminates.
	AwsDevice pulumi.StringInput `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntInput `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringInput `pulumi:"bgpAuthKey"`
	// The ID of the BGP peer.
	BgpPeerId pulumi.StringInput `pulumi:"bgpPeerId"`
	// The Up/Down state of the BGP peer.
	BgpStatus pulumi.StringInput `pulumi:"bgpStatus"`
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumi.StringInput `pulumi:"customerAddress"`
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumi.StringInput `pulumi:"virtualInterfaceId"`
}

// The set of arguments for constructing a BgpPeer resource.
type BgpPeerArgs struct {
	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringInput `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumi.StringInput `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntInput `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringInput `pulumi:"bgpAuthKey"`
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumi.StringInput `pulumi:"customerAddress"`
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumi.StringInput `pulumi:"virtualInterfaceId"`
}
