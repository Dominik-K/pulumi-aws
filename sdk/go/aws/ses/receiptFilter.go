// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SES receipt filter resource
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ses_receipt_filter.html.markdown.
type ReceiptFilter struct {
	pulumi.CustomResourceState

	// The IP address or address range to filter, in CIDR notation
	Cidr pulumi.StringOutput `pulumi:"cidr"`

	// The name of the filter
	Name pulumi.StringOutput `pulumi:"name"`

	// Block or Allow
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewReceiptFilter registers a new resource with the given unique name, arguments, and options.
func NewReceiptFilter(ctx *pulumi.Context,
	name string, args *ReceiptFilterArgs, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	if args == nil || args.Cidr == nil {
		return nil, errors.New("missing required argument 'Cidr'")
	}
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Cidr; i != nil { inputs["cidr"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
	}
	var resource ReceiptFilter
	err := ctx.RegisterResource("aws:ses/receiptFilter:ReceiptFilter", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiptFilter gets an existing ReceiptFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiptFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiptFilterState, opts ...pulumi.ResourceOption) (*ReceiptFilter, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Cidr; i != nil { inputs["cidr"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
	}
	var resource ReceiptFilter
	err := ctx.ReadResource("aws:ses/receiptFilter:ReceiptFilter", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiptFilter resources.
type ReceiptFilterState struct {
	// The IP address or address range to filter, in CIDR notation
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// The name of the filter
	Name pulumi.StringInput `pulumi:"name"`
	// Block or Allow
	Policy pulumi.StringInput `pulumi:"policy"`
}

// The set of arguments for constructing a ReceiptFilter resource.
type ReceiptFilterArgs struct {
	// The IP address or address range to filter, in CIDR notation
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// The name of the filter
	Name pulumi.StringInput `pulumi:"name"`
	// Block or Allow
	Policy pulumi.StringInput `pulumi:"policy"`
}
