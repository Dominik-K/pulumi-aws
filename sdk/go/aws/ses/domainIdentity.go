// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SES domain identity resource
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ses_domain_identity.html.markdown.
type DomainIdentity struct {
	pulumi.CustomResourceState

	// The ARN of the domain identity.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The domain name to assign to SES
	Domain pulumi.StringOutput `pulumi:"domain"`

	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done. See below for an example of how this might be achieved
	// when the domain is hosted in Route 53 and managed by this provider.  Find out
	// more about verifying domains in Amazon SES in the [AWS SES
	// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
	VerificationToken pulumi.StringOutput `pulumi:"verificationToken"`
}

// NewDomainIdentity registers a new resource with the given unique name, arguments, and options.
func NewDomainIdentity(ctx *pulumi.Context,
	name string, args *DomainIdentityArgs, opts ...pulumi.ResourceOption) (*DomainIdentity, error) {
	if args == nil || args.Domain == nil {
		return nil, errors.New("missing required argument 'Domain'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Domain; i != nil { inputs["domain"] = i.ToStringOutput() }
	}
	var resource DomainIdentity
	err := ctx.RegisterResource("aws:ses/domainIdentity:DomainIdentity", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainIdentity gets an existing DomainIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainIdentityState, opts ...pulumi.ResourceOption) (*DomainIdentity, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Domain; i != nil { inputs["domain"] = i.ToStringOutput() }
		if i := state.VerificationToken; i != nil { inputs["verificationToken"] = i.ToStringOutput() }
	}
	var resource DomainIdentity
	err := ctx.ReadResource("aws:ses/domainIdentity:DomainIdentity", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainIdentity resources.
type DomainIdentityState struct {
	// The ARN of the domain identity.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The domain name to assign to SES
	Domain pulumi.StringInput `pulumi:"domain"`
	// A code which when added to the domain as a TXT record
	// will signal to SES that the owner of the domain has authorised SES to act on
	// their behalf. The domain identity will be in state "verification pending"
	// until this is done. See below for an example of how this might be achieved
	// when the domain is hosted in Route 53 and managed by this provider.  Find out
	// more about verifying domains in Amazon SES in the [AWS SES
	// docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html).
	VerificationToken pulumi.StringInput `pulumi:"verificationToken"`
}

// The set of arguments for constructing a DomainIdentity resource.
type DomainIdentityArgs struct {
	// The domain name to assign to SES
	Domain pulumi.StringInput `pulumi:"domain"`
}
