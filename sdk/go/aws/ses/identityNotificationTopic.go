// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Resource for managing SES Identity Notification Topics
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ses_identity_notification_topic.html.markdown.
type IdentityNotificationTopic struct {
	pulumi.CustomResourceState

	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumi.StringOutput `pulumi:"identity"`

	// Whether SES should include original email headers in SNS notifications of this type. *false* by default.
	IncludeOriginalHeaders pulumi.BoolOutput `pulumi:"includeOriginalHeaders"`

	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: *Bounce*, *Complaint* or *Delivery*.
	NotificationType pulumi.StringOutput `pulumi:"notificationType"`

	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to "" (an empty string) to disable publishing.
	TopicArn pulumi.StringOutput `pulumi:"topicArn"`
}

// NewIdentityNotificationTopic registers a new resource with the given unique name, arguments, and options.
func NewIdentityNotificationTopic(ctx *pulumi.Context,
	name string, args *IdentityNotificationTopicArgs, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.NotificationType == nil {
		return nil, errors.New("missing required argument 'NotificationType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Identity; i != nil { inputs["identity"] = i.ToStringOutput() }
		if i := args.IncludeOriginalHeaders; i != nil { inputs["includeOriginalHeaders"] = i.ToBoolOutput() }
		if i := args.NotificationType; i != nil { inputs["notificationType"] = i.ToStringOutput() }
		if i := args.TopicArn; i != nil { inputs["topicArn"] = i.ToStringOutput() }
	}
	var resource IdentityNotificationTopic
	err := ctx.RegisterResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityNotificationTopic gets an existing IdentityNotificationTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityNotificationTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityNotificationTopicState, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Identity; i != nil { inputs["identity"] = i.ToStringOutput() }
		if i := state.IncludeOriginalHeaders; i != nil { inputs["includeOriginalHeaders"] = i.ToBoolOutput() }
		if i := state.NotificationType; i != nil { inputs["notificationType"] = i.ToStringOutput() }
		if i := state.TopicArn; i != nil { inputs["topicArn"] = i.ToStringOutput() }
	}
	var resource IdentityNotificationTopic
	err := ctx.ReadResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityNotificationTopic resources.
type IdentityNotificationTopicState struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumi.StringInput `pulumi:"identity"`
	// Whether SES should include original email headers in SNS notifications of this type. *false* by default.
	IncludeOriginalHeaders pulumi.BoolInput `pulumi:"includeOriginalHeaders"`
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: *Bounce*, *Complaint* or *Delivery*.
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to "" (an empty string) to disable publishing.
	TopicArn pulumi.StringInput `pulumi:"topicArn"`
}

// The set of arguments for constructing a IdentityNotificationTopic resource.
type IdentityNotificationTopicArgs struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumi.StringInput `pulumi:"identity"`
	// Whether SES should include original email headers in SNS notifications of this type. *false* by default.
	IncludeOriginalHeaders pulumi.BoolInput `pulumi:"includeOriginalHeaders"`
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: *Bounce*, *Complaint* or *Delivery*.
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to "" (an empty string) to disable publishing.
	TopicArn pulumi.StringInput `pulumi:"topicArn"`
}
