// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows setting policy to an Elasticsearch domain while referencing domain attributes (e.g. ARN)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elasticsearch_domain_policy.html.markdown.
type DomainPolicy struct {
	pulumi.CustomResourceState

	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.StringOutput `pulumi:"accessPolicies"`

	// Name of the domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
}

// NewDomainPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainPolicy(ctx *pulumi.Context,
	name string, args *DomainPolicyArgs, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	if args == nil || args.AccessPolicies == nil {
		return nil, errors.New("missing required argument 'AccessPolicies'")
	}
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccessPolicies; i != nil { inputs["accessPolicies"] = i.ToStringOutput() }
		if i := args.DomainName; i != nil { inputs["domainName"] = i.ToStringOutput() }
	}
	var resource DomainPolicy
	err := ctx.RegisterResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPolicy gets an existing DomainPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPolicyState, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccessPolicies; i != nil { inputs["accessPolicies"] = i.ToStringOutput() }
		if i := state.DomainName; i != nil { inputs["domainName"] = i.ToStringOutput() }
	}
	var resource DomainPolicy
	err := ctx.ReadResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPolicy resources.
type DomainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.StringInput `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainPolicy resource.
type DomainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.StringInput `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
}
