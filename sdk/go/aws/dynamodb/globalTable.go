// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a DynamoDB Global Table. These are layered on top of existing DynamoDB Tables.
// 
// > Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dynamodb_global_table.html.markdown.
type GlobalTable struct {
	pulumi.CustomResourceState

	// The ARN of the DynamoDB Global Table
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumi.StringOutput `pulumi:"name"`

	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas GlobalTableReplicasArrayOutput `pulumi:"replicas"`
}

// NewGlobalTable registers a new resource with the given unique name, arguments, and options.
func NewGlobalTable(ctx *pulumi.Context,
	name string, args *GlobalTableArgs, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	if args == nil || args.Replicas == nil {
		return nil, errors.New("missing required argument 'Replicas'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Replicas; i != nil { inputs["replicas"] = i.ToGlobalTableReplicasArrayOutput() }
	}
	var resource GlobalTable
	err := ctx.RegisterResource("aws:dynamodb/globalTable:GlobalTable", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalTable gets an existing GlobalTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalTableState, opts ...pulumi.ResourceOption) (*GlobalTable, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Replicas; i != nil { inputs["replicas"] = i.ToGlobalTableReplicasArrayOutput() }
	}
	var resource GlobalTable
	err := ctx.ReadResource("aws:dynamodb/globalTable:GlobalTable", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalTable resources.
type GlobalTableState struct {
	// The ARN of the DynamoDB Global Table
	Arn pulumi.StringInput `pulumi:"arn"`
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumi.StringInput `pulumi:"name"`
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas GlobalTableReplicasArrayInput `pulumi:"replicas"`
}

// The set of arguments for constructing a GlobalTable resource.
type GlobalTableArgs struct {
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name pulumi.StringInput `pulumi:"name"`
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas GlobalTableReplicasArrayInput `pulumi:"replicas"`
}
type GlobalTableReplicas struct {
	// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
	RegionName string `pulumi:"regionName"`
}
var globalTableReplicasType = reflect.TypeOf((*GlobalTableReplicas)(nil)).Elem()

type GlobalTableReplicasInput interface {
	pulumi.Input

	ToGlobalTableReplicasOutput() GlobalTableReplicasOutput
	ToGlobalTableReplicasOutputWithContext(ctx context.Context) GlobalTableReplicasOutput
}

type GlobalTableReplicasArgs struct {
	// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GlobalTableReplicasArgs) ElementType() reflect.Type {
	return globalTableReplicasType
}

func (a GlobalTableReplicasArgs) ToGlobalTableReplicasOutput() GlobalTableReplicasOutput {
	return pulumi.ToOutput(a).(GlobalTableReplicasOutput)
}

func (a GlobalTableReplicasArgs) ToGlobalTableReplicasOutputWithContext(ctx context.Context) GlobalTableReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GlobalTableReplicasOutput)
}

type GlobalTableReplicasOutput struct { *pulumi.OutputState }

// AWS region name of replica DynamoDB Table. e.g. `us-east-1`
func (o GlobalTableReplicasOutput) RegionName() pulumi.StringOutput {
	return o.Apply(func(v GlobalTableReplicas) string {
		return v.RegionName
	}).(pulumi.StringOutput)
}

func (GlobalTableReplicasOutput) ElementType() reflect.Type {
	return globalTableReplicasType
}

func (o GlobalTableReplicasOutput) ToGlobalTableReplicasOutput() GlobalTableReplicasOutput {
	return o
}

func (o GlobalTableReplicasOutput) ToGlobalTableReplicasOutputWithContext(ctx context.Context) GlobalTableReplicasOutput {
	return o
}

func init() { pulumi.RegisterOutputType(GlobalTableReplicasOutput{}) }

var globalTableReplicasArrayType = reflect.TypeOf((*[]GlobalTableReplicas)(nil)).Elem()

type GlobalTableReplicasArrayInput interface {
	pulumi.Input

	ToGlobalTableReplicasArrayOutput() GlobalTableReplicasArrayOutput
	ToGlobalTableReplicasArrayOutputWithContext(ctx context.Context) GlobalTableReplicasArrayOutput
}

type GlobalTableReplicasArrayArgs []GlobalTableReplicasInput

func (GlobalTableReplicasArrayArgs) ElementType() reflect.Type {
	return globalTableReplicasArrayType
}

func (a GlobalTableReplicasArrayArgs) ToGlobalTableReplicasArrayOutput() GlobalTableReplicasArrayOutput {
	return pulumi.ToOutput(a).(GlobalTableReplicasArrayOutput)
}

func (a GlobalTableReplicasArrayArgs) ToGlobalTableReplicasArrayOutputWithContext(ctx context.Context) GlobalTableReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(GlobalTableReplicasArrayOutput)
}

type GlobalTableReplicasArrayOutput struct { *pulumi.OutputState }

func (o GlobalTableReplicasArrayOutput) Index(i pulumi.IntInput) GlobalTableReplicasOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) GlobalTableReplicas {
		return vs[0].([]GlobalTableReplicas)[vs[1].(int)]
	}).(GlobalTableReplicasOutput)
}

func (GlobalTableReplicasArrayOutput) ElementType() reflect.Type {
	return globalTableReplicasArrayType
}

func (o GlobalTableReplicasArrayOutput) ToGlobalTableReplicasArrayOutput() GlobalTableReplicasArrayOutput {
	return o
}

func (o GlobalTableReplicasArrayOutput) ToGlobalTableReplicasArrayOutputWithContext(ctx context.Context) GlobalTableReplicasArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(GlobalTableReplicasArrayOutput{}) }

