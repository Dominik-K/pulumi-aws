// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Resource Access Manager (RAM) Resource Association.
// 
// > *NOTE:* Certain AWS resources (e.g. EC2 Subnets) can only be shared in an AWS account that is a member of an AWS Organizations organization with organization-wide Resource Access Manager functionality enabled. See the [Resource Access Manager User Guide](https://docs.aws.amazon.com/ram/latest/userguide/what-is.html) and AWS service specific documentation for additional information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ram_resource_association.html.markdown.
type ResourceAssociation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`

	// Amazon Resource Name (ARN) of the RAM Resource Share.
	ResourceShareArn pulumi.StringOutput `pulumi:"resourceShareArn"`
}

// NewResourceAssociation registers a new resource with the given unique name, arguments, and options.
func NewResourceAssociation(ctx *pulumi.Context,
	name string, args *ResourceAssociationArgs, opts ...pulumi.ResourceOption) (*ResourceAssociation, error) {
	if args == nil || args.ResourceArn == nil {
		return nil, errors.New("missing required argument 'ResourceArn'")
	}
	if args == nil || args.ResourceShareArn == nil {
		return nil, errors.New("missing required argument 'ResourceShareArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ResourceArn; i != nil { inputs["resourceArn"] = i.ToStringOutput() }
		if i := args.ResourceShareArn; i != nil { inputs["resourceShareArn"] = i.ToStringOutput() }
	}
	var resource ResourceAssociation
	err := ctx.RegisterResource("aws:ram/resourceAssociation:ResourceAssociation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceAssociation gets an existing ResourceAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceAssociationState, opts ...pulumi.ResourceOption) (*ResourceAssociation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ResourceArn; i != nil { inputs["resourceArn"] = i.ToStringOutput() }
		if i := state.ResourceShareArn; i != nil { inputs["resourceShareArn"] = i.ToStringOutput() }
	}
	var resource ResourceAssociation
	err := ctx.ReadResource("aws:ram/resourceAssociation:ResourceAssociation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceAssociation resources.
type ResourceAssociationState struct {
	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	// Amazon Resource Name (ARN) of the RAM Resource Share.
	ResourceShareArn pulumi.StringInput `pulumi:"resourceShareArn"`
}

// The set of arguments for constructing a ResourceAssociation resource.
type ResourceAssociationArgs struct {
	// Amazon Resource Name (ARN) of the resource to associate with the RAM Resource Share.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	// Amazon Resource Name (ARN) of the RAM Resource Share.
	ResourceShareArn pulumi.StringInput `pulumi:"resourceShareArn"`
}
