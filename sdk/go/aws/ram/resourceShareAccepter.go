// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manage accepting a Resource Access Manager (RAM) Resource Share invitation. From a _receiver_ AWS account, accept an invitation to share resources that were shared by a _sender_ AWS account. To create a resource share in the _sender_, see the [`ram.ResourceShare` resource](https://www.terraform.io/docs/providers/aws/r/ram_resource_share.html).
// 
// > **Note:** If both AWS accounts are in the same Organization and [RAM Sharing with AWS Organizations is enabled](https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs), this resource is not necessary as RAM Resource Share invitations are not used.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ram_resource_share_accepter.html.markdown.
type ResourceShareAccepter struct {
	pulumi.CustomResourceState

	// The ARN of the resource share invitation.
	InvitationArn pulumi.StringOutput `pulumi:"invitationArn"`

	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountId pulumi.StringOutput `pulumi:"receiverAccountId"`

	// A list of the resource ARNs shared via the resource share.
	Resources pulumi.StringArrayOutput `pulumi:"resources"`

	// The account ID of the sender account which extends the invitation.
	SenderAccountId pulumi.StringOutput `pulumi:"senderAccountId"`

	// The ARN of the resource share.
	ShareArn pulumi.StringOutput `pulumi:"shareArn"`

	// The ID of the resource share as displayed in the console.
	ShareId pulumi.StringOutput `pulumi:"shareId"`

	// The name of the resource share.
	ShareName pulumi.StringOutput `pulumi:"shareName"`

	// The status of the invitation (e.g., ACCEPTED, REJECTED).
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewResourceShareAccepter registers a new resource with the given unique name, arguments, and options.
func NewResourceShareAccepter(ctx *pulumi.Context,
	name string, args *ResourceShareAccepterArgs, opts ...pulumi.ResourceOption) (*ResourceShareAccepter, error) {
	if args == nil || args.ShareArn == nil {
		return nil, errors.New("missing required argument 'ShareArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ShareArn; i != nil { inputs["shareArn"] = i.ToStringOutput() }
	}
	var resource ResourceShareAccepter
	err := ctx.RegisterResource("aws:ram/resourceShareAccepter:ResourceShareAccepter", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceShareAccepter gets an existing ResourceShareAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceShareAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceShareAccepterState, opts ...pulumi.ResourceOption) (*ResourceShareAccepter, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.InvitationArn; i != nil { inputs["invitationArn"] = i.ToStringOutput() }
		if i := state.ReceiverAccountId; i != nil { inputs["receiverAccountId"] = i.ToStringOutput() }
		if i := state.Resources; i != nil { inputs["resources"] = i.ToStringArrayOutput() }
		if i := state.SenderAccountId; i != nil { inputs["senderAccountId"] = i.ToStringOutput() }
		if i := state.ShareArn; i != nil { inputs["shareArn"] = i.ToStringOutput() }
		if i := state.ShareId; i != nil { inputs["shareId"] = i.ToStringOutput() }
		if i := state.ShareName; i != nil { inputs["shareName"] = i.ToStringOutput() }
		if i := state.Status; i != nil { inputs["status"] = i.ToStringOutput() }
	}
	var resource ResourceShareAccepter
	err := ctx.ReadResource("aws:ram/resourceShareAccepter:ResourceShareAccepter", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceShareAccepter resources.
type ResourceShareAccepterState struct {
	// The ARN of the resource share invitation.
	InvitationArn pulumi.StringInput `pulumi:"invitationArn"`
	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountId pulumi.StringInput `pulumi:"receiverAccountId"`
	// A list of the resource ARNs shared via the resource share.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The account ID of the sender account which extends the invitation.
	SenderAccountId pulumi.StringInput `pulumi:"senderAccountId"`
	// The ARN of the resource share.
	ShareArn pulumi.StringInput `pulumi:"shareArn"`
	// The ID of the resource share as displayed in the console.
	ShareId pulumi.StringInput `pulumi:"shareId"`
	// The name of the resource share.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The status of the invitation (e.g., ACCEPTED, REJECTED).
	Status pulumi.StringInput `pulumi:"status"`
}

// The set of arguments for constructing a ResourceShareAccepter resource.
type ResourceShareAccepterArgs struct {
	// The ARN of the resource share.
	ShareArn pulumi.StringInput `pulumi:"shareArn"`
}
