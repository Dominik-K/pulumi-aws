// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Gamelift Alias resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_alias.html.markdown.
type Alias struct {
	pulumi.CustomResourceState

	// Alias ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Description of the alias.
	Description pulumi.StringOutput `pulumi:"description"`

	// Name of the alias.
	Name pulumi.StringOutput `pulumi:"name"`

	// Specifies the fleet and/or routing type to use for the alias.
	RoutingStrategy AliasRoutingStrategyOutput `pulumi:"routingStrategy"`
}

// NewAlias registers a new resource with the given unique name, arguments, and options.
func NewAlias(ctx *pulumi.Context,
	name string, args *AliasArgs, opts ...pulumi.ResourceOption) (*Alias, error) {
	if args == nil || args.RoutingStrategy == nil {
		return nil, errors.New("missing required argument 'RoutingStrategy'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.RoutingStrategy; i != nil { inputs["routingStrategy"] = i.ToAliasRoutingStrategyOutput() }
	}
	var resource Alias
	err := ctx.RegisterResource("aws:gamelift/alias:Alias", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlias gets an existing Alias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AliasState, opts ...pulumi.ResourceOption) (*Alias, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RoutingStrategy; i != nil { inputs["routingStrategy"] = i.ToAliasRoutingStrategyOutput() }
	}
	var resource Alias
	err := ctx.ReadResource("aws:gamelift/alias:Alias", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alias resources.
type AliasState struct {
	// Alias ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Description of the alias.
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the alias.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the fleet and/or routing type to use for the alias.
	RoutingStrategy AliasRoutingStrategyInput `pulumi:"routingStrategy"`
}

// The set of arguments for constructing a Alias resource.
type AliasArgs struct {
	// Description of the alias.
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the alias.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the fleet and/or routing type to use for the alias.
	RoutingStrategy AliasRoutingStrategyInput `pulumi:"routingStrategy"`
}
type AliasRoutingStrategy struct {
	// ID of the Gamelift Fleet to point the alias to.
	FleetId *string `pulumi:"fleetId"`
	// Message text to be used with the `TERMINAL` routing strategy.
	Message *string `pulumi:"message"`
	// Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
	Type string `pulumi:"type"`
}
var aliasRoutingStrategyType = reflect.TypeOf((*AliasRoutingStrategy)(nil)).Elem()

type AliasRoutingStrategyInput interface {
	pulumi.Input

	ToAliasRoutingStrategyOutput() AliasRoutingStrategyOutput
	ToAliasRoutingStrategyOutputWithContext(ctx context.Context) AliasRoutingStrategyOutput
}

type AliasRoutingStrategyArgs struct {
	// ID of the Gamelift Fleet to point the alias to.
	FleetId pulumi.StringInput `pulumi:"fleetId"`
	// Message text to be used with the `TERMINAL` routing strategy.
	Message pulumi.StringInput `pulumi:"message"`
	// Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
	Type pulumi.StringInput `pulumi:"type"`
}

func (AliasRoutingStrategyArgs) ElementType() reflect.Type {
	return aliasRoutingStrategyType
}

func (a AliasRoutingStrategyArgs) ToAliasRoutingStrategyOutput() AliasRoutingStrategyOutput {
	return pulumi.ToOutput(a).(AliasRoutingStrategyOutput)
}

func (a AliasRoutingStrategyArgs) ToAliasRoutingStrategyOutputWithContext(ctx context.Context) AliasRoutingStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AliasRoutingStrategyOutput)
}

type AliasRoutingStrategyOutput struct { *pulumi.OutputState }

// ID of the Gamelift Fleet to point the alias to.
func (o AliasRoutingStrategyOutput) FleetId() pulumi.StringOutput {
	return o.Apply(func(v AliasRoutingStrategy) string {
		if v.FleetId == nil { return *new(string) } else { return *v.FleetId }
	}).(pulumi.StringOutput)
}

// Message text to be used with the `TERMINAL` routing strategy.
func (o AliasRoutingStrategyOutput) Message() pulumi.StringOutput {
	return o.Apply(func(v AliasRoutingStrategy) string {
		if v.Message == nil { return *new(string) } else { return *v.Message }
	}).(pulumi.StringOutput)
}

// Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
func (o AliasRoutingStrategyOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v AliasRoutingStrategy) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (AliasRoutingStrategyOutput) ElementType() reflect.Type {
	return aliasRoutingStrategyType
}

func (o AliasRoutingStrategyOutput) ToAliasRoutingStrategyOutput() AliasRoutingStrategyOutput {
	return o
}

func (o AliasRoutingStrategyOutput) ToAliasRoutingStrategyOutputWithContext(ctx context.Context) AliasRoutingStrategyOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AliasRoutingStrategyOutput{}) }

