// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a License Manager association.
// 
// > **Note:** License configurations can also be associated with launch templates by specifying the `licenseSpecifications` block for an `ec2.LaunchTemplate`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/licensemanager_association.html.markdown.
type Association struct {
	pulumi.CustomResourceState

	// ARN of the license configuration.
	LicenseConfigurationArn pulumi.StringOutput `pulumi:"licenseConfigurationArn"`

	// ARN of the resource associated with the license configuration.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOption) (*Association, error) {
	if args == nil || args.LicenseConfigurationArn == nil {
		return nil, errors.New("missing required argument 'LicenseConfigurationArn'")
	}
	if args == nil || args.ResourceArn == nil {
		return nil, errors.New("missing required argument 'ResourceArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.LicenseConfigurationArn; i != nil { inputs["licenseConfigurationArn"] = i.ToStringOutput() }
		if i := args.ResourceArn; i != nil { inputs["resourceArn"] = i.ToStringOutput() }
	}
	var resource Association
	err := ctx.RegisterResource("aws:licensemanager/association:Association", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociationState, opts ...pulumi.ResourceOption) (*Association, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.LicenseConfigurationArn; i != nil { inputs["licenseConfigurationArn"] = i.ToStringOutput() }
		if i := state.ResourceArn; i != nil { inputs["resourceArn"] = i.ToStringOutput() }
	}
	var resource Association
	err := ctx.ReadResource("aws:licensemanager/association:Association", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Association resources.
type AssociationState struct {
	// ARN of the license configuration.
	LicenseConfigurationArn pulumi.StringInput `pulumi:"licenseConfigurationArn"`
	// ARN of the resource associated with the license configuration.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	// ARN of the license configuration.
	LicenseConfigurationArn pulumi.StringInput `pulumi:"licenseConfigurationArn"`
	// ARN of the resource associated with the license configuration.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}
