// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudWatch Dashboard resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_dashboard.html.markdown.
type Dashboard struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the dashboard.
	DashboardArn pulumi.StringOutput `pulumi:"dashboardArn"`

	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumi.StringOutput `pulumi:"dashboardBody"`

	// The name of the dashboard.
	DashboardName pulumi.StringOutput `pulumi:"dashboardName"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil || args.DashboardBody == nil {
		return nil, errors.New("missing required argument 'DashboardBody'")
	}
	if args == nil || args.DashboardName == nil {
		return nil, errors.New("missing required argument 'DashboardName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DashboardBody; i != nil { inputs["dashboardBody"] = i.ToStringOutput() }
		if i := args.DashboardName; i != nil { inputs["dashboardName"] = i.ToStringOutput() }
	}
	var resource Dashboard
	err := ctx.RegisterResource("aws:cloudwatch/dashboard:Dashboard", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DashboardArn; i != nil { inputs["dashboardArn"] = i.ToStringOutput() }
		if i := state.DashboardBody; i != nil { inputs["dashboardBody"] = i.ToStringOutput() }
		if i := state.DashboardName; i != nil { inputs["dashboardName"] = i.ToStringOutput() }
	}
	var resource Dashboard
	err := ctx.ReadResource("aws:cloudwatch/dashboard:Dashboard", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type DashboardState struct {
	// The Amazon Resource Name (ARN) of the dashboard.
	DashboardArn pulumi.StringInput `pulumi:"dashboardArn"`
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumi.StringInput `pulumi:"dashboardBody"`
	// The name of the dashboard.
	DashboardName pulumi.StringInput `pulumi:"dashboardName"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumi.StringInput `pulumi:"dashboardBody"`
	// The name of the dashboard.
	DashboardName pulumi.StringInput `pulumi:"dashboardName"`
}
