// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudWatch Log Metric Filter resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_log_metric_filter.html.markdown.
type LogMetricFilter struct {
	pulumi.CustomResourceState

	// The name of the log group to associate the metric filter with.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`

	// A block defining collection of information
	// needed to define how metric data gets emitted. See below.
	MetricTransformation LogMetricFilterMetricTransformationOutput `pulumi:"metricTransformation"`

	// A name for the metric filter.
	Name pulumi.StringOutput `pulumi:"name"`

	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumi.StringOutput `pulumi:"pattern"`
}

// NewLogMetricFilter registers a new resource with the given unique name, arguments, and options.
func NewLogMetricFilter(ctx *pulumi.Context,
	name string, args *LogMetricFilterArgs, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	if args == nil || args.LogGroupName == nil {
		return nil, errors.New("missing required argument 'LogGroupName'")
	}
	if args == nil || args.MetricTransformation == nil {
		return nil, errors.New("missing required argument 'MetricTransformation'")
	}
	if args == nil || args.Pattern == nil {
		return nil, errors.New("missing required argument 'Pattern'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.LogGroupName; i != nil { inputs["logGroupName"] = i.ToStringOutput() }
		if i := args.MetricTransformation; i != nil { inputs["metricTransformation"] = i.ToLogMetricFilterMetricTransformationOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Pattern; i != nil { inputs["pattern"] = i.ToStringOutput() }
	}
	var resource LogMetricFilter
	err := ctx.RegisterResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogMetricFilter gets an existing LogMetricFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogMetricFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogMetricFilterState, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.LogGroupName; i != nil { inputs["logGroupName"] = i.ToStringOutput() }
		if i := state.MetricTransformation; i != nil { inputs["metricTransformation"] = i.ToLogMetricFilterMetricTransformationOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Pattern; i != nil { inputs["pattern"] = i.ToStringOutput() }
	}
	var resource LogMetricFilter
	err := ctx.ReadResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogMetricFilter resources.
type LogMetricFilterState struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// A block defining collection of information
	// needed to define how metric data gets emitted. See below.
	MetricTransformation LogMetricFilterMetricTransformationInput `pulumi:"metricTransformation"`
	// A name for the metric filter.
	Name pulumi.StringInput `pulumi:"name"`
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

// The set of arguments for constructing a LogMetricFilter resource.
type LogMetricFilterArgs struct {
	// The name of the log group to associate the metric filter with.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// A block defining collection of information
	// needed to define how metric data gets emitted. See below.
	MetricTransformation LogMetricFilterMetricTransformationInput `pulumi:"metricTransformation"`
	// A name for the metric filter.
	Name pulumi.StringInput `pulumi:"name"`
	// A valid [CloudWatch Logs filter pattern](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html)
	// for extracting metric data out of ingested log events.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}
type LogMetricFilterMetricTransformation struct {
	DefaultValue *string `pulumi:"defaultValue"`
	// A name for the metric filter.
	Name string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
	Value string `pulumi:"value"`
}
var logMetricFilterMetricTransformationType = reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()

type LogMetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput
	ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput
}

type LogMetricFilterMetricTransformationArgs struct {
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// A name for the metric filter.
	Name pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return logMetricFilterMetricTransformationType
}

func (a LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return pulumi.ToOutput(a).(LogMetricFilterMetricTransformationOutput)
}

func (a LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LogMetricFilterMetricTransformationOutput)
}

type LogMetricFilterMetricTransformationOutput struct { *pulumi.OutputState }

func (o LogMetricFilterMetricTransformationOutput) DefaultValue() pulumi.StringOutput {
	return o.Apply(func(v LogMetricFilterMetricTransformation) string {
		if v.DefaultValue == nil { return *new(string) } else { return *v.DefaultValue }
	}).(pulumi.StringOutput)
}

// A name for the metric filter.
func (o LogMetricFilterMetricTransformationOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v LogMetricFilterMetricTransformation) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o LogMetricFilterMetricTransformationOutput) Namespace() pulumi.StringOutput {
	return o.Apply(func(v LogMetricFilterMetricTransformation) string {
		return v.Namespace
	}).(pulumi.StringOutput)
}

func (o LogMetricFilterMetricTransformationOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v LogMetricFilterMetricTransformation) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (LogMetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return logMetricFilterMetricTransformationType
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LogMetricFilterMetricTransformationOutput{}) }

