// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > **Note:** To prevent a race condition during service deletion, make sure to set `dependsOn` to the related `iam.RolePolicy`; otherwise, the policy may be destroyed too soon and the ECS service will then get stuck in the `DRAINING` state.
// 
// Provides an ECS service - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).
// 
// See [ECS Services section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
// 
// ## deploymentController
// 
// The `deploymentController` configuration block supports the following:
// 
// * `type` - (Optional) Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`. Default: `ECS`.
// 
// ## loadBalancer
// 
// `loadBalancer` supports the following:
// 
// * `elbName` - (Required for ELB Classic) The name of the ELB (Classic) to associate with the service.
// * `targetGroupArn` - (Required for ALB/NLB) The ARN of the Load Balancer target group to associate with the service.
// * `containerName` - (Required) The name of the container to associate with the load balancer (as it appears in a container definition).
// * `containerPort` - (Required) The port on the container to associate with the load balancer.
// 
// > **Version note:** Multiple `loadBalancer` configuration block support was added in version 2.22.0 of the provider. This allows configuration of [ECS service support for multiple target groups](https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecs-services-now-support-multiple-load-balancer-target-groups/).
// 
// ## orderedPlacementStrategy
// 
// `orderedPlacementStrategy` supports the following:
// 
// * `type` - (Required) The type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
// * `field` - (Optional) For the `spread` placement strategy, valid values are `instanceId` (or `host`,
//  which has the same effect), or any platform or custom attribute that is applied to a container instance.
//  For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
//  needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
// 
// > **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
// 
// ## placementConstraints
// 
// `placementConstraints` support the following:
// 
// * `type` - (Required) The type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
// * `expression` -  (Optional) Cluster Query Language expression to apply to the constraint. Does not need to be specified
// for the `distinctInstance` type.
// For more information, see [Cluster Query Language in the Amazon EC2 Container
// Service Developer
// Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
// 
// ## networkConfiguration
// 
// `networkConfiguration` support the following:
// 
// * `subnets` - (Required) The subnets associated with the task or service.
// * `securityGroups` - (Optional) The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
// * `assignPublicIp` - (Optional) Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
// 
// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
// 
// ## serviceRegistries
// 
// `serviceRegistries` support the following:
// 
// * `registryArn` - (Required) The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
// * `port` - (Optional) The port value used if your Service Discovery service specified an SRV record.
// * `containerPort` - (Optional) The port value, already specified in the task definition, to be used for your service discovery service.
// * `containerName` - (Optional) The container name value, already specified in the task definition, to be used for your service discovery service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_service.html.markdown.
type Service struct {
	pulumi.CustomResourceState

	// ARN of an ECS cluster
	Cluster pulumi.StringOutput `pulumi:"cluster"`

	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerOutput `pulumi:"deploymentController"`

	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntOutput `pulumi:"deploymentMaximumPercent"`

	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntOutput `pulumi:"deploymentMinimumHealthyPercent"`

	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntOutput `pulumi:"desiredCount"`

	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolOutput `pulumi:"enableEcsManagedTags"`

	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntOutput `pulumi:"healthCheckGracePeriodSeconds"`

	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringOutput `pulumi:"iamRole"`

	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringOutput `pulumi:"launchType"`

	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancersArrayOutput `pulumi:"loadBalancers"`

	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringOutput `pulumi:"name"`

	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationOutput `pulumi:"networkConfiguration"`

	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategiesArrayOutput `pulumi:"orderedPlacementStrategies"`

	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintsArrayOutput `pulumi:"placementConstraints"`

	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringOutput `pulumi:"platformVersion"`

	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringOutput `pulumi:"propagateTags"`

	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringOutput `pulumi:"schedulingStrategy"`

	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesOutput `pulumi:"serviceRegistries"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringOutput `pulumi:"taskDefinition"`

	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolOutput `pulumi:"waitForSteadyState"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil || args.TaskDefinition == nil {
		return nil, errors.New("missing required argument 'TaskDefinition'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Cluster; i != nil { inputs["cluster"] = i.ToStringOutput() }
		if i := args.DeploymentController; i != nil { inputs["deploymentController"] = i.ToServiceDeploymentControllerOutput() }
		if i := args.DeploymentMaximumPercent; i != nil { inputs["deploymentMaximumPercent"] = i.ToIntOutput() }
		if i := args.DeploymentMinimumHealthyPercent; i != nil { inputs["deploymentMinimumHealthyPercent"] = i.ToIntOutput() }
		if i := args.DesiredCount; i != nil { inputs["desiredCount"] = i.ToIntOutput() }
		if i := args.EnableEcsManagedTags; i != nil { inputs["enableEcsManagedTags"] = i.ToBoolOutput() }
		if i := args.HealthCheckGracePeriodSeconds; i != nil { inputs["healthCheckGracePeriodSeconds"] = i.ToIntOutput() }
		if i := args.IamRole; i != nil { inputs["iamRole"] = i.ToStringOutput() }
		if i := args.LaunchType; i != nil { inputs["launchType"] = i.ToStringOutput() }
		if i := args.LoadBalancers; i != nil { inputs["loadBalancers"] = i.ToServiceLoadBalancersArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NetworkConfiguration; i != nil { inputs["networkConfiguration"] = i.ToServiceNetworkConfigurationOutput() }
		if i := args.OrderedPlacementStrategies; i != nil { inputs["orderedPlacementStrategies"] = i.ToServiceOrderedPlacementStrategiesArrayOutput() }
		if i := args.PlacementConstraints; i != nil { inputs["placementConstraints"] = i.ToServicePlacementConstraintsArrayOutput() }
		if i := args.PlatformVersion; i != nil { inputs["platformVersion"] = i.ToStringOutput() }
		if i := args.PropagateTags; i != nil { inputs["propagateTags"] = i.ToStringOutput() }
		if i := args.SchedulingStrategy; i != nil { inputs["schedulingStrategy"] = i.ToStringOutput() }
		if i := args.ServiceRegistries; i != nil { inputs["serviceRegistries"] = i.ToServiceServiceRegistriesOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.TaskDefinition; i != nil { inputs["taskDefinition"] = i.ToStringOutput() }
		if i := args.WaitForSteadyState; i != nil { inputs["waitForSteadyState"] = i.ToBoolOutput() }
	}
	var resource Service
	err := ctx.RegisterResource("aws:ecs/service:Service", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Cluster; i != nil { inputs["cluster"] = i.ToStringOutput() }
		if i := state.DeploymentController; i != nil { inputs["deploymentController"] = i.ToServiceDeploymentControllerOutput() }
		if i := state.DeploymentMaximumPercent; i != nil { inputs["deploymentMaximumPercent"] = i.ToIntOutput() }
		if i := state.DeploymentMinimumHealthyPercent; i != nil { inputs["deploymentMinimumHealthyPercent"] = i.ToIntOutput() }
		if i := state.DesiredCount; i != nil { inputs["desiredCount"] = i.ToIntOutput() }
		if i := state.EnableEcsManagedTags; i != nil { inputs["enableEcsManagedTags"] = i.ToBoolOutput() }
		if i := state.HealthCheckGracePeriodSeconds; i != nil { inputs["healthCheckGracePeriodSeconds"] = i.ToIntOutput() }
		if i := state.IamRole; i != nil { inputs["iamRole"] = i.ToStringOutput() }
		if i := state.LaunchType; i != nil { inputs["launchType"] = i.ToStringOutput() }
		if i := state.LoadBalancers; i != nil { inputs["loadBalancers"] = i.ToServiceLoadBalancersArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NetworkConfiguration; i != nil { inputs["networkConfiguration"] = i.ToServiceNetworkConfigurationOutput() }
		if i := state.OrderedPlacementStrategies; i != nil { inputs["orderedPlacementStrategies"] = i.ToServiceOrderedPlacementStrategiesArrayOutput() }
		if i := state.PlacementConstraints; i != nil { inputs["placementConstraints"] = i.ToServicePlacementConstraintsArrayOutput() }
		if i := state.PlatformVersion; i != nil { inputs["platformVersion"] = i.ToStringOutput() }
		if i := state.PropagateTags; i != nil { inputs["propagateTags"] = i.ToStringOutput() }
		if i := state.SchedulingStrategy; i != nil { inputs["schedulingStrategy"] = i.ToStringOutput() }
		if i := state.ServiceRegistries; i != nil { inputs["serviceRegistries"] = i.ToServiceServiceRegistriesOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.TaskDefinition; i != nil { inputs["taskDefinition"] = i.ToStringOutput() }
		if i := state.WaitForSteadyState; i != nil { inputs["waitForSteadyState"] = i.ToBoolOutput() }
	}
	var resource Service
	err := ctx.ReadResource("aws:ecs/service:Service", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// ARN of an ECS cluster
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerInput `pulumi:"deploymentController"`
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntInput `pulumi:"deploymentMaximumPercent"`
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntInput `pulumi:"deploymentMinimumHealthyPercent"`
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntInput `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolInput `pulumi:"enableEcsManagedTags"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntInput `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringInput `pulumi:"iamRole"`
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringInput `pulumi:"launchType"`
	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancersArrayInput `pulumi:"loadBalancers"`
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringInput `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationInput `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategiesArrayInput `pulumi:"orderedPlacementStrategies"`
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintsArrayInput `pulumi:"placementConstraints"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringInput `pulumi:"propagateTags"`
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringInput `pulumi:"schedulingStrategy"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesInput `pulumi:"serviceRegistries"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringInput `pulumi:"taskDefinition"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolInput `pulumi:"waitForSteadyState"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// ARN of an ECS cluster
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Configuration block containing deployment controller configuration. Defined below.
	DeploymentController ServiceDeploymentControllerInput `pulumi:"deploymentController"`
	// The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
	DeploymentMaximumPercent pulumi.IntInput `pulumi:"deploymentMaximumPercent"`
	// The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
	DeploymentMinimumHealthyPercent pulumi.IntInput `pulumi:"deploymentMinimumHealthyPercent"`
	// The number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
	DesiredCount pulumi.IntInput `pulumi:"desiredCount"`
	// Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
	EnableEcsManagedTags pulumi.BoolInput `pulumi:"enableEcsManagedTags"`
	// Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
	HealthCheckGracePeriodSeconds pulumi.IntInput `pulumi:"healthCheckGracePeriodSeconds"`
	// ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
	IamRole pulumi.StringInput `pulumi:"iamRole"`
	// The launch type on which to run your service. The valid values are `EC2` and `FARGATE`. Defaults to `EC2`.
	LaunchType pulumi.StringInput `pulumi:"launchType"`
	// A load balancer block. Load balancers documented below.
	LoadBalancers ServiceLoadBalancersArrayInput `pulumi:"loadBalancers"`
	// The name of the service (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringInput `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes.
	NetworkConfiguration ServiceNetworkConfigurationInput `pulumi:"networkConfiguration"`
	// Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. The maximum number of `orderedPlacementStrategy` blocks is `5`. Defined below.
	OrderedPlacementStrategies ServiceOrderedPlacementStrategiesArrayInput `pulumi:"orderedPlacementStrategies"`
	// rules that are taken into consideration during task placement. Maximum number of
	// `placementConstraints` is `10`. Defined below.
	PlacementConstraints ServicePlacementConstraintsArrayInput `pulumi:"placementConstraints"`
	// The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
	PropagateTags pulumi.StringInput `pulumi:"propagateTags"`
	// The scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Fargate tasks do not support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html).
	SchedulingStrategy pulumi.StringInput `pulumi:"schedulingStrategy"`
	// The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`.
	ServiceRegistries ServiceServiceRegistriesInput `pulumi:"serviceRegistries"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
	// The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
	TaskDefinition pulumi.StringInput `pulumi:"taskDefinition"`
	// If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
	WaitForSteadyState pulumi.BoolInput `pulumi:"waitForSteadyState"`
}
type ServiceDeploymentController struct {
	Type *string `pulumi:"type"`
}
var serviceDeploymentControllerType = reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()

type ServiceDeploymentControllerInput interface {
	pulumi.Input

	ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput
	ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput
}

type ServiceDeploymentControllerArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceDeploymentControllerArgs) ElementType() reflect.Type {
	return serviceDeploymentControllerType
}

func (a ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return pulumi.ToOutput(a).(ServiceDeploymentControllerOutput)
}

func (a ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceDeploymentControllerOutput)
}

type ServiceDeploymentControllerOutput struct { *pulumi.OutputState }

func (o ServiceDeploymentControllerOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v ServiceDeploymentController) string {
		if v.Type == nil { return *new(string) } else { return *v.Type }
	}).(pulumi.StringOutput)
}

func (ServiceDeploymentControllerOutput) ElementType() reflect.Type {
	return serviceDeploymentControllerType
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceDeploymentControllerOutput{}) }

type ServiceLoadBalancers struct {
	ContainerName string `pulumi:"containerName"`
	ContainerPort int `pulumi:"containerPort"`
	ElbName *string `pulumi:"elbName"`
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}
var serviceLoadBalancersType = reflect.TypeOf((*ServiceLoadBalancers)(nil)).Elem()

type ServiceLoadBalancersInput interface {
	pulumi.Input

	ToServiceLoadBalancersOutput() ServiceLoadBalancersOutput
	ToServiceLoadBalancersOutputWithContext(ctx context.Context) ServiceLoadBalancersOutput
}

type ServiceLoadBalancersArgs struct {
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	ElbName pulumi.StringInput `pulumi:"elbName"`
	TargetGroupArn pulumi.StringInput `pulumi:"targetGroupArn"`
}

func (ServiceLoadBalancersArgs) ElementType() reflect.Type {
	return serviceLoadBalancersType
}

func (a ServiceLoadBalancersArgs) ToServiceLoadBalancersOutput() ServiceLoadBalancersOutput {
	return pulumi.ToOutput(a).(ServiceLoadBalancersOutput)
}

func (a ServiceLoadBalancersArgs) ToServiceLoadBalancersOutputWithContext(ctx context.Context) ServiceLoadBalancersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceLoadBalancersOutput)
}

type ServiceLoadBalancersOutput struct { *pulumi.OutputState }

func (o ServiceLoadBalancersOutput) ContainerName() pulumi.StringOutput {
	return o.Apply(func(v ServiceLoadBalancers) string {
		return v.ContainerName
	}).(pulumi.StringOutput)
}

func (o ServiceLoadBalancersOutput) ContainerPort() pulumi.IntOutput {
	return o.Apply(func(v ServiceLoadBalancers) int {
		return v.ContainerPort
	}).(pulumi.IntOutput)
}

func (o ServiceLoadBalancersOutput) ElbName() pulumi.StringOutput {
	return o.Apply(func(v ServiceLoadBalancers) string {
		if v.ElbName == nil { return *new(string) } else { return *v.ElbName }
	}).(pulumi.StringOutput)
}

func (o ServiceLoadBalancersOutput) TargetGroupArn() pulumi.StringOutput {
	return o.Apply(func(v ServiceLoadBalancers) string {
		if v.TargetGroupArn == nil { return *new(string) } else { return *v.TargetGroupArn }
	}).(pulumi.StringOutput)
}

func (ServiceLoadBalancersOutput) ElementType() reflect.Type {
	return serviceLoadBalancersType
}

func (o ServiceLoadBalancersOutput) ToServiceLoadBalancersOutput() ServiceLoadBalancersOutput {
	return o
}

func (o ServiceLoadBalancersOutput) ToServiceLoadBalancersOutputWithContext(ctx context.Context) ServiceLoadBalancersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceLoadBalancersOutput{}) }

var serviceLoadBalancersArrayType = reflect.TypeOf((*[]ServiceLoadBalancers)(nil)).Elem()

type ServiceLoadBalancersArrayInput interface {
	pulumi.Input

	ToServiceLoadBalancersArrayOutput() ServiceLoadBalancersArrayOutput
	ToServiceLoadBalancersArrayOutputWithContext(ctx context.Context) ServiceLoadBalancersArrayOutput
}

type ServiceLoadBalancersArrayArgs []ServiceLoadBalancersInput

func (ServiceLoadBalancersArrayArgs) ElementType() reflect.Type {
	return serviceLoadBalancersArrayType
}

func (a ServiceLoadBalancersArrayArgs) ToServiceLoadBalancersArrayOutput() ServiceLoadBalancersArrayOutput {
	return pulumi.ToOutput(a).(ServiceLoadBalancersArrayOutput)
}

func (a ServiceLoadBalancersArrayArgs) ToServiceLoadBalancersArrayOutputWithContext(ctx context.Context) ServiceLoadBalancersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceLoadBalancersArrayOutput)
}

type ServiceLoadBalancersArrayOutput struct { *pulumi.OutputState }

func (o ServiceLoadBalancersArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ServiceLoadBalancers {
		return vs[0].([]ServiceLoadBalancers)[vs[1].(int)]
	}).(ServiceLoadBalancersOutput)
}

func (ServiceLoadBalancersArrayOutput) ElementType() reflect.Type {
	return serviceLoadBalancersArrayType
}

func (o ServiceLoadBalancersArrayOutput) ToServiceLoadBalancersArrayOutput() ServiceLoadBalancersArrayOutput {
	return o
}

func (o ServiceLoadBalancersArrayOutput) ToServiceLoadBalancersArrayOutputWithContext(ctx context.Context) ServiceLoadBalancersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceLoadBalancersArrayOutput{}) }

type ServiceNetworkConfiguration struct {
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	SecurityGroups *[]string `pulumi:"securityGroups"`
	Subnets []string `pulumi:"subnets"`
}
var serviceNetworkConfigurationType = reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()

type ServiceNetworkConfigurationInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput
	ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput
}

type ServiceNetworkConfigurationArgs struct {
	AssignPublicIp pulumi.BoolInput `pulumi:"assignPublicIp"`
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return serviceNetworkConfigurationType
}

func (a ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return pulumi.ToOutput(a).(ServiceNetworkConfigurationOutput)
}

func (a ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceNetworkConfigurationOutput)
}

type ServiceNetworkConfigurationOutput struct { *pulumi.OutputState }

func (o ServiceNetworkConfigurationOutput) AssignPublicIp() pulumi.BoolOutput {
	return o.Apply(func(v ServiceNetworkConfiguration) bool {
		if v.AssignPublicIp == nil { return *new(bool) } else { return *v.AssignPublicIp }
	}).(pulumi.BoolOutput)
}

func (o ServiceNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.Apply(func(v ServiceNetworkConfiguration) []string {
		if v.SecurityGroups == nil { return *new([]string) } else { return *v.SecurityGroups }
	}).(pulumi.StringArrayOutput)
}

func (o ServiceNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.Apply(func(v ServiceNetworkConfiguration) []string {
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return serviceNetworkConfigurationType
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{}) }

type ServiceOrderedPlacementStrategies struct {
	Field *string `pulumi:"field"`
	Type string `pulumi:"type"`
}
var serviceOrderedPlacementStrategiesType = reflect.TypeOf((*ServiceOrderedPlacementStrategies)(nil)).Elem()

type ServiceOrderedPlacementStrategiesInput interface {
	pulumi.Input

	ToServiceOrderedPlacementStrategiesOutput() ServiceOrderedPlacementStrategiesOutput
	ToServiceOrderedPlacementStrategiesOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesOutput
}

type ServiceOrderedPlacementStrategiesArgs struct {
	Field pulumi.StringInput `pulumi:"field"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceOrderedPlacementStrategiesArgs) ElementType() reflect.Type {
	return serviceOrderedPlacementStrategiesType
}

func (a ServiceOrderedPlacementStrategiesArgs) ToServiceOrderedPlacementStrategiesOutput() ServiceOrderedPlacementStrategiesOutput {
	return pulumi.ToOutput(a).(ServiceOrderedPlacementStrategiesOutput)
}

func (a ServiceOrderedPlacementStrategiesArgs) ToServiceOrderedPlacementStrategiesOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceOrderedPlacementStrategiesOutput)
}

type ServiceOrderedPlacementStrategiesOutput struct { *pulumi.OutputState }

func (o ServiceOrderedPlacementStrategiesOutput) Field() pulumi.StringOutput {
	return o.Apply(func(v ServiceOrderedPlacementStrategies) string {
		if v.Field == nil { return *new(string) } else { return *v.Field }
	}).(pulumi.StringOutput)
}

func (o ServiceOrderedPlacementStrategiesOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v ServiceOrderedPlacementStrategies) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (ServiceOrderedPlacementStrategiesOutput) ElementType() reflect.Type {
	return serviceOrderedPlacementStrategiesType
}

func (o ServiceOrderedPlacementStrategiesOutput) ToServiceOrderedPlacementStrategiesOutput() ServiceOrderedPlacementStrategiesOutput {
	return o
}

func (o ServiceOrderedPlacementStrategiesOutput) ToServiceOrderedPlacementStrategiesOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceOrderedPlacementStrategiesOutput{}) }

var serviceOrderedPlacementStrategiesArrayType = reflect.TypeOf((*[]ServiceOrderedPlacementStrategies)(nil)).Elem()

type ServiceOrderedPlacementStrategiesArrayInput interface {
	pulumi.Input

	ToServiceOrderedPlacementStrategiesArrayOutput() ServiceOrderedPlacementStrategiesArrayOutput
	ToServiceOrderedPlacementStrategiesArrayOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesArrayOutput
}

type ServiceOrderedPlacementStrategiesArrayArgs []ServiceOrderedPlacementStrategiesInput

func (ServiceOrderedPlacementStrategiesArrayArgs) ElementType() reflect.Type {
	return serviceOrderedPlacementStrategiesArrayType
}

func (a ServiceOrderedPlacementStrategiesArrayArgs) ToServiceOrderedPlacementStrategiesArrayOutput() ServiceOrderedPlacementStrategiesArrayOutput {
	return pulumi.ToOutput(a).(ServiceOrderedPlacementStrategiesArrayOutput)
}

func (a ServiceOrderedPlacementStrategiesArrayArgs) ToServiceOrderedPlacementStrategiesArrayOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceOrderedPlacementStrategiesArrayOutput)
}

type ServiceOrderedPlacementStrategiesArrayOutput struct { *pulumi.OutputState }

func (o ServiceOrderedPlacementStrategiesArrayOutput) Index(i pulumi.IntInput) ServiceOrderedPlacementStrategiesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ServiceOrderedPlacementStrategies {
		return vs[0].([]ServiceOrderedPlacementStrategies)[vs[1].(int)]
	}).(ServiceOrderedPlacementStrategiesOutput)
}

func (ServiceOrderedPlacementStrategiesArrayOutput) ElementType() reflect.Type {
	return serviceOrderedPlacementStrategiesArrayType
}

func (o ServiceOrderedPlacementStrategiesArrayOutput) ToServiceOrderedPlacementStrategiesArrayOutput() ServiceOrderedPlacementStrategiesArrayOutput {
	return o
}

func (o ServiceOrderedPlacementStrategiesArrayOutput) ToServiceOrderedPlacementStrategiesArrayOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategiesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceOrderedPlacementStrategiesArrayOutput{}) }

type ServicePlacementConstraints struct {
	Expression *string `pulumi:"expression"`
	Type string `pulumi:"type"`
}
var servicePlacementConstraintsType = reflect.TypeOf((*ServicePlacementConstraints)(nil)).Elem()

type ServicePlacementConstraintsInput interface {
	pulumi.Input

	ToServicePlacementConstraintsOutput() ServicePlacementConstraintsOutput
	ToServicePlacementConstraintsOutputWithContext(ctx context.Context) ServicePlacementConstraintsOutput
}

type ServicePlacementConstraintsArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServicePlacementConstraintsArgs) ElementType() reflect.Type {
	return servicePlacementConstraintsType
}

func (a ServicePlacementConstraintsArgs) ToServicePlacementConstraintsOutput() ServicePlacementConstraintsOutput {
	return pulumi.ToOutput(a).(ServicePlacementConstraintsOutput)
}

func (a ServicePlacementConstraintsArgs) ToServicePlacementConstraintsOutputWithContext(ctx context.Context) ServicePlacementConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePlacementConstraintsOutput)
}

type ServicePlacementConstraintsOutput struct { *pulumi.OutputState }

func (o ServicePlacementConstraintsOutput) Expression() pulumi.StringOutput {
	return o.Apply(func(v ServicePlacementConstraints) string {
		if v.Expression == nil { return *new(string) } else { return *v.Expression }
	}).(pulumi.StringOutput)
}

func (o ServicePlacementConstraintsOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v ServicePlacementConstraints) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (ServicePlacementConstraintsOutput) ElementType() reflect.Type {
	return servicePlacementConstraintsType
}

func (o ServicePlacementConstraintsOutput) ToServicePlacementConstraintsOutput() ServicePlacementConstraintsOutput {
	return o
}

func (o ServicePlacementConstraintsOutput) ToServicePlacementConstraintsOutputWithContext(ctx context.Context) ServicePlacementConstraintsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServicePlacementConstraintsOutput{}) }

var servicePlacementConstraintsArrayType = reflect.TypeOf((*[]ServicePlacementConstraints)(nil)).Elem()

type ServicePlacementConstraintsArrayInput interface {
	pulumi.Input

	ToServicePlacementConstraintsArrayOutput() ServicePlacementConstraintsArrayOutput
	ToServicePlacementConstraintsArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintsArrayOutput
}

type ServicePlacementConstraintsArrayArgs []ServicePlacementConstraintsInput

func (ServicePlacementConstraintsArrayArgs) ElementType() reflect.Type {
	return servicePlacementConstraintsArrayType
}

func (a ServicePlacementConstraintsArrayArgs) ToServicePlacementConstraintsArrayOutput() ServicePlacementConstraintsArrayOutput {
	return pulumi.ToOutput(a).(ServicePlacementConstraintsArrayOutput)
}

func (a ServicePlacementConstraintsArrayArgs) ToServicePlacementConstraintsArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServicePlacementConstraintsArrayOutput)
}

type ServicePlacementConstraintsArrayOutput struct { *pulumi.OutputState }

func (o ServicePlacementConstraintsArrayOutput) Index(i pulumi.IntInput) ServicePlacementConstraintsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ServicePlacementConstraints {
		return vs[0].([]ServicePlacementConstraints)[vs[1].(int)]
	}).(ServicePlacementConstraintsOutput)
}

func (ServicePlacementConstraintsArrayOutput) ElementType() reflect.Type {
	return servicePlacementConstraintsArrayType
}

func (o ServicePlacementConstraintsArrayOutput) ToServicePlacementConstraintsArrayOutput() ServicePlacementConstraintsArrayOutput {
	return o
}

func (o ServicePlacementConstraintsArrayOutput) ToServicePlacementConstraintsArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServicePlacementConstraintsArrayOutput{}) }

type ServiceServiceRegistries struct {
	ContainerName *string `pulumi:"containerName"`
	ContainerPort *int `pulumi:"containerPort"`
	Port *int `pulumi:"port"`
	RegistryArn string `pulumi:"registryArn"`
}
var serviceServiceRegistriesType = reflect.TypeOf((*ServiceServiceRegistries)(nil)).Elem()

type ServiceServiceRegistriesInput interface {
	pulumi.Input

	ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput
	ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput
}

type ServiceServiceRegistriesArgs struct {
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	Port pulumi.IntInput `pulumi:"port"`
	RegistryArn pulumi.StringInput `pulumi:"registryArn"`
}

func (ServiceServiceRegistriesArgs) ElementType() reflect.Type {
	return serviceServiceRegistriesType
}

func (a ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return pulumi.ToOutput(a).(ServiceServiceRegistriesOutput)
}

func (a ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ServiceServiceRegistriesOutput)
}

type ServiceServiceRegistriesOutput struct { *pulumi.OutputState }

func (o ServiceServiceRegistriesOutput) ContainerName() pulumi.StringOutput {
	return o.Apply(func(v ServiceServiceRegistries) string {
		if v.ContainerName == nil { return *new(string) } else { return *v.ContainerName }
	}).(pulumi.StringOutput)
}

func (o ServiceServiceRegistriesOutput) ContainerPort() pulumi.IntOutput {
	return o.Apply(func(v ServiceServiceRegistries) int {
		if v.ContainerPort == nil { return *new(int) } else { return *v.ContainerPort }
	}).(pulumi.IntOutput)
}

func (o ServiceServiceRegistriesOutput) Port() pulumi.IntOutput {
	return o.Apply(func(v ServiceServiceRegistries) int {
		if v.Port == nil { return *new(int) } else { return *v.Port }
	}).(pulumi.IntOutput)
}

func (o ServiceServiceRegistriesOutput) RegistryArn() pulumi.StringOutput {
	return o.Apply(func(v ServiceServiceRegistries) string {
		return v.RegistryArn
	}).(pulumi.StringOutput)
}

func (ServiceServiceRegistriesOutput) ElementType() reflect.Type {
	return serviceServiceRegistriesType
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return o
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ServiceServiceRegistriesOutput{}) }

