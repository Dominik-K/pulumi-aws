// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VPC Endpoint connection notification resource.
// Connection notifications notify subscribers of VPC Endpoint events.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_endpoint_connection_notification.html.markdown.
type VpcEndpointConnectionNotification struct {
	pulumi.CustomResourceState

	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	ConnectionEvents pulumi.StringArrayOutput `pulumi:"connectionEvents"`

	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumi.StringOutput `pulumi:"connectionNotificationArn"`

	// The type of notification.
	NotificationType pulumi.StringOutput `pulumi:"notificationType"`

	// The state of the notification.
	State pulumi.StringOutput `pulumi:"state"`

	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumi.StringOutput `pulumi:"vpcEndpointId"`

	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumi.StringOutput `pulumi:"vpcEndpointServiceId"`
}

// NewVpcEndpointConnectionNotification registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointConnectionNotification(ctx *pulumi.Context,
	name string, args *VpcEndpointConnectionNotificationArgs, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionNotification, error) {
	if args == nil || args.ConnectionEvents == nil {
		return nil, errors.New("missing required argument 'ConnectionEvents'")
	}
	if args == nil || args.ConnectionNotificationArn == nil {
		return nil, errors.New("missing required argument 'ConnectionNotificationArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ConnectionEvents; i != nil { inputs["connectionEvents"] = i.ToStringArrayOutput() }
		if i := args.ConnectionNotificationArn; i != nil { inputs["connectionNotificationArn"] = i.ToStringOutput() }
		if i := args.VpcEndpointId; i != nil { inputs["vpcEndpointId"] = i.ToStringOutput() }
		if i := args.VpcEndpointServiceId; i != nil { inputs["vpcEndpointServiceId"] = i.ToStringOutput() }
	}
	var resource VpcEndpointConnectionNotification
	err := ctx.RegisterResource("aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointConnectionNotification gets an existing VpcEndpointConnectionNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointConnectionNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointConnectionNotificationState, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionNotification, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ConnectionEvents; i != nil { inputs["connectionEvents"] = i.ToStringArrayOutput() }
		if i := state.ConnectionNotificationArn; i != nil { inputs["connectionNotificationArn"] = i.ToStringOutput() }
		if i := state.NotificationType; i != nil { inputs["notificationType"] = i.ToStringOutput() }
		if i := state.State; i != nil { inputs["state"] = i.ToStringOutput() }
		if i := state.VpcEndpointId; i != nil { inputs["vpcEndpointId"] = i.ToStringOutput() }
		if i := state.VpcEndpointServiceId; i != nil { inputs["vpcEndpointServiceId"] = i.ToStringOutput() }
	}
	var resource VpcEndpointConnectionNotification
	err := ctx.ReadResource("aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointConnectionNotification resources.
type VpcEndpointConnectionNotificationState struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	ConnectionEvents pulumi.StringArrayInput `pulumi:"connectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumi.StringInput `pulumi:"connectionNotificationArn"`
	// The type of notification.
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// The state of the notification.
	State pulumi.StringInput `pulumi:"state"`
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumi.StringInput `pulumi:"vpcEndpointId"`
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumi.StringInput `pulumi:"vpcEndpointServiceId"`
}

// The set of arguments for constructing a VpcEndpointConnectionNotification resource.
type VpcEndpointConnectionNotificationArgs struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	ConnectionEvents pulumi.StringArrayInput `pulumi:"connectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumi.StringInput `pulumi:"connectionNotificationArn"`
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumi.StringInput `pulumi:"vpcEndpointId"`
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumi.StringInput `pulumi:"vpcEndpointServiceId"`
}
