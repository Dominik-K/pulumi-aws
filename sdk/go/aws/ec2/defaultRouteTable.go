// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a Default VPC Routing Table.
// 
// Each VPC created in AWS comes with a Default Route Table that can be managed, but not
// destroyed. **This is an advanced resource**, and has special caveats to be aware
// of when using it. Please read this document in its entirety before using this
// resource. It is recommended you **do not** use both `ec2.DefaultRouteTable` to
// manage the default route table **and** use the `ec2.MainRouteTableAssociation`,
// due to possible conflict in routes.
// 
// The `ec2.DefaultRouteTable` behaves differently from normal resources, in that
// this provider does not _create_ this resource, but instead attempts to "adopt" it
// into management. We can do this because each VPC created has a Default Route
// Table that cannot be destroyed, and is created with a single route.
// 
// When this provider first adopts the Default Route Table, it **immediately removes all
// defined routes**. It then proceeds to create any routes specified in the
// configuration. This step is required so that only the routes specified in the
// configuration present in the Default Route Table.
// 
// For more information about Route Tables, see the AWS Documentation on
// [Route Tables][aws-route-tables].
// 
// For more information about managing normal Route Tables in this provider, see our
// documentation on [ec2.RouteTable][tf-route-tables].
// 
// > **NOTE on Route Tables and Routes:** This provider currently
// provides both a standalone Route resource and a Route Table resource with routes
// defined in-line. At this time you cannot use a Route Table with in-line routes
// in conjunction with any Route resources. Doing so will cause
// a conflict of rule settings and will overwrite routes.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/default_route_table.html.markdown.
type DefaultRouteTable struct {
	pulumi.CustomResourceState

	// The ID of the Default Routing Table.
	DefaultRouteTableId pulumi.StringOutput `pulumi:"defaultRouteTableId"`

	// The ID of the AWS account that owns the route table
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayOutput `pulumi:"propagatingVgws"`

	// A list of route objects. Their keys are documented below.
	// This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes DefaultRouteTableRoutesArrayOutput `pulumi:"routes"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDefaultRouteTable registers a new resource with the given unique name, arguments, and options.
func NewDefaultRouteTable(ctx *pulumi.Context,
	name string, args *DefaultRouteTableArgs, opts ...pulumi.ResourceOption) (*DefaultRouteTable, error) {
	if args == nil || args.DefaultRouteTableId == nil {
		return nil, errors.New("missing required argument 'DefaultRouteTableId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DefaultRouteTableId; i != nil { inputs["defaultRouteTableId"] = i.ToStringOutput() }
		if i := args.PropagatingVgws; i != nil { inputs["propagatingVgws"] = i.ToStringArrayOutput() }
		if i := args.Routes; i != nil { inputs["routes"] = i.ToDefaultRouteTableRoutesArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource DefaultRouteTable
	err := ctx.RegisterResource("aws:ec2/defaultRouteTable:DefaultRouteTable", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultRouteTable gets an existing DefaultRouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultRouteTableState, opts ...pulumi.ResourceOption) (*DefaultRouteTable, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DefaultRouteTableId; i != nil { inputs["defaultRouteTableId"] = i.ToStringOutput() }
		if i := state.OwnerId; i != nil { inputs["ownerId"] = i.ToStringOutput() }
		if i := state.PropagatingVgws; i != nil { inputs["propagatingVgws"] = i.ToStringArrayOutput() }
		if i := state.Routes; i != nil { inputs["routes"] = i.ToDefaultRouteTableRoutesArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource DefaultRouteTable
	err := ctx.ReadResource("aws:ec2/defaultRouteTable:DefaultRouteTable", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultRouteTable resources.
type DefaultRouteTableState struct {
	// The ID of the Default Routing Table.
	DefaultRouteTableId pulumi.StringInput `pulumi:"defaultRouteTableId"`
	// The ID of the AWS account that owns the route table
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayInput `pulumi:"propagatingVgws"`
	// A list of route objects. Their keys are documented below.
	// This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes DefaultRouteTableRoutesArrayInput `pulumi:"routes"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a DefaultRouteTable resource.
type DefaultRouteTableArgs struct {
	// The ID of the Default Routing Table.
	DefaultRouteTableId pulumi.StringInput `pulumi:"defaultRouteTableId"`
	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayInput `pulumi:"propagatingVgws"`
	// A list of route objects. Their keys are documented below.
	// This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes DefaultRouteTableRoutesArrayInput `pulumi:"routes"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type DefaultRouteTableRoutes struct {
	// The CIDR block of the route.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId *string `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId *string `pulumi:"instanceId"`
	// The Ipv6 CIDR block of the route
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}
var defaultRouteTableRoutesType = reflect.TypeOf((*DefaultRouteTableRoutes)(nil)).Elem()

type DefaultRouteTableRoutesInput interface {
	pulumi.Input

	ToDefaultRouteTableRoutesOutput() DefaultRouteTableRoutesOutput
	ToDefaultRouteTableRoutesOutputWithContext(ctx context.Context) DefaultRouteTableRoutesOutput
}

type DefaultRouteTableRoutesArgs struct {
	// The CIDR block of the route.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumi.StringInput `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The Ipv6 CIDR block of the route
	Ipv6CidrBlock pulumi.StringInput `pulumi:"ipv6CidrBlock"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}

func (DefaultRouteTableRoutesArgs) ElementType() reflect.Type {
	return defaultRouteTableRoutesType
}

func (a DefaultRouteTableRoutesArgs) ToDefaultRouteTableRoutesOutput() DefaultRouteTableRoutesOutput {
	return pulumi.ToOutput(a).(DefaultRouteTableRoutesOutput)
}

func (a DefaultRouteTableRoutesArgs) ToDefaultRouteTableRoutesOutputWithContext(ctx context.Context) DefaultRouteTableRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DefaultRouteTableRoutesOutput)
}

type DefaultRouteTableRoutesOutput struct { *pulumi.OutputState }

// The CIDR block of the route.
func (o DefaultRouteTableRoutesOutput) CidrBlock() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.CidrBlock == nil { return *new(string) } else { return *v.CidrBlock }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC Egress Only Internet Gateway.
func (o DefaultRouteTableRoutesOutput) EgressOnlyGatewayId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.EgressOnlyGatewayId == nil { return *new(string) } else { return *v.EgressOnlyGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC internet gateway or a virtual private gateway.
func (o DefaultRouteTableRoutesOutput) GatewayId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.GatewayId == nil { return *new(string) } else { return *v.GatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 instance.
func (o DefaultRouteTableRoutesOutput) InstanceId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.InstanceId == nil { return *new(string) } else { return *v.InstanceId }
	}).(pulumi.StringOutput)
}

// The Ipv6 CIDR block of the route
func (o DefaultRouteTableRoutesOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.Ipv6CidrBlock == nil { return *new(string) } else { return *v.Ipv6CidrBlock }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC NAT gateway.
func (o DefaultRouteTableRoutesOutput) NatGatewayId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.NatGatewayId == nil { return *new(string) } else { return *v.NatGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 network interface.
func (o DefaultRouteTableRoutesOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.NetworkInterfaceId == nil { return *new(string) } else { return *v.NetworkInterfaceId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 Transit Gateway.
func (o DefaultRouteTableRoutesOutput) TransitGatewayId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.TransitGatewayId == nil { return *new(string) } else { return *v.TransitGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC peering connection.
func (o DefaultRouteTableRoutesOutput) VpcPeeringConnectionId() pulumi.StringOutput {
	return o.Apply(func(v DefaultRouteTableRoutes) string {
		if v.VpcPeeringConnectionId == nil { return *new(string) } else { return *v.VpcPeeringConnectionId }
	}).(pulumi.StringOutput)
}

func (DefaultRouteTableRoutesOutput) ElementType() reflect.Type {
	return defaultRouteTableRoutesType
}

func (o DefaultRouteTableRoutesOutput) ToDefaultRouteTableRoutesOutput() DefaultRouteTableRoutesOutput {
	return o
}

func (o DefaultRouteTableRoutesOutput) ToDefaultRouteTableRoutesOutputWithContext(ctx context.Context) DefaultRouteTableRoutesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DefaultRouteTableRoutesOutput{}) }

var defaultRouteTableRoutesArrayType = reflect.TypeOf((*[]DefaultRouteTableRoutes)(nil)).Elem()

type DefaultRouteTableRoutesArrayInput interface {
	pulumi.Input

	ToDefaultRouteTableRoutesArrayOutput() DefaultRouteTableRoutesArrayOutput
	ToDefaultRouteTableRoutesArrayOutputWithContext(ctx context.Context) DefaultRouteTableRoutesArrayOutput
}

type DefaultRouteTableRoutesArrayArgs []DefaultRouteTableRoutesInput

func (DefaultRouteTableRoutesArrayArgs) ElementType() reflect.Type {
	return defaultRouteTableRoutesArrayType
}

func (a DefaultRouteTableRoutesArrayArgs) ToDefaultRouteTableRoutesArrayOutput() DefaultRouteTableRoutesArrayOutput {
	return pulumi.ToOutput(a).(DefaultRouteTableRoutesArrayOutput)
}

func (a DefaultRouteTableRoutesArrayArgs) ToDefaultRouteTableRoutesArrayOutputWithContext(ctx context.Context) DefaultRouteTableRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DefaultRouteTableRoutesArrayOutput)
}

type DefaultRouteTableRoutesArrayOutput struct { *pulumi.OutputState }

func (o DefaultRouteTableRoutesArrayOutput) Index(i pulumi.IntInput) DefaultRouteTableRoutesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) DefaultRouteTableRoutes {
		return vs[0].([]DefaultRouteTableRoutes)[vs[1].(int)]
	}).(DefaultRouteTableRoutesOutput)
}

func (DefaultRouteTableRoutesArrayOutput) ElementType() reflect.Type {
	return defaultRouteTableRoutesArrayType
}

func (o DefaultRouteTableRoutesArrayOutput) ToDefaultRouteTableRoutesArrayOutput() DefaultRouteTableRoutesArrayOutput {
	return o
}

func (o DefaultRouteTableRoutesArrayOutput) ToDefaultRouteTableRoutesArrayOutputWithContext(ctx context.Context) DefaultRouteTableRoutesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DefaultRouteTableRoutesArrayOutput{}) }

