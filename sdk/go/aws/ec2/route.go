// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a routing table entry (a route) in a VPC routing table.
// 
// > **NOTE on Route Tables and Routes:** This provider currently
// provides both a standalone Route resource and a Route Table resource with routes
// defined in-line. At this time you cannot use a Route Table with in-line routes
// in conjunction with any Route resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route.html.markdown.
type Route struct {
	pulumi.CustomResourceState

	// The destination CIDR block.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`

	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumi.StringOutput `pulumi:"destinationIpv6CidrBlock"`

	DestinationPrefixListId pulumi.StringOutput `pulumi:"destinationPrefixListId"`

	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumi.StringOutput `pulumi:"egressOnlyGatewayId"`

	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`

	// Identifier of an EC2 instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`

	InstanceOwnerId pulumi.StringOutput `pulumi:"instanceOwnerId"`

	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`

	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`

	Origin pulumi.StringOutput `pulumi:"origin"`

	// The ID of the routing table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`

	State pulumi.StringOutput `pulumi:"state"`

	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumi.StringOutput `pulumi:"transitGatewayId"`

	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DestinationCidrBlock; i != nil { inputs["destinationCidrBlock"] = i.ToStringOutput() }
		if i := args.DestinationIpv6CidrBlock; i != nil { inputs["destinationIpv6CidrBlock"] = i.ToStringOutput() }
		if i := args.EgressOnlyGatewayId; i != nil { inputs["egressOnlyGatewayId"] = i.ToStringOutput() }
		if i := args.GatewayId; i != nil { inputs["gatewayId"] = i.ToStringOutput() }
		if i := args.InstanceId; i != nil { inputs["instanceId"] = i.ToStringOutput() }
		if i := args.NatGatewayId; i != nil { inputs["natGatewayId"] = i.ToStringOutput() }
		if i := args.NetworkInterfaceId; i != nil { inputs["networkInterfaceId"] = i.ToStringOutput() }
		if i := args.RouteTableId; i != nil { inputs["routeTableId"] = i.ToStringOutput() }
		if i := args.TransitGatewayId; i != nil { inputs["transitGatewayId"] = i.ToStringOutput() }
		if i := args.VpcPeeringConnectionId; i != nil { inputs["vpcPeeringConnectionId"] = i.ToStringOutput() }
	}
	var resource Route
	err := ctx.RegisterResource("aws:ec2/route:Route", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DestinationCidrBlock; i != nil { inputs["destinationCidrBlock"] = i.ToStringOutput() }
		if i := state.DestinationIpv6CidrBlock; i != nil { inputs["destinationIpv6CidrBlock"] = i.ToStringOutput() }
		if i := state.DestinationPrefixListId; i != nil { inputs["destinationPrefixListId"] = i.ToStringOutput() }
		if i := state.EgressOnlyGatewayId; i != nil { inputs["egressOnlyGatewayId"] = i.ToStringOutput() }
		if i := state.GatewayId; i != nil { inputs["gatewayId"] = i.ToStringOutput() }
		if i := state.InstanceId; i != nil { inputs["instanceId"] = i.ToStringOutput() }
		if i := state.InstanceOwnerId; i != nil { inputs["instanceOwnerId"] = i.ToStringOutput() }
		if i := state.NatGatewayId; i != nil { inputs["natGatewayId"] = i.ToStringOutput() }
		if i := state.NetworkInterfaceId; i != nil { inputs["networkInterfaceId"] = i.ToStringOutput() }
		if i := state.Origin; i != nil { inputs["origin"] = i.ToStringOutput() }
		if i := state.RouteTableId; i != nil { inputs["routeTableId"] = i.ToStringOutput() }
		if i := state.State; i != nil { inputs["state"] = i.ToStringOutput() }
		if i := state.TransitGatewayId; i != nil { inputs["transitGatewayId"] = i.ToStringOutput() }
		if i := state.VpcPeeringConnectionId; i != nil { inputs["vpcPeeringConnectionId"] = i.ToStringOutput() }
	}
	var resource Route
	err := ctx.ReadResource("aws:ec2/route:Route", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type RouteState struct {
	// The destination CIDR block.
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumi.StringInput `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId pulumi.StringInput `pulumi:"destinationPrefixListId"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumi.StringInput `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	InstanceOwnerId pulumi.StringInput `pulumi:"instanceOwnerId"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	Origin pulumi.StringInput `pulumi:"origin"`
	// The ID of the routing table.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	State pulumi.StringInput `pulumi:"state"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The destination CIDR block.
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumi.StringInput `pulumi:"destinationIpv6CidrBlock"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumi.StringInput `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The ID of the routing table.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}
