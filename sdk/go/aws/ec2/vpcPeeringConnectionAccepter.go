// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage the accepter's side of a VPC Peering Connection.
// 
// When a cross-account (requester's AWS account differs from the accepter's AWS account) or an inter-region
// VPC Peering Connection is created, a VPC Peering Connection resource is automatically created in the
// accepter's account.
// The requester can use the `ec2.VpcPeeringConnection` resource to manage its side of the connection
// and the accepter can use the `ec2.VpcPeeringConnectionAccepter` resource to "adopt" its side of the
// connection into management.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_peering_connection_accepter.html.markdown.
type VpcPeeringConnectionAccepter struct {
	pulumi.CustomResourceState

	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringOutput `pulumi:"acceptStatus"`

	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterOutput `pulumi:"accepter"`

	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolOutput `pulumi:"autoAccept"`

	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumi.StringOutput `pulumi:"peerOwnerId"`

	// The region of the accepter VPC.
	PeerRegion pulumi.StringOutput `pulumi:"peerRegion"`

	// The ID of the requester VPC.
	PeerVpcId pulumi.StringOutput `pulumi:"peerVpcId"`

	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterOutput `pulumi:"requester"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The ID of the accepter VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`

	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewVpcPeeringConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	if args == nil || args.VpcPeeringConnectionId == nil {
		return nil, errors.New("missing required argument 'VpcPeeringConnectionId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Accepter; i != nil { inputs["accepter"] = i.ToVpcPeeringConnectionAccepterAccepterOutput() }
		if i := args.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := args.Requester; i != nil { inputs["requester"] = i.ToVpcPeeringConnectionAccepterRequesterOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.VpcPeeringConnectionId; i != nil { inputs["vpcPeeringConnectionId"] = i.ToStringOutput() }
	}
	var resource VpcPeeringConnectionAccepter
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnectionAccepter gets an existing VpcPeeringConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionAccepterState, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AcceptStatus; i != nil { inputs["acceptStatus"] = i.ToStringOutput() }
		if i := state.Accepter; i != nil { inputs["accepter"] = i.ToVpcPeeringConnectionAccepterAccepterOutput() }
		if i := state.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := state.PeerOwnerId; i != nil { inputs["peerOwnerId"] = i.ToStringOutput() }
		if i := state.PeerRegion; i != nil { inputs["peerRegion"] = i.ToStringOutput() }
		if i := state.PeerVpcId; i != nil { inputs["peerVpcId"] = i.ToStringOutput() }
		if i := state.Requester; i != nil { inputs["requester"] = i.ToVpcPeeringConnectionAccepterRequesterOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
		if i := state.VpcPeeringConnectionId; i != nil { inputs["vpcPeeringConnectionId"] = i.ToStringOutput() }
	}
	var resource VpcPeeringConnectionAccepter
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnectionAccepter resources.
type VpcPeeringConnectionAccepterState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringInput `pulumi:"acceptStatus"`
	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterInput `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumi.StringInput `pulumi:"peerOwnerId"`
	// The region of the accepter VPC.
	PeerRegion pulumi.StringInput `pulumi:"peerRegion"`
	// The ID of the requester VPC.
	PeerVpcId pulumi.StringInput `pulumi:"peerVpcId"`
	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterInput `pulumi:"requester"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the accepter VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a VpcPeeringConnectionAccepter resource.
type VpcPeeringConnectionAccepterArgs struct {
	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterInput `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	// A configuration block that describes [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterInput `pulumi:"requester"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}
type VpcPeeringConnectionAccepterAccepter struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc *bool `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution *bool `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink *bool `pulumi:"allowVpcToRemoteClassicLink"`
}
var vpcPeeringConnectionAccepterAccepterType = reflect.TypeOf((*VpcPeeringConnectionAccepterAccepter)(nil)).Elem()

type VpcPeeringConnectionAccepterAccepterInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput
	ToVpcPeeringConnectionAccepterAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterOutput
}

type VpcPeeringConnectionAccepterAccepterArgs struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc pulumi.BoolInput `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution pulumi.BoolInput `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink pulumi.BoolInput `pulumi:"allowVpcToRemoteClassicLink"`
}

func (VpcPeeringConnectionAccepterAccepterArgs) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterAccepterType
}

func (a VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput {
	return pulumi.ToOutput(a).(VpcPeeringConnectionAccepterAccepterOutput)
}

func (a VpcPeeringConnectionAccepterAccepterArgs) ToVpcPeeringConnectionAccepterAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcPeeringConnectionAccepterAccepterOutput)
}

type VpcPeeringConnectionAccepterAccepterOutput struct { *pulumi.OutputState }

// Indicates whether a local ClassicLink connection can communicate
// with the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterAccepter) bool {
		if v.AllowClassicLinkToRemoteVpc == nil { return *new(bool) } else { return *v.AllowClassicLinkToRemoteVpc }
	}).(pulumi.BoolOutput)
}

// Indicates whether a local VPC can resolve public DNS hostnames to
// private IP addresses when queried from instances in a peer VPC.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowRemoteVpcDnsResolution() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterAccepter) bool {
		if v.AllowRemoteVpcDnsResolution == nil { return *new(bool) } else { return *v.AllowRemoteVpcDnsResolution }
	}).(pulumi.BoolOutput)
}

// Indicates whether a local VPC can communicate with a ClassicLink
// connection in the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterAccepterOutput) AllowVpcToRemoteClassicLink() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterAccepter) bool {
		if v.AllowVpcToRemoteClassicLink == nil { return *new(bool) } else { return *v.AllowVpcToRemoteClassicLink }
	}).(pulumi.BoolOutput)
}

func (VpcPeeringConnectionAccepterAccepterOutput) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterAccepterType
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterOutput() VpcPeeringConnectionAccepterAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterAccepterOutput) ToVpcPeeringConnectionAccepterAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterAccepterOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcPeeringConnectionAccepterAccepterOutput{}) }

type VpcPeeringConnectionAccepterRequester struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc *bool `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution *bool `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink *bool `pulumi:"allowVpcToRemoteClassicLink"`
}
var vpcPeeringConnectionAccepterRequesterType = reflect.TypeOf((*VpcPeeringConnectionAccepterRequester)(nil)).Elem()

type VpcPeeringConnectionAccepterRequesterInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterRequesterOutput() VpcPeeringConnectionAccepterRequesterOutput
	ToVpcPeeringConnectionAccepterRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterRequesterOutput
}

type VpcPeeringConnectionAccepterRequesterArgs struct {
	// Indicates whether a local ClassicLink connection can communicate
	// with the peer VPC over the VPC Peering Connection.
	AllowClassicLinkToRemoteVpc pulumi.BoolInput `pulumi:"allowClassicLinkToRemoteVpc"`
	// Indicates whether a local VPC can resolve public DNS hostnames to
	// private IP addresses when queried from instances in a peer VPC.
	AllowRemoteVpcDnsResolution pulumi.BoolInput `pulumi:"allowRemoteVpcDnsResolution"`
	// Indicates whether a local VPC can communicate with a ClassicLink
	// connection in the peer VPC over the VPC Peering Connection.
	AllowVpcToRemoteClassicLink pulumi.BoolInput `pulumi:"allowVpcToRemoteClassicLink"`
}

func (VpcPeeringConnectionAccepterRequesterArgs) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterRequesterType
}

func (a VpcPeeringConnectionAccepterRequesterArgs) ToVpcPeeringConnectionAccepterRequesterOutput() VpcPeeringConnectionAccepterRequesterOutput {
	return pulumi.ToOutput(a).(VpcPeeringConnectionAccepterRequesterOutput)
}

func (a VpcPeeringConnectionAccepterRequesterArgs) ToVpcPeeringConnectionAccepterRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterRequesterOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcPeeringConnectionAccepterRequesterOutput)
}

type VpcPeeringConnectionAccepterRequesterOutput struct { *pulumi.OutputState }

// Indicates whether a local ClassicLink connection can communicate
// with the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterRequesterOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterRequester) bool {
		if v.AllowClassicLinkToRemoteVpc == nil { return *new(bool) } else { return *v.AllowClassicLinkToRemoteVpc }
	}).(pulumi.BoolOutput)
}

// Indicates whether a local VPC can resolve public DNS hostnames to
// private IP addresses when queried from instances in a peer VPC.
func (o VpcPeeringConnectionAccepterRequesterOutput) AllowRemoteVpcDnsResolution() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterRequester) bool {
		if v.AllowRemoteVpcDnsResolution == nil { return *new(bool) } else { return *v.AllowRemoteVpcDnsResolution }
	}).(pulumi.BoolOutput)
}

// Indicates whether a local VPC can communicate with a ClassicLink
// connection in the peer VPC over the VPC Peering Connection.
func (o VpcPeeringConnectionAccepterRequesterOutput) AllowVpcToRemoteClassicLink() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterRequester) bool {
		if v.AllowVpcToRemoteClassicLink == nil { return *new(bool) } else { return *v.AllowVpcToRemoteClassicLink }
	}).(pulumi.BoolOutput)
}

func (VpcPeeringConnectionAccepterRequesterOutput) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterRequesterType
}

func (o VpcPeeringConnectionAccepterRequesterOutput) ToVpcPeeringConnectionAccepterRequesterOutput() VpcPeeringConnectionAccepterRequesterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterRequesterOutput) ToVpcPeeringConnectionAccepterRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterRequesterOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcPeeringConnectionAccepterRequesterOutput{}) }

