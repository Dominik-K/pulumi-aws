// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The "AMI copy" resource allows duplication of an Amazon Machine Image (AMI),
// including cross-region copies.
// 
// If the source AMI has associated EBS snapshots, those will also be duplicated
// along with the AMI.
// 
// This is useful for taking a single AMI provisioned in one region and making
// it available in another for a multi-region deployment.
// 
// Copying an AMI can take several minutes. The creation of this resource will
// block until the new AMI is available for use on new instances.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ami_copy.html.markdown.
type AmiCopy struct {
	pulumi.CustomResourceState

	// Machine architecture for created instances. Defaults to "x8664".
	Architecture pulumi.StringOutput `pulumi:"architecture"`

	// A longer, human-readable description for the AMI.
	Description pulumi.StringOutput `pulumi:"description"`

	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices AmiCopyEbsBlockDevicesArrayOutput `pulumi:"ebsBlockDevices"`

	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport pulumi.BoolOutput `pulumi:"enaSupport"`

	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`

	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices AmiCopyEphemeralBlockDevicesArrayOutput `pulumi:"ephemeralBlockDevices"`

	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation pulumi.StringOutput `pulumi:"imageLocation"`

	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId pulumi.StringOutput `pulumi:"kernelId"`

	// The full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	ManageEbsSnapshots pulumi.BoolOutput `pulumi:"manageEbsSnapshots"`

	// A region-unique name for the AMI.
	Name pulumi.StringOutput `pulumi:"name"`

	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId pulumi.StringOutput `pulumi:"ramdiskId"`

	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName pulumi.StringOutput `pulumi:"rootDeviceName"`

	RootSnapshotId pulumi.StringOutput `pulumi:"rootSnapshotId"`

	// The id of the AMI to copy. This id must be valid in the region
	// given by `sourceAmiRegion`.
	SourceAmiId pulumi.StringOutput `pulumi:"sourceAmiId"`

	// The region from which the AMI will be copied. This may be the
	// same as the AWS provider region in order to create a copy within the same region.
	SourceAmiRegion pulumi.StringOutput `pulumi:"sourceAmiRegion"`

	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport pulumi.StringOutput `pulumi:"sriovNetSupport"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType pulumi.StringOutput `pulumi:"virtualizationType"`
}

// NewAmiCopy registers a new resource with the given unique name, arguments, and options.
func NewAmiCopy(ctx *pulumi.Context,
	name string, args *AmiCopyArgs, opts ...pulumi.ResourceOption) (*AmiCopy, error) {
	if args == nil || args.SourceAmiId == nil {
		return nil, errors.New("missing required argument 'SourceAmiId'")
	}
	if args == nil || args.SourceAmiRegion == nil {
		return nil, errors.New("missing required argument 'SourceAmiRegion'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.EbsBlockDevices; i != nil { inputs["ebsBlockDevices"] = i.ToAmiCopyEbsBlockDevicesArrayOutput() }
		if i := args.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := args.EphemeralBlockDevices; i != nil { inputs["ephemeralBlockDevices"] = i.ToAmiCopyEphemeralBlockDevicesArrayOutput() }
		if i := args.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.SourceAmiId; i != nil { inputs["sourceAmiId"] = i.ToStringOutput() }
		if i := args.SourceAmiRegion; i != nil { inputs["sourceAmiRegion"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource AmiCopy
	err := ctx.RegisterResource("aws:ec2/amiCopy:AmiCopy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmiCopy gets an existing AmiCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmiCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AmiCopyState, opts ...pulumi.ResourceOption) (*AmiCopy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Architecture; i != nil { inputs["architecture"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.EbsBlockDevices; i != nil { inputs["ebsBlockDevices"] = i.ToAmiCopyEbsBlockDevicesArrayOutput() }
		if i := state.EnaSupport; i != nil { inputs["enaSupport"] = i.ToBoolOutput() }
		if i := state.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := state.EphemeralBlockDevices; i != nil { inputs["ephemeralBlockDevices"] = i.ToAmiCopyEphemeralBlockDevicesArrayOutput() }
		if i := state.ImageLocation; i != nil { inputs["imageLocation"] = i.ToStringOutput() }
		if i := state.KernelId; i != nil { inputs["kernelId"] = i.ToStringOutput() }
		if i := state.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := state.ManageEbsSnapshots; i != nil { inputs["manageEbsSnapshots"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RamdiskId; i != nil { inputs["ramdiskId"] = i.ToStringOutput() }
		if i := state.RootDeviceName; i != nil { inputs["rootDeviceName"] = i.ToStringOutput() }
		if i := state.RootSnapshotId; i != nil { inputs["rootSnapshotId"] = i.ToStringOutput() }
		if i := state.SourceAmiId; i != nil { inputs["sourceAmiId"] = i.ToStringOutput() }
		if i := state.SourceAmiRegion; i != nil { inputs["sourceAmiRegion"] = i.ToStringOutput() }
		if i := state.SriovNetSupport; i != nil { inputs["sriovNetSupport"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VirtualizationType; i != nil { inputs["virtualizationType"] = i.ToStringOutput() }
	}
	var resource AmiCopy
	err := ctx.ReadResource("aws:ec2/amiCopy:AmiCopy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AmiCopy resources.
type AmiCopyState struct {
	// Machine architecture for created instances. Defaults to "x8664".
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// A longer, human-readable description for the AMI.
	Description pulumi.StringInput `pulumi:"description"`
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices AmiCopyEbsBlockDevicesArrayInput `pulumi:"ebsBlockDevices"`
	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport pulumi.BoolInput `pulumi:"enaSupport"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices AmiCopyEphemeralBlockDevicesArrayInput `pulumi:"ephemeralBlockDevices"`
	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation pulumi.StringInput `pulumi:"imageLocation"`
	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId pulumi.StringInput `pulumi:"kernelId"`
	// The full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	ManageEbsSnapshots pulumi.BoolInput `pulumi:"manageEbsSnapshots"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId pulumi.StringInput `pulumi:"ramdiskId"`
	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName pulumi.StringInput `pulumi:"rootDeviceName"`
	RootSnapshotId pulumi.StringInput `pulumi:"rootSnapshotId"`
	// The id of the AMI to copy. This id must be valid in the region
	// given by `sourceAmiRegion`.
	SourceAmiId pulumi.StringInput `pulumi:"sourceAmiId"`
	// The region from which the AMI will be copied. This may be the
	// same as the AWS provider region in order to create a copy within the same region.
	SourceAmiRegion pulumi.StringInput `pulumi:"sourceAmiRegion"`
	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport pulumi.StringInput `pulumi:"sriovNetSupport"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType pulumi.StringInput `pulumi:"virtualizationType"`
}

// The set of arguments for constructing a AmiCopy resource.
type AmiCopyArgs struct {
	// A longer, human-readable description for the AMI.
	Description pulumi.StringInput `pulumi:"description"`
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices AmiCopyEbsBlockDevicesArrayInput `pulumi:"ebsBlockDevices"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices AmiCopyEphemeralBlockDevicesArrayInput `pulumi:"ephemeralBlockDevices"`
	// The full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of the AMI to copy. This id must be valid in the region
	// given by `sourceAmiRegion`.
	SourceAmiId pulumi.StringInput `pulumi:"sourceAmiId"`
	// The region from which the AMI will be copied. This may be the
	// same as the AWS provider region in order to create a copy within the same region.
	SourceAmiRegion pulumi.StringInput `pulumi:"sourceAmiRegion"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type AmiCopyEbsBlockDevices struct {
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	DeviceName *string `pulumi:"deviceName"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted *bool `pulumi:"encrypted"`
	Iops *int `pulumi:"iops"`
	SnapshotId *string `pulumi:"snapshotId"`
	VolumeSize *int `pulumi:"volumeSize"`
	VolumeType *string `pulumi:"volumeType"`
}
var amiCopyEbsBlockDevicesType = reflect.TypeOf((*AmiCopyEbsBlockDevices)(nil)).Elem()

type AmiCopyEbsBlockDevicesInput interface {
	pulumi.Input

	ToAmiCopyEbsBlockDevicesOutput() AmiCopyEbsBlockDevicesOutput
	ToAmiCopyEbsBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesOutput
}

type AmiCopyEbsBlockDevicesArgs struct {
	DeleteOnTermination pulumi.BoolInput `pulumi:"deleteOnTermination"`
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	Iops pulumi.IntInput `pulumi:"iops"`
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	VolumeSize pulumi.IntInput `pulumi:"volumeSize"`
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (AmiCopyEbsBlockDevicesArgs) ElementType() reflect.Type {
	return amiCopyEbsBlockDevicesType
}

func (a AmiCopyEbsBlockDevicesArgs) ToAmiCopyEbsBlockDevicesOutput() AmiCopyEbsBlockDevicesOutput {
	return pulumi.ToOutput(a).(AmiCopyEbsBlockDevicesOutput)
}

func (a AmiCopyEbsBlockDevicesArgs) ToAmiCopyEbsBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AmiCopyEbsBlockDevicesOutput)
}

type AmiCopyEbsBlockDevicesOutput struct { *pulumi.OutputState }

func (o AmiCopyEbsBlockDevicesOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) bool {
		if v.DeleteOnTermination == nil { return *new(bool) } else { return *v.DeleteOnTermination }
	}).(pulumi.BoolOutput)
}

func (o AmiCopyEbsBlockDevicesOutput) DeviceName() pulumi.StringOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) string {
		if v.DeviceName == nil { return *new(string) } else { return *v.DeviceName }
	}).(pulumi.StringOutput)
}

// Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
func (o AmiCopyEbsBlockDevicesOutput) Encrypted() pulumi.BoolOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) bool {
		if v.Encrypted == nil { return *new(bool) } else { return *v.Encrypted }
	}).(pulumi.BoolOutput)
}

func (o AmiCopyEbsBlockDevicesOutput) Iops() pulumi.IntOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) int {
		if v.Iops == nil { return *new(int) } else { return *v.Iops }
	}).(pulumi.IntOutput)
}

func (o AmiCopyEbsBlockDevicesOutput) SnapshotId() pulumi.StringOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) string {
		if v.SnapshotId == nil { return *new(string) } else { return *v.SnapshotId }
	}).(pulumi.StringOutput)
}

func (o AmiCopyEbsBlockDevicesOutput) VolumeSize() pulumi.IntOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) int {
		if v.VolumeSize == nil { return *new(int) } else { return *v.VolumeSize }
	}).(pulumi.IntOutput)
}

func (o AmiCopyEbsBlockDevicesOutput) VolumeType() pulumi.StringOutput {
	return o.Apply(func(v AmiCopyEbsBlockDevices) string {
		if v.VolumeType == nil { return *new(string) } else { return *v.VolumeType }
	}).(pulumi.StringOutput)
}

func (AmiCopyEbsBlockDevicesOutput) ElementType() reflect.Type {
	return amiCopyEbsBlockDevicesType
}

func (o AmiCopyEbsBlockDevicesOutput) ToAmiCopyEbsBlockDevicesOutput() AmiCopyEbsBlockDevicesOutput {
	return o
}

func (o AmiCopyEbsBlockDevicesOutput) ToAmiCopyEbsBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AmiCopyEbsBlockDevicesOutput{}) }

var amiCopyEbsBlockDevicesArrayType = reflect.TypeOf((*[]AmiCopyEbsBlockDevices)(nil)).Elem()

type AmiCopyEbsBlockDevicesArrayInput interface {
	pulumi.Input

	ToAmiCopyEbsBlockDevicesArrayOutput() AmiCopyEbsBlockDevicesArrayOutput
	ToAmiCopyEbsBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesArrayOutput
}

type AmiCopyEbsBlockDevicesArrayArgs []AmiCopyEbsBlockDevicesInput

func (AmiCopyEbsBlockDevicesArrayArgs) ElementType() reflect.Type {
	return amiCopyEbsBlockDevicesArrayType
}

func (a AmiCopyEbsBlockDevicesArrayArgs) ToAmiCopyEbsBlockDevicesArrayOutput() AmiCopyEbsBlockDevicesArrayOutput {
	return pulumi.ToOutput(a).(AmiCopyEbsBlockDevicesArrayOutput)
}

func (a AmiCopyEbsBlockDevicesArrayArgs) ToAmiCopyEbsBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AmiCopyEbsBlockDevicesArrayOutput)
}

type AmiCopyEbsBlockDevicesArrayOutput struct { *pulumi.OutputState }

func (o AmiCopyEbsBlockDevicesArrayOutput) Index(i pulumi.IntInput) AmiCopyEbsBlockDevicesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AmiCopyEbsBlockDevices {
		return vs[0].([]AmiCopyEbsBlockDevices)[vs[1].(int)]
	}).(AmiCopyEbsBlockDevicesOutput)
}

func (AmiCopyEbsBlockDevicesArrayOutput) ElementType() reflect.Type {
	return amiCopyEbsBlockDevicesArrayType
}

func (o AmiCopyEbsBlockDevicesArrayOutput) ToAmiCopyEbsBlockDevicesArrayOutput() AmiCopyEbsBlockDevicesArrayOutput {
	return o
}

func (o AmiCopyEbsBlockDevicesArrayOutput) ToAmiCopyEbsBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEbsBlockDevicesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AmiCopyEbsBlockDevicesArrayOutput{}) }

type AmiCopyEphemeralBlockDevices struct {
	DeviceName *string `pulumi:"deviceName"`
	VirtualName *string `pulumi:"virtualName"`
}
var amiCopyEphemeralBlockDevicesType = reflect.TypeOf((*AmiCopyEphemeralBlockDevices)(nil)).Elem()

type AmiCopyEphemeralBlockDevicesInput interface {
	pulumi.Input

	ToAmiCopyEphemeralBlockDevicesOutput() AmiCopyEphemeralBlockDevicesOutput
	ToAmiCopyEphemeralBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesOutput
}

type AmiCopyEphemeralBlockDevicesArgs struct {
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	VirtualName pulumi.StringInput `pulumi:"virtualName"`
}

func (AmiCopyEphemeralBlockDevicesArgs) ElementType() reflect.Type {
	return amiCopyEphemeralBlockDevicesType
}

func (a AmiCopyEphemeralBlockDevicesArgs) ToAmiCopyEphemeralBlockDevicesOutput() AmiCopyEphemeralBlockDevicesOutput {
	return pulumi.ToOutput(a).(AmiCopyEphemeralBlockDevicesOutput)
}

func (a AmiCopyEphemeralBlockDevicesArgs) ToAmiCopyEphemeralBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AmiCopyEphemeralBlockDevicesOutput)
}

type AmiCopyEphemeralBlockDevicesOutput struct { *pulumi.OutputState }

func (o AmiCopyEphemeralBlockDevicesOutput) DeviceName() pulumi.StringOutput {
	return o.Apply(func(v AmiCopyEphemeralBlockDevices) string {
		if v.DeviceName == nil { return *new(string) } else { return *v.DeviceName }
	}).(pulumi.StringOutput)
}

func (o AmiCopyEphemeralBlockDevicesOutput) VirtualName() pulumi.StringOutput {
	return o.Apply(func(v AmiCopyEphemeralBlockDevices) string {
		if v.VirtualName == nil { return *new(string) } else { return *v.VirtualName }
	}).(pulumi.StringOutput)
}

func (AmiCopyEphemeralBlockDevicesOutput) ElementType() reflect.Type {
	return amiCopyEphemeralBlockDevicesType
}

func (o AmiCopyEphemeralBlockDevicesOutput) ToAmiCopyEphemeralBlockDevicesOutput() AmiCopyEphemeralBlockDevicesOutput {
	return o
}

func (o AmiCopyEphemeralBlockDevicesOutput) ToAmiCopyEphemeralBlockDevicesOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AmiCopyEphemeralBlockDevicesOutput{}) }

var amiCopyEphemeralBlockDevicesArrayType = reflect.TypeOf((*[]AmiCopyEphemeralBlockDevices)(nil)).Elem()

type AmiCopyEphemeralBlockDevicesArrayInput interface {
	pulumi.Input

	ToAmiCopyEphemeralBlockDevicesArrayOutput() AmiCopyEphemeralBlockDevicesArrayOutput
	ToAmiCopyEphemeralBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesArrayOutput
}

type AmiCopyEphemeralBlockDevicesArrayArgs []AmiCopyEphemeralBlockDevicesInput

func (AmiCopyEphemeralBlockDevicesArrayArgs) ElementType() reflect.Type {
	return amiCopyEphemeralBlockDevicesArrayType
}

func (a AmiCopyEphemeralBlockDevicesArrayArgs) ToAmiCopyEphemeralBlockDevicesArrayOutput() AmiCopyEphemeralBlockDevicesArrayOutput {
	return pulumi.ToOutput(a).(AmiCopyEphemeralBlockDevicesArrayOutput)
}

func (a AmiCopyEphemeralBlockDevicesArrayArgs) ToAmiCopyEphemeralBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AmiCopyEphemeralBlockDevicesArrayOutput)
}

type AmiCopyEphemeralBlockDevicesArrayOutput struct { *pulumi.OutputState }

func (o AmiCopyEphemeralBlockDevicesArrayOutput) Index(i pulumi.IntInput) AmiCopyEphemeralBlockDevicesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AmiCopyEphemeralBlockDevices {
		return vs[0].([]AmiCopyEphemeralBlockDevices)[vs[1].(int)]
	}).(AmiCopyEphemeralBlockDevicesOutput)
}

func (AmiCopyEphemeralBlockDevicesArrayOutput) ElementType() reflect.Type {
	return amiCopyEphemeralBlockDevicesArrayType
}

func (o AmiCopyEphemeralBlockDevicesArrayOutput) ToAmiCopyEphemeralBlockDevicesArrayOutput() AmiCopyEphemeralBlockDevicesArrayOutput {
	return o
}

func (o AmiCopyEphemeralBlockDevicesArrayOutput) ToAmiCopyEphemeralBlockDevicesArrayOutputWithContext(ctx context.Context) AmiCopyEphemeralBlockDevicesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AmiCopyEphemeralBlockDevicesArrayOutput{}) }

