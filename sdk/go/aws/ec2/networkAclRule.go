// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an entry (a rule) in a network ACL with the specified rule number.
// 
// > **NOTE on Network ACLs and Network ACL Rules:** This provider currently
// provides both a standalone Network ACL Rule resource and a Network ACL resource with rules
// defined in-line. At this time you cannot use a Network ACL with in-line rules
// in conjunction with any Network ACL Rule resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/network_acl_rule.html.markdown.
type NetworkAclRule struct {
	pulumi.CustomResourceState

	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`

	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumi.BoolOutput `pulumi:"egress"`

	// The from port to match.
	FromPort pulumi.IntOutput `pulumi:"fromPort"`

	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocol. e.g. -1
	IcmpCode pulumi.StringOutput `pulumi:"icmpCode"`

	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocol. e.g. -1
	IcmpType pulumi.StringOutput `pulumi:"icmpType"`

	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumi.StringOutput `pulumi:"ipv6CidrBlock"`

	// The ID of the network ACL.
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`

	// The protocol. A value of -1 means all protocols.
	Protocol pulumi.StringOutput `pulumi:"protocol"`

	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumi.StringOutput `pulumi:"ruleAction"`

	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumi.IntOutput `pulumi:"ruleNumber"`

	// The to port to match.
	ToPort pulumi.IntOutput `pulumi:"toPort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil || args.NetworkAclId == nil {
		return nil, errors.New("missing required argument 'NetworkAclId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.RuleAction == nil {
		return nil, errors.New("missing required argument 'RuleAction'")
	}
	if args == nil || args.RuleNumber == nil {
		return nil, errors.New("missing required argument 'RuleNumber'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CidrBlock; i != nil { inputs["cidrBlock"] = i.ToStringOutput() }
		if i := args.Egress; i != nil { inputs["egress"] = i.ToBoolOutput() }
		if i := args.FromPort; i != nil { inputs["fromPort"] = i.ToIntOutput() }
		if i := args.IcmpCode; i != nil { inputs["icmpCode"] = i.ToStringOutput() }
		if i := args.IcmpType; i != nil { inputs["icmpType"] = i.ToStringOutput() }
		if i := args.Ipv6CidrBlock; i != nil { inputs["ipv6CidrBlock"] = i.ToStringOutput() }
		if i := args.NetworkAclId; i != nil { inputs["networkAclId"] = i.ToStringOutput() }
		if i := args.Protocol; i != nil { inputs["protocol"] = i.ToStringOutput() }
		if i := args.RuleAction; i != nil { inputs["ruleAction"] = i.ToStringOutput() }
		if i := args.RuleNumber; i != nil { inputs["ruleNumber"] = i.ToIntOutput() }
		if i := args.ToPort; i != nil { inputs["toPort"] = i.ToIntOutput() }
	}
	var resource NetworkAclRule
	err := ctx.RegisterResource("aws:ec2/networkAclRule:NetworkAclRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.CidrBlock; i != nil { inputs["cidrBlock"] = i.ToStringOutput() }
		if i := state.Egress; i != nil { inputs["egress"] = i.ToBoolOutput() }
		if i := state.FromPort; i != nil { inputs["fromPort"] = i.ToIntOutput() }
		if i := state.IcmpCode; i != nil { inputs["icmpCode"] = i.ToStringOutput() }
		if i := state.IcmpType; i != nil { inputs["icmpType"] = i.ToStringOutput() }
		if i := state.Ipv6CidrBlock; i != nil { inputs["ipv6CidrBlock"] = i.ToStringOutput() }
		if i := state.NetworkAclId; i != nil { inputs["networkAclId"] = i.ToStringOutput() }
		if i := state.Protocol; i != nil { inputs["protocol"] = i.ToStringOutput() }
		if i := state.RuleAction; i != nil { inputs["ruleAction"] = i.ToStringOutput() }
		if i := state.RuleNumber; i != nil { inputs["ruleNumber"] = i.ToIntOutput() }
		if i := state.ToPort; i != nil { inputs["toPort"] = i.ToIntOutput() }
	}
	var resource NetworkAclRule
	err := ctx.ReadResource("aws:ec2/networkAclRule:NetworkAclRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type NetworkAclRuleState struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumi.BoolInput `pulumi:"egress"`
	// The from port to match.
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocol. e.g. -1
	IcmpCode pulumi.StringInput `pulumi:"icmpCode"`
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocol. e.g. -1
	IcmpType pulumi.StringInput `pulumi:"icmpType"`
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumi.StringInput `pulumi:"ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkAclId pulumi.StringInput `pulumi:"networkAclId"`
	// The protocol. A value of -1 means all protocols.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumi.StringInput `pulumi:"ruleAction"`
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumi.IntInput `pulumi:"ruleNumber"`
	// The to port to match.
	ToPort pulumi.IntInput `pulumi:"toPort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumi.BoolInput `pulumi:"egress"`
	// The from port to match.
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocol. e.g. -1
	IcmpCode pulumi.StringInput `pulumi:"icmpCode"`
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocol. e.g. -1
	IcmpType pulumi.StringInput `pulumi:"icmpType"`
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumi.StringInput `pulumi:"ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkAclId pulumi.StringInput `pulumi:"networkAclId"`
	// The protocol. A value of -1 means all protocols.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumi.StringInput `pulumi:"ruleAction"`
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumi.IntInput `pulumi:"ruleNumber"`
	// The to port to match.
	ToPort pulumi.IntInput `pulumi:"toPort"`
}
