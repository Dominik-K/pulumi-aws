// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a VPC peering connection.
// 
// > **NOTE on VPC Peering Connections and VPC Peering Connection Options:** This provider provides
// both a standalone VPC Peering Connection Options and a VPC Peering Connection
// resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
// connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
// Doing so will cause a conflict of options and will overwrite the options.
// Using a VPC Peering Connection Options resource decouples management of the connection options from
// management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.
// 
// > **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region
// VPC Peering Connections use the `ec2.VpcPeeringConnection` resource to manage the requester's side of the
// connection and use the `ec2.VpcPeeringConnectionAccepter` resource to manage the accepter's side of the connection.
// 
// ## Notes
// 
// If both VPCs are not in the same AWS account do not enable the `autoAccept` attribute.
// The accepter can manage its side of the connection using the `ec2.VpcPeeringConnectionAccepter` resource
// or accept the connection manually using the AWS Management Console, AWS CLI, through SDKs, etc.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_peering_connection.html.markdown.
type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringOutput `pulumi:"acceptStatus"`

	// An optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter VpcPeeringConnectionAccepterResourceOutput `pulumi:"accepter"`

	// Accept the peering (both VPCs need to be in the same AWS account).
	AutoAccept pulumi.BoolOutput `pulumi:"autoAccept"`

	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the [AWS provider][1] is currently connected to.
	PeerOwnerId pulumi.StringOutput `pulumi:"peerOwnerId"`

	// The region of the accepter VPC of the [VPC Peering Connection]. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumi.StringOutput `pulumi:"peerRegion"`

	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumi.StringOutput `pulumi:"peerVpcId"`

	// A optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester VpcPeeringConnectionRequesterOutput `pulumi:"requester"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The ID of the requester VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil || args.PeerVpcId == nil {
		return nil, errors.New("missing required argument 'PeerVpcId'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Accepter; i != nil { inputs["accepter"] = i.ToVpcPeeringConnectionAccepterResourceOutput() }
		if i := args.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := args.PeerOwnerId; i != nil { inputs["peerOwnerId"] = i.ToStringOutput() }
		if i := args.PeerRegion; i != nil { inputs["peerRegion"] = i.ToStringOutput() }
		if i := args.PeerVpcId; i != nil { inputs["peerVpcId"] = i.ToStringOutput() }
		if i := args.Requester; i != nil { inputs["requester"] = i.ToVpcPeeringConnectionRequesterOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AcceptStatus; i != nil { inputs["acceptStatus"] = i.ToStringOutput() }
		if i := state.Accepter; i != nil { inputs["accepter"] = i.ToVpcPeeringConnectionAccepterResourceOutput() }
		if i := state.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := state.PeerOwnerId; i != nil { inputs["peerOwnerId"] = i.ToStringOutput() }
		if i := state.PeerRegion; i != nil { inputs["peerRegion"] = i.ToStringOutput() }
		if i := state.PeerVpcId; i != nil { inputs["peerVpcId"] = i.ToStringOutput() }
		if i := state.Requester; i != nil { inputs["requester"] = i.ToVpcPeeringConnectionRequesterOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type VpcPeeringConnectionState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringInput `pulumi:"acceptStatus"`
	// An optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter VpcPeeringConnectionAccepterResourceInput `pulumi:"accepter"`
	// Accept the peering (both VPCs need to be in the same AWS account).
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the [AWS provider][1] is currently connected to.
	PeerOwnerId pulumi.StringInput `pulumi:"peerOwnerId"`
	// The region of the accepter VPC of the [VPC Peering Connection]. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumi.StringInput `pulumi:"peerRegion"`
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumi.StringInput `pulumi:"peerVpcId"`
	// A optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester VpcPeeringConnectionRequesterInput `pulumi:"requester"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the requester VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter VpcPeeringConnectionAccepterResourceInput `pulumi:"accepter"`
	// Accept the peering (both VPCs need to be in the same AWS account).
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the peer VPC.
	// Defaults to the account ID the [AWS provider][1] is currently connected to.
	PeerOwnerId pulumi.StringInput `pulumi:"peerOwnerId"`
	// The region of the accepter VPC of the [VPC Peering Connection]. `autoAccept` must be `false`,
	// and use the `ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
	PeerRegion pulumi.StringInput `pulumi:"peerRegion"`
	// The ID of the VPC with which you are creating the VPC Peering Connection.
	PeerVpcId pulumi.StringInput `pulumi:"peerVpcId"`
	// A optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester VpcPeeringConnectionRequesterInput `pulumi:"requester"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the requester VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}
type VpcPeeringConnectionAccepterResource struct {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	AllowClassicLinkToRemoteVpc *bool `pulumi:"allowClassicLinkToRemoteVpc"`
	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC. This is
	// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
	// inter-region VPC peering.
	AllowRemoteVpcDnsResolution *bool `pulumi:"allowRemoteVpcDnsResolution"`
	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	AllowVpcToRemoteClassicLink *bool `pulumi:"allowVpcToRemoteClassicLink"`
}
var vpcPeeringConnectionAccepterResourceType = reflect.TypeOf((*VpcPeeringConnectionAccepterResource)(nil)).Elem()

type VpcPeeringConnectionAccepterResourceInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterResourceOutput() VpcPeeringConnectionAccepterResourceOutput
	ToVpcPeeringConnectionAccepterResourceOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterResourceOutput
}

type VpcPeeringConnectionAccepterResourceArgs struct {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	AllowClassicLinkToRemoteVpc pulumi.BoolInput `pulumi:"allowClassicLinkToRemoteVpc"`
	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC. This is
	// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
	// inter-region VPC peering.
	AllowRemoteVpcDnsResolution pulumi.BoolInput `pulumi:"allowRemoteVpcDnsResolution"`
	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	AllowVpcToRemoteClassicLink pulumi.BoolInput `pulumi:"allowVpcToRemoteClassicLink"`
}

func (VpcPeeringConnectionAccepterResourceArgs) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterResourceType
}

func (a VpcPeeringConnectionAccepterResourceArgs) ToVpcPeeringConnectionAccepterResourceOutput() VpcPeeringConnectionAccepterResourceOutput {
	return pulumi.ToOutput(a).(VpcPeeringConnectionAccepterResourceOutput)
}

func (a VpcPeeringConnectionAccepterResourceArgs) ToVpcPeeringConnectionAccepterResourceOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterResourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcPeeringConnectionAccepterResourceOutput)
}

type VpcPeeringConnectionAccepterResourceOutput struct { *pulumi.OutputState }

// Allow a local linked EC2-Classic instance to communicate
// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
// to the remote VPC.
func (o VpcPeeringConnectionAccepterResourceOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterResource) bool {
		if v.AllowClassicLinkToRemoteVpc == nil { return *new(bool) } else { return *v.AllowClassicLinkToRemoteVpc }
	}).(pulumi.BoolOutput)
}

// Allow a local VPC to resolve public DNS hostnames to
// private IP addresses when queried from instances in the peer VPC. This is
// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
// inter-region VPC peering.
func (o VpcPeeringConnectionAccepterResourceOutput) AllowRemoteVpcDnsResolution() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterResource) bool {
		if v.AllowRemoteVpcDnsResolution == nil { return *new(bool) } else { return *v.AllowRemoteVpcDnsResolution }
	}).(pulumi.BoolOutput)
}

// Allow a local VPC to communicate with a linked EC2-Classic
// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
// connection.
func (o VpcPeeringConnectionAccepterResourceOutput) AllowVpcToRemoteClassicLink() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionAccepterResource) bool {
		if v.AllowVpcToRemoteClassicLink == nil { return *new(bool) } else { return *v.AllowVpcToRemoteClassicLink }
	}).(pulumi.BoolOutput)
}

func (VpcPeeringConnectionAccepterResourceOutput) ElementType() reflect.Type {
	return vpcPeeringConnectionAccepterResourceType
}

func (o VpcPeeringConnectionAccepterResourceOutput) ToVpcPeeringConnectionAccepterResourceOutput() VpcPeeringConnectionAccepterResourceOutput {
	return o
}

func (o VpcPeeringConnectionAccepterResourceOutput) ToVpcPeeringConnectionAccepterResourceOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterResourceOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcPeeringConnectionAccepterResourceOutput{}) }

type VpcPeeringConnectionRequester struct {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	AllowClassicLinkToRemoteVpc *bool `pulumi:"allowClassicLinkToRemoteVpc"`
	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC. This is
	// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
	// inter-region VPC peering.
	AllowRemoteVpcDnsResolution *bool `pulumi:"allowRemoteVpcDnsResolution"`
	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	AllowVpcToRemoteClassicLink *bool `pulumi:"allowVpcToRemoteClassicLink"`
}
var vpcPeeringConnectionRequesterType = reflect.TypeOf((*VpcPeeringConnectionRequester)(nil)).Elem()

type VpcPeeringConnectionRequesterInput interface {
	pulumi.Input

	ToVpcPeeringConnectionRequesterOutput() VpcPeeringConnectionRequesterOutput
	ToVpcPeeringConnectionRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionRequesterOutput
}

type VpcPeeringConnectionRequesterArgs struct {
	// Allow a local linked EC2-Classic instance to communicate
	// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
	// to the remote VPC.
	AllowClassicLinkToRemoteVpc pulumi.BoolInput `pulumi:"allowClassicLinkToRemoteVpc"`
	// Allow a local VPC to resolve public DNS hostnames to
	// private IP addresses when queried from instances in the peer VPC. This is
	// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
	// inter-region VPC peering.
	AllowRemoteVpcDnsResolution pulumi.BoolInput `pulumi:"allowRemoteVpcDnsResolution"`
	// Allow a local VPC to communicate with a linked EC2-Classic
	// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
	// connection.
	AllowVpcToRemoteClassicLink pulumi.BoolInput `pulumi:"allowVpcToRemoteClassicLink"`
}

func (VpcPeeringConnectionRequesterArgs) ElementType() reflect.Type {
	return vpcPeeringConnectionRequesterType
}

func (a VpcPeeringConnectionRequesterArgs) ToVpcPeeringConnectionRequesterOutput() VpcPeeringConnectionRequesterOutput {
	return pulumi.ToOutput(a).(VpcPeeringConnectionRequesterOutput)
}

func (a VpcPeeringConnectionRequesterArgs) ToVpcPeeringConnectionRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionRequesterOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcPeeringConnectionRequesterOutput)
}

type VpcPeeringConnectionRequesterOutput struct { *pulumi.OutputState }

// Allow a local linked EC2-Classic instance to communicate
// with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
// to the remote VPC.
func (o VpcPeeringConnectionRequesterOutput) AllowClassicLinkToRemoteVpc() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionRequester) bool {
		if v.AllowClassicLinkToRemoteVpc == nil { return *new(bool) } else { return *v.AllowClassicLinkToRemoteVpc }
	}).(pulumi.BoolOutput)
}

// Allow a local VPC to resolve public DNS hostnames to
// private IP addresses when queried from instances in the peer VPC. This is
// [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
// inter-region VPC peering.
func (o VpcPeeringConnectionRequesterOutput) AllowRemoteVpcDnsResolution() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionRequester) bool {
		if v.AllowRemoteVpcDnsResolution == nil { return *new(bool) } else { return *v.AllowRemoteVpcDnsResolution }
	}).(pulumi.BoolOutput)
}

// Allow a local VPC to communicate with a linked EC2-Classic
// instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
// connection.
func (o VpcPeeringConnectionRequesterOutput) AllowVpcToRemoteClassicLink() pulumi.BoolOutput {
	return o.Apply(func(v VpcPeeringConnectionRequester) bool {
		if v.AllowVpcToRemoteClassicLink == nil { return *new(bool) } else { return *v.AllowVpcToRemoteClassicLink }
	}).(pulumi.BoolOutput)
}

func (VpcPeeringConnectionRequesterOutput) ElementType() reflect.Type {
	return vpcPeeringConnectionRequesterType
}

func (o VpcPeeringConnectionRequesterOutput) ToVpcPeeringConnectionRequesterOutput() VpcPeeringConnectionRequesterOutput {
	return o
}

func (o VpcPeeringConnectionRequesterOutput) ToVpcPeeringConnectionRequesterOutputWithContext(ctx context.Context) VpcPeeringConnectionRequesterOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcPeeringConnectionRequesterOutput{}) }

