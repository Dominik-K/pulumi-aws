// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VPC Endpoint resource.
// 
// > **NOTE on VPC Endpoints and VPC Endpoint Associations:** This provider provides both standalone VPC Endpoint Associations for
// Route Tables - (an association between a VPC endpoint and a single `routeTableId`) and
// Subnets - (an association between a VPC endpoint and a single `subnetId`) and
// a VPC Endpoint resource with `routeTableIds` and `subnetIds` attributes.
// Do not use the same resource ID in both a VPC Endpoint resource and a VPC Endpoint Association resource.
// Doing so will cause a conflict of associations and will overwrite the association.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_endpoint.html.markdown.
type VpcEndpoint struct {
	pulumi.CustomResourceState

	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumi.BoolOutput `pulumi:"autoAccept"`

	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks pulumi.StringArrayOutput `pulumi:"cidrBlocks"`

	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
	DnsEntries VpcEndpointDnsEntriesArrayOutput `pulumi:"dnsEntries"`

	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`

	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	Policy pulumi.StringOutput `pulumi:"policy"`

	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId pulumi.StringOutput `pulumi:"prefixListId"`

	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumi.BoolOutput `pulumi:"privateDnsEnabled"`

	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged pulumi.BoolOutput `pulumi:"requesterManaged"`

	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumi.StringArrayOutput `pulumi:"routeTableIds"`

	// The ID of one or more security groups to associate with the network interface. Required for endpoints of type `Interface`.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`

	// The service name, in the form `com.amazonaws.region.service` for AWS services.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`

	// The state of the VPC endpoint.
	State pulumi.StringOutput `pulumi:"state"`

	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `Interface`.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The VPC endpoint type, `Gateway` or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumi.StringOutput `pulumi:"vpcEndpointType"`

	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpoint(ctx *pulumi.Context,
	name string, args *VpcEndpointArgs, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := args.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
		if i := args.PrivateDnsEnabled; i != nil { inputs["privateDnsEnabled"] = i.ToBoolOutput() }
		if i := args.RouteTableIds; i != nil { inputs["routeTableIds"] = i.ToStringArrayOutput() }
		if i := args.SecurityGroupIds; i != nil { inputs["securityGroupIds"] = i.ToStringArrayOutput() }
		if i := args.ServiceName; i != nil { inputs["serviceName"] = i.ToStringOutput() }
		if i := args.SubnetIds; i != nil { inputs["subnetIds"] = i.ToStringArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.VpcEndpointType; i != nil { inputs["vpcEndpointType"] = i.ToStringOutput() }
		if i := args.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource VpcEndpoint
	err := ctx.RegisterResource("aws:ec2/vpcEndpoint:VpcEndpoint", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpoint gets an existing VpcEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointState, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoAccept; i != nil { inputs["autoAccept"] = i.ToBoolOutput() }
		if i := state.CidrBlocks; i != nil { inputs["cidrBlocks"] = i.ToStringArrayOutput() }
		if i := state.DnsEntries; i != nil { inputs["dnsEntries"] = i.ToVpcEndpointDnsEntriesArrayOutput() }
		if i := state.NetworkInterfaceIds; i != nil { inputs["networkInterfaceIds"] = i.ToStringArrayOutput() }
		if i := state.OwnerId; i != nil { inputs["ownerId"] = i.ToStringOutput() }
		if i := state.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
		if i := state.PrefixListId; i != nil { inputs["prefixListId"] = i.ToStringOutput() }
		if i := state.PrivateDnsEnabled; i != nil { inputs["privateDnsEnabled"] = i.ToBoolOutput() }
		if i := state.RequesterManaged; i != nil { inputs["requesterManaged"] = i.ToBoolOutput() }
		if i := state.RouteTableIds; i != nil { inputs["routeTableIds"] = i.ToStringArrayOutput() }
		if i := state.SecurityGroupIds; i != nil { inputs["securityGroupIds"] = i.ToStringArrayOutput() }
		if i := state.ServiceName; i != nil { inputs["serviceName"] = i.ToStringOutput() }
		if i := state.State; i != nil { inputs["state"] = i.ToStringOutput() }
		if i := state.SubnetIds; i != nil { inputs["subnetIds"] = i.ToStringArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcEndpointType; i != nil { inputs["vpcEndpointType"] = i.ToStringOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource VpcEndpoint
	err := ctx.ReadResource("aws:ec2/vpcEndpoint:VpcEndpoint", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpoint resources.
type VpcEndpointState struct {
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks pulumi.StringArrayInput `pulumi:"cidrBlocks"`
	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
	DnsEntries VpcEndpointDnsEntriesArrayInput `pulumi:"dnsEntries"`
	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds pulumi.StringArrayInput `pulumi:"networkInterfaceIds"`
	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	Policy pulumi.StringInput `pulumi:"policy"`
	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId pulumi.StringInput `pulumi:"prefixListId"`
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumi.BoolInput `pulumi:"privateDnsEnabled"`
	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged pulumi.BoolInput `pulumi:"requesterManaged"`
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumi.StringArrayInput `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the network interface. Required for endpoints of type `Interface`.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The service name, in the form `com.amazonaws.region.service` for AWS services.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The state of the VPC endpoint.
	State pulumi.StringInput `pulumi:"state"`
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `Interface`.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VPC endpoint type, `Gateway` or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumi.StringInput `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcEndpoint resource.
type VpcEndpointArgs struct {
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumi.BoolInput `pulumi:"autoAccept"`
	Policy pulumi.StringInput `pulumi:"policy"`
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumi.BoolInput `pulumi:"privateDnsEnabled"`
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumi.StringArrayInput `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the network interface. Required for endpoints of type `Interface`.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The service name, in the form `com.amazonaws.region.service` for AWS services.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `Interface`.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VPC endpoint type, `Gateway` or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumi.StringInput `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}
type VpcEndpointDnsEntries struct {
	// The DNS name.
	DnsName string `pulumi:"dnsName"`
	// The ID of the private hosted zone.
	HostedZoneId string `pulumi:"hostedZoneId"`
}
var vpcEndpointDnsEntriesType = reflect.TypeOf((*VpcEndpointDnsEntries)(nil)).Elem()

type VpcEndpointDnsEntriesInput interface {
	pulumi.Input

	ToVpcEndpointDnsEntriesOutput() VpcEndpointDnsEntriesOutput
	ToVpcEndpointDnsEntriesOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesOutput
}

type VpcEndpointDnsEntriesArgs struct {
	// The DNS name.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// The ID of the private hosted zone.
	HostedZoneId pulumi.StringInput `pulumi:"hostedZoneId"`
}

func (VpcEndpointDnsEntriesArgs) ElementType() reflect.Type {
	return vpcEndpointDnsEntriesType
}

func (a VpcEndpointDnsEntriesArgs) ToVpcEndpointDnsEntriesOutput() VpcEndpointDnsEntriesOutput {
	return pulumi.ToOutput(a).(VpcEndpointDnsEntriesOutput)
}

func (a VpcEndpointDnsEntriesArgs) ToVpcEndpointDnsEntriesOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcEndpointDnsEntriesOutput)
}

type VpcEndpointDnsEntriesOutput struct { *pulumi.OutputState }

// The DNS name.
func (o VpcEndpointDnsEntriesOutput) DnsName() pulumi.StringOutput {
	return o.Apply(func(v VpcEndpointDnsEntries) string {
		return v.DnsName
	}).(pulumi.StringOutput)
}

// The ID of the private hosted zone.
func (o VpcEndpointDnsEntriesOutput) HostedZoneId() pulumi.StringOutput {
	return o.Apply(func(v VpcEndpointDnsEntries) string {
		return v.HostedZoneId
	}).(pulumi.StringOutput)
}

func (VpcEndpointDnsEntriesOutput) ElementType() reflect.Type {
	return vpcEndpointDnsEntriesType
}

func (o VpcEndpointDnsEntriesOutput) ToVpcEndpointDnsEntriesOutput() VpcEndpointDnsEntriesOutput {
	return o
}

func (o VpcEndpointDnsEntriesOutput) ToVpcEndpointDnsEntriesOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcEndpointDnsEntriesOutput{}) }

var vpcEndpointDnsEntriesArrayType = reflect.TypeOf((*[]VpcEndpointDnsEntries)(nil)).Elem()

type VpcEndpointDnsEntriesArrayInput interface {
	pulumi.Input

	ToVpcEndpointDnsEntriesArrayOutput() VpcEndpointDnsEntriesArrayOutput
	ToVpcEndpointDnsEntriesArrayOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesArrayOutput
}

type VpcEndpointDnsEntriesArrayArgs []VpcEndpointDnsEntriesInput

func (VpcEndpointDnsEntriesArrayArgs) ElementType() reflect.Type {
	return vpcEndpointDnsEntriesArrayType
}

func (a VpcEndpointDnsEntriesArrayArgs) ToVpcEndpointDnsEntriesArrayOutput() VpcEndpointDnsEntriesArrayOutput {
	return pulumi.ToOutput(a).(VpcEndpointDnsEntriesArrayOutput)
}

func (a VpcEndpointDnsEntriesArrayArgs) ToVpcEndpointDnsEntriesArrayOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VpcEndpointDnsEntriesArrayOutput)
}

type VpcEndpointDnsEntriesArrayOutput struct { *pulumi.OutputState }

func (o VpcEndpointDnsEntriesArrayOutput) Index(i pulumi.IntInput) VpcEndpointDnsEntriesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VpcEndpointDnsEntries {
		return vs[0].([]VpcEndpointDnsEntries)[vs[1].(int)]
	}).(VpcEndpointDnsEntriesOutput)
}

func (VpcEndpointDnsEntriesArrayOutput) ElementType() reflect.Type {
	return vpcEndpointDnsEntriesArrayType
}

func (o VpcEndpointDnsEntriesArrayOutput) ToVpcEndpointDnsEntriesArrayOutput() VpcEndpointDnsEntriesArrayOutput {
	return o
}

func (o VpcEndpointDnsEntriesArrayOutput) ToVpcEndpointDnsEntriesArrayOutputWithContext(ctx context.Context) VpcEndpointDnsEntriesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VpcEndpointDnsEntriesArrayOutput{}) }

