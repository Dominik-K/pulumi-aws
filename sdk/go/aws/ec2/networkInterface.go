// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic network interface (ENI) resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/network_interface.html.markdown.
type NetworkInterface struct {
	pulumi.CustomResourceState

	// Block to define the attachment of the ENI. Documented below.
	Attachments NetworkInterfaceAttachmentsArrayOutput `pulumi:"attachments"`

	// A description for the network interface.
	Description pulumi.StringOutput `pulumi:"description"`

	PrivateDnsName pulumi.StringOutput `pulumi:"privateDnsName"`

	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`

	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`

	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntOutput `pulumi:"privateIpsCount"`

	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`

	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolOutput `pulumi:"sourceDestCheck"`

	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Attachments; i != nil { inputs["attachments"] = i.ToNetworkInterfaceAttachmentsArrayOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.PrivateIp; i != nil { inputs["privateIp"] = i.ToStringOutput() }
		if i := args.PrivateIps; i != nil { inputs["privateIps"] = i.ToStringArrayOutput() }
		if i := args.PrivateIpsCount; i != nil { inputs["privateIpsCount"] = i.ToIntOutput() }
		if i := args.SecurityGroups; i != nil { inputs["securityGroups"] = i.ToStringArrayOutput() }
		if i := args.SourceDestCheck; i != nil { inputs["sourceDestCheck"] = i.ToBoolOutput() }
		if i := args.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource NetworkInterface
	err := ctx.RegisterResource("aws:ec2/networkInterface:NetworkInterface", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceState, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Attachments; i != nil { inputs["attachments"] = i.ToNetworkInterfaceAttachmentsArrayOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.PrivateDnsName; i != nil { inputs["privateDnsName"] = i.ToStringOutput() }
		if i := state.PrivateIp; i != nil { inputs["privateIp"] = i.ToStringOutput() }
		if i := state.PrivateIps; i != nil { inputs["privateIps"] = i.ToStringArrayOutput() }
		if i := state.PrivateIpsCount; i != nil { inputs["privateIpsCount"] = i.ToIntOutput() }
		if i := state.SecurityGroups; i != nil { inputs["securityGroups"] = i.ToStringArrayOutput() }
		if i := state.SourceDestCheck; i != nil { inputs["sourceDestCheck"] = i.ToBoolOutput() }
		if i := state.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource NetworkInterface
	err := ctx.ReadResource("aws:ec2/networkInterface:NetworkInterface", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterface resources.
type NetworkInterfaceState struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments NetworkInterfaceAttachmentsArrayInput `pulumi:"attachments"`
	// A description for the network interface.
	Description pulumi.StringInput `pulumi:"description"`
	PrivateDnsName pulumi.StringInput `pulumi:"privateDnsName"`
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.StringArrayInput `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntInput `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolInput `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments NetworkInterfaceAttachmentsArrayInput `pulumi:"attachments"`
	// A description for the network interface.
	Description pulumi.StringInput `pulumi:"description"`
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.StringArrayInput `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntInput `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolInput `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type NetworkInterfaceAttachments struct {
	AttachmentId *string `pulumi:"attachmentId"`
	DeviceIndex int `pulumi:"deviceIndex"`
	Instance string `pulumi:"instance"`
}
var networkInterfaceAttachmentsType = reflect.TypeOf((*NetworkInterfaceAttachments)(nil)).Elem()

type NetworkInterfaceAttachmentsInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentsOutput() NetworkInterfaceAttachmentsOutput
	ToNetworkInterfaceAttachmentsOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsOutput
}

type NetworkInterfaceAttachmentsArgs struct {
	AttachmentId pulumi.StringInput `pulumi:"attachmentId"`
	DeviceIndex pulumi.IntInput `pulumi:"deviceIndex"`
	Instance pulumi.StringInput `pulumi:"instance"`
}

func (NetworkInterfaceAttachmentsArgs) ElementType() reflect.Type {
	return networkInterfaceAttachmentsType
}

func (a NetworkInterfaceAttachmentsArgs) ToNetworkInterfaceAttachmentsOutput() NetworkInterfaceAttachmentsOutput {
	return pulumi.ToOutput(a).(NetworkInterfaceAttachmentsOutput)
}

func (a NetworkInterfaceAttachmentsArgs) ToNetworkInterfaceAttachmentsOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkInterfaceAttachmentsOutput)
}

type NetworkInterfaceAttachmentsOutput struct { *pulumi.OutputState }

func (o NetworkInterfaceAttachmentsOutput) AttachmentId() pulumi.StringOutput {
	return o.Apply(func(v NetworkInterfaceAttachments) string {
		if v.AttachmentId == nil { return *new(string) } else { return *v.AttachmentId }
	}).(pulumi.StringOutput)
}

func (o NetworkInterfaceAttachmentsOutput) DeviceIndex() pulumi.IntOutput {
	return o.Apply(func(v NetworkInterfaceAttachments) int {
		return v.DeviceIndex
	}).(pulumi.IntOutput)
}

func (o NetworkInterfaceAttachmentsOutput) Instance() pulumi.StringOutput {
	return o.Apply(func(v NetworkInterfaceAttachments) string {
		return v.Instance
	}).(pulumi.StringOutput)
}

func (NetworkInterfaceAttachmentsOutput) ElementType() reflect.Type {
	return networkInterfaceAttachmentsType
}

func (o NetworkInterfaceAttachmentsOutput) ToNetworkInterfaceAttachmentsOutput() NetworkInterfaceAttachmentsOutput {
	return o
}

func (o NetworkInterfaceAttachmentsOutput) ToNetworkInterfaceAttachmentsOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NetworkInterfaceAttachmentsOutput{}) }

var networkInterfaceAttachmentsArrayType = reflect.TypeOf((*[]NetworkInterfaceAttachments)(nil)).Elem()

type NetworkInterfaceAttachmentsArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentsArrayOutput() NetworkInterfaceAttachmentsArrayOutput
	ToNetworkInterfaceAttachmentsArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsArrayOutput
}

type NetworkInterfaceAttachmentsArrayArgs []NetworkInterfaceAttachmentsInput

func (NetworkInterfaceAttachmentsArrayArgs) ElementType() reflect.Type {
	return networkInterfaceAttachmentsArrayType
}

func (a NetworkInterfaceAttachmentsArrayArgs) ToNetworkInterfaceAttachmentsArrayOutput() NetworkInterfaceAttachmentsArrayOutput {
	return pulumi.ToOutput(a).(NetworkInterfaceAttachmentsArrayOutput)
}

func (a NetworkInterfaceAttachmentsArrayArgs) ToNetworkInterfaceAttachmentsArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkInterfaceAttachmentsArrayOutput)
}

type NetworkInterfaceAttachmentsArrayOutput struct { *pulumi.OutputState }

func (o NetworkInterfaceAttachmentsArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceAttachmentsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NetworkInterfaceAttachments {
		return vs[0].([]NetworkInterfaceAttachments)[vs[1].(int)]
	}).(NetworkInterfaceAttachmentsOutput)
}

func (NetworkInterfaceAttachmentsArrayOutput) ElementType() reflect.Type {
	return networkInterfaceAttachmentsArrayType
}

func (o NetworkInterfaceAttachmentsArrayOutput) ToNetworkInterfaceAttachmentsArrayOutput() NetworkInterfaceAttachmentsArrayOutput {
	return o
}

func (o NetworkInterfaceAttachmentsArrayOutput) ToNetworkInterfaceAttachmentsArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NetworkInterfaceAttachmentsArrayOutput{}) }

