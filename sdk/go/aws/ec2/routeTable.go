// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a VPC routing table.
// 
// > **NOTE on Route Tables and Routes:** This provider currently
// provides both a standalone Route resource and a Route Table resource with routes
// defined in-line. At this time you cannot use a Route Table with in-line routes
// in conjunction with any Route resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
// 
// > **NOTE on `gatewayId` and `natGatewayId`:** The AWS API is very forgiving with these two
// attributes and the `ec2.RouteTable` resource can be created with a NAT ID specified as a Gateway ID attribute.
// This _will_ lead to a permanent diff between your configuration and statefile, as the API returns the correct
// parameters in the returned route table. If you're experiencing constant diffs in your `ec2.RouteTable` resources,
// the first thing to check is whether or not you're specifying a NAT ID instead of a Gateway ID, or vice-versa.
// 
// > **NOTE on `propagatingVgws` and the `ec2.VpnGatewayRoutePropagation` resource:**
// If the `propagatingVgws` argument is present, it's not supported to _also_
// define route propagations using `ec2.VpnGatewayRoutePropagation`, since
// this resource will delete any propagating gateways not explicitly listed in
// `propagatingVgws`. Omit this argument when defining route propagation using
// the separate resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route_table.html.markdown.
type RouteTable struct {
	pulumi.CustomResourceState

	// The ID of the AWS account that owns the route table.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayOutput `pulumi:"propagatingVgws"`

	// A list of route objects. Their keys are documented below. This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes RouteTableRoutesArrayOutput `pulumi:"routes"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.PropagatingVgws; i != nil { inputs["propagatingVgws"] = i.ToStringArrayOutput() }
		if i := args.Routes; i != nil { inputs["routes"] = i.ToRouteTableRoutesArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource RouteTable
	err := ctx.RegisterResource("aws:ec2/routeTable:RouteTable", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.OwnerId; i != nil { inputs["ownerId"] = i.ToStringOutput() }
		if i := state.PropagatingVgws; i != nil { inputs["propagatingVgws"] = i.ToStringArrayOutput() }
		if i := state.Routes; i != nil { inputs["routes"] = i.ToRouteTableRoutesArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource RouteTable
	err := ctx.ReadResource("aws:ec2/routeTable:RouteTable", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type RouteTableState struct {
	// The ID of the AWS account that owns the route table.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayInput `pulumi:"propagatingVgws"`
	// A list of route objects. Their keys are documented below. This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes RouteTableRoutesArrayInput `pulumi:"routes"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VPC ID.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// A list of virtual gateways for propagation.
	PropagatingVgws pulumi.StringArrayInput `pulumi:"propagatingVgws"`
	// A list of route objects. Their keys are documented below. This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	Routes RouteTableRoutesArrayInput `pulumi:"routes"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VPC ID.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}
type RouteTableRoutes struct {
	// The CIDR block of the route.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId *string `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId *string `pulumi:"instanceId"`
	// The Ipv6 CIDR block of the route.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}
var routeTableRoutesType = reflect.TypeOf((*RouteTableRoutes)(nil)).Elem()

type RouteTableRoutesInput interface {
	pulumi.Input

	ToRouteTableRoutesOutput() RouteTableRoutesOutput
	ToRouteTableRoutesOutputWithContext(ctx context.Context) RouteTableRoutesOutput
}

type RouteTableRoutesArgs struct {
	// The CIDR block of the route.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumi.StringInput `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The Ipv6 CIDR block of the route.
	Ipv6CidrBlock pulumi.StringInput `pulumi:"ipv6CidrBlock"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumi.StringInput `pulumi:"transitGatewayId"`
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringInput `pulumi:"vpcPeeringConnectionId"`
}

func (RouteTableRoutesArgs) ElementType() reflect.Type {
	return routeTableRoutesType
}

func (a RouteTableRoutesArgs) ToRouteTableRoutesOutput() RouteTableRoutesOutput {
	return pulumi.ToOutput(a).(RouteTableRoutesOutput)
}

func (a RouteTableRoutesArgs) ToRouteTableRoutesOutputWithContext(ctx context.Context) RouteTableRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RouteTableRoutesOutput)
}

type RouteTableRoutesOutput struct { *pulumi.OutputState }

// The CIDR block of the route.
func (o RouteTableRoutesOutput) CidrBlock() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.CidrBlock == nil { return *new(string) } else { return *v.CidrBlock }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC Egress Only Internet Gateway.
func (o RouteTableRoutesOutput) EgressOnlyGatewayId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.EgressOnlyGatewayId == nil { return *new(string) } else { return *v.EgressOnlyGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC internet gateway or a virtual private gateway.
func (o RouteTableRoutesOutput) GatewayId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.GatewayId == nil { return *new(string) } else { return *v.GatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 instance.
func (o RouteTableRoutesOutput) InstanceId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.InstanceId == nil { return *new(string) } else { return *v.InstanceId }
	}).(pulumi.StringOutput)
}

// The Ipv6 CIDR block of the route.
func (o RouteTableRoutesOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.Ipv6CidrBlock == nil { return *new(string) } else { return *v.Ipv6CidrBlock }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC NAT gateway.
func (o RouteTableRoutesOutput) NatGatewayId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.NatGatewayId == nil { return *new(string) } else { return *v.NatGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 network interface.
func (o RouteTableRoutesOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.NetworkInterfaceId == nil { return *new(string) } else { return *v.NetworkInterfaceId }
	}).(pulumi.StringOutput)
}

// Identifier of an EC2 Transit Gateway.
func (o RouteTableRoutesOutput) TransitGatewayId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.TransitGatewayId == nil { return *new(string) } else { return *v.TransitGatewayId }
	}).(pulumi.StringOutput)
}

// Identifier of a VPC peering connection.
func (o RouteTableRoutesOutput) VpcPeeringConnectionId() pulumi.StringOutput {
	return o.Apply(func(v RouteTableRoutes) string {
		if v.VpcPeeringConnectionId == nil { return *new(string) } else { return *v.VpcPeeringConnectionId }
	}).(pulumi.StringOutput)
}

func (RouteTableRoutesOutput) ElementType() reflect.Type {
	return routeTableRoutesType
}

func (o RouteTableRoutesOutput) ToRouteTableRoutesOutput() RouteTableRoutesOutput {
	return o
}

func (o RouteTableRoutesOutput) ToRouteTableRoutesOutputWithContext(ctx context.Context) RouteTableRoutesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RouteTableRoutesOutput{}) }

var routeTableRoutesArrayType = reflect.TypeOf((*[]RouteTableRoutes)(nil)).Elem()

type RouteTableRoutesArrayInput interface {
	pulumi.Input

	ToRouteTableRoutesArrayOutput() RouteTableRoutesArrayOutput
	ToRouteTableRoutesArrayOutputWithContext(ctx context.Context) RouteTableRoutesArrayOutput
}

type RouteTableRoutesArrayArgs []RouteTableRoutesInput

func (RouteTableRoutesArrayArgs) ElementType() reflect.Type {
	return routeTableRoutesArrayType
}

func (a RouteTableRoutesArrayArgs) ToRouteTableRoutesArrayOutput() RouteTableRoutesArrayOutput {
	return pulumi.ToOutput(a).(RouteTableRoutesArrayOutput)
}

func (a RouteTableRoutesArrayArgs) ToRouteTableRoutesArrayOutputWithContext(ctx context.Context) RouteTableRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RouteTableRoutesArrayOutput)
}

type RouteTableRoutesArrayOutput struct { *pulumi.OutputState }

func (o RouteTableRoutesArrayOutput) Index(i pulumi.IntInput) RouteTableRoutesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) RouteTableRoutes {
		return vs[0].([]RouteTableRoutes)[vs[1].(int)]
	}).(RouteTableRoutesOutput)
}

func (RouteTableRoutesArrayOutput) ElementType() reflect.Type {
	return routeTableRoutesArrayType
}

func (o RouteTableRoutesArrayOutput) ToRouteTableRoutesArrayOutput() RouteTableRoutesArrayOutput {
	return o
}

func (o RouteTableRoutesArrayOutput) ToRouteTableRoutesArrayOutputWithContext(ctx context.Context) RouteTableRoutesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RouteTableRoutesArrayOutput{}) }

