// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package qldb

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/qldb_ledger.html.markdown.
type Ledger struct {
	pulumi.CustomResourceState

	// The ARN of the QLDB Ledger
	Arn pulumi.StringOutput `pulumi:"arn"`

	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`

	Name pulumi.StringOutput `pulumi:"name"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewLedger registers a new resource with the given unique name, arguments, and options.
func NewLedger(ctx *pulumi.Context,
	name string, args *LedgerArgs, opts ...pulumi.ResourceOption) (*Ledger, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DeletionProtection; i != nil { inputs["deletionProtection"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Ledger
	err := ctx.RegisterResource("aws:qldb/ledger:Ledger", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLedger gets an existing Ledger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLedger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LedgerState, opts ...pulumi.ResourceOption) (*Ledger, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.DeletionProtection; i != nil { inputs["deletionProtection"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Ledger
	err := ctx.ReadResource("aws:qldb/ledger:Ledger", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ledger resources.
type LedgerState struct {
	// The ARN of the QLDB Ledger
	Arn pulumi.StringInput `pulumi:"arn"`
	DeletionProtection pulumi.BoolInput `pulumi:"deletionProtection"`
	Name pulumi.StringInput `pulumi:"name"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Ledger resource.
type LedgerArgs struct {
	DeletionProtection pulumi.BoolInput `pulumi:"deletionProtection"`
	Name pulumi.StringInput `pulumi:"name"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}
