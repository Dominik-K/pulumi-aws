// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a Service Catalog Portfolio.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/servicecatalog_portfolio.html.markdown.
type Portfolio struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`

	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`

	// Description of the portfolio
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the portfolio.
	Name pulumi.StringOutput `pulumi:"name"`

	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`

	// Tags to apply to the connection.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewPortfolio registers a new resource with the given unique name, arguments, and options.
func NewPortfolio(ctx *pulumi.Context,
	name string, args *PortfolioArgs, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ProviderName; i != nil { inputs["providerName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Portfolio
	err := ctx.RegisterResource("aws:servicecatalog/portfolio:Portfolio", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolio gets an existing Portfolio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortfolioState, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CreatedTime; i != nil { inputs["createdTime"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ProviderName; i != nil { inputs["providerName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Portfolio
	err := ctx.ReadResource("aws:servicecatalog/portfolio:Portfolio", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portfolio resources.
type PortfolioState struct {
	Arn pulumi.StringInput `pulumi:"arn"`
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Description of the portfolio
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the portfolio.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Portfolio resource.
type PortfolioArgs struct {
	// Description of the portfolio
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the portfolio.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags pulumi.MapInput `pulumi:"tags"`
}
