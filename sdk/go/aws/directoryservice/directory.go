// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Simple or Managed Microsoft directory in AWS Directory Service.
// 
// > **Note:** All arguments including the password and customer username will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/directory_service_directory.html.markdown.
type Directory struct {
	pulumi.CustomResourceState

	// The access URL for the directory, such as `http://alias.awsapps.com`.
	AccessUrl pulumi.StringOutput `pulumi:"accessUrl"`

	// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enableSso`.
	Alias pulumi.StringOutput `pulumi:"alias"`

	// Connector related information about the directory. Fields documented below.
	ConnectSettings DirectoryConnectSettingsOutput `pulumi:"connectSettings"`

	// A textual description for the directory.
	Description pulumi.StringOutput `pulumi:"description"`

	// A list of IP addresses of the DNS servers for the directory or connector.
	DnsIpAddresses pulumi.StringArrayOutput `pulumi:"dnsIpAddresses"`

	// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
	Edition pulumi.StringOutput `pulumi:"edition"`

	// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
	EnableSso pulumi.BoolOutput `pulumi:"enableSso"`

	// The fully qualified name for the directory, such as `corp.example.com`
	Name pulumi.StringOutput `pulumi:"name"`

	// The password for the directory administrator or connector user.
	Password pulumi.StringOutput `pulumi:"password"`

	// The ID of the security group created by the directory.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`

	// The short name of the directory, such as `CORP`.
	ShortName pulumi.StringOutput `pulumi:"shortName"`

	// The size of the directory (`Small` or `Large` are accepted values).
	Size pulumi.StringOutput `pulumi:"size"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
	Type pulumi.StringOutput `pulumi:"type"`

	// VPC related information about the directory. Fields documented below.
	VpcSettings DirectoryVpcSettingsOutput `pulumi:"vpcSettings"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Alias; i != nil { inputs["alias"] = i.ToStringOutput() }
		if i := args.ConnectSettings; i != nil { inputs["connectSettings"] = i.ToDirectoryConnectSettingsOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Edition; i != nil { inputs["edition"] = i.ToStringOutput() }
		if i := args.EnableSso; i != nil { inputs["enableSso"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.ShortName; i != nil { inputs["shortName"] = i.ToStringOutput() }
		if i := args.Size; i != nil { inputs["size"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := args.VpcSettings; i != nil { inputs["vpcSettings"] = i.ToDirectoryVpcSettingsOutput() }
	}
	var resource Directory
	err := ctx.RegisterResource("aws:directoryservice/directory:Directory", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryState, opts ...pulumi.ResourceOption) (*Directory, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccessUrl; i != nil { inputs["accessUrl"] = i.ToStringOutput() }
		if i := state.Alias; i != nil { inputs["alias"] = i.ToStringOutput() }
		if i := state.ConnectSettings; i != nil { inputs["connectSettings"] = i.ToDirectoryConnectSettingsOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DnsIpAddresses; i != nil { inputs["dnsIpAddresses"] = i.ToStringArrayOutput() }
		if i := state.Edition; i != nil { inputs["edition"] = i.ToStringOutput() }
		if i := state.EnableSso; i != nil { inputs["enableSso"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.SecurityGroupId; i != nil { inputs["securityGroupId"] = i.ToStringOutput() }
		if i := state.ShortName; i != nil { inputs["shortName"] = i.ToStringOutput() }
		if i := state.Size; i != nil { inputs["size"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := state.VpcSettings; i != nil { inputs["vpcSettings"] = i.ToDirectoryVpcSettingsOutput() }
	}
	var resource Directory
	err := ctx.ReadResource("aws:directoryservice/directory:Directory", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Directory resources.
type DirectoryState struct {
	// The access URL for the directory, such as `http://alias.awsapps.com`.
	AccessUrl pulumi.StringInput `pulumi:"accessUrl"`
	// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enableSso`.
	Alias pulumi.StringInput `pulumi:"alias"`
	// Connector related information about the directory. Fields documented below.
	ConnectSettings DirectoryConnectSettingsInput `pulumi:"connectSettings"`
	// A textual description for the directory.
	Description pulumi.StringInput `pulumi:"description"`
	// A list of IP addresses of the DNS servers for the directory or connector.
	DnsIpAddresses pulumi.StringArrayInput `pulumi:"dnsIpAddresses"`
	// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
	Edition pulumi.StringInput `pulumi:"edition"`
	// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
	EnableSso pulumi.BoolInput `pulumi:"enableSso"`
	// The fully qualified name for the directory, such as `corp.example.com`
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the directory administrator or connector user.
	Password pulumi.StringInput `pulumi:"password"`
	// The ID of the security group created by the directory.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The short name of the directory, such as `CORP`.
	ShortName pulumi.StringInput `pulumi:"shortName"`
	// The size of the directory (`Small` or `Large` are accepted values).
	Size pulumi.StringInput `pulumi:"size"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
	Type pulumi.StringInput `pulumi:"type"`
	// VPC related information about the directory. Fields documented below.
	VpcSettings DirectoryVpcSettingsInput `pulumi:"vpcSettings"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enableSso`.
	Alias pulumi.StringInput `pulumi:"alias"`
	// Connector related information about the directory. Fields documented below.
	ConnectSettings DirectoryConnectSettingsInput `pulumi:"connectSettings"`
	// A textual description for the directory.
	Description pulumi.StringInput `pulumi:"description"`
	// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
	Edition pulumi.StringInput `pulumi:"edition"`
	// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
	EnableSso pulumi.BoolInput `pulumi:"enableSso"`
	// The fully qualified name for the directory, such as `corp.example.com`
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the directory administrator or connector user.
	Password pulumi.StringInput `pulumi:"password"`
	// The short name of the directory, such as `CORP`.
	ShortName pulumi.StringInput `pulumi:"shortName"`
	// The size of the directory (`Small` or `Large` are accepted values).
	Size pulumi.StringInput `pulumi:"size"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
	Type pulumi.StringInput `pulumi:"type"`
	// VPC related information about the directory. Fields documented below.
	VpcSettings DirectoryVpcSettingsInput `pulumi:"vpcSettings"`
}
type DirectoryConnectSettings struct {
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps []string `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername string `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}
var directoryConnectSettingsType = reflect.TypeOf((*DirectoryConnectSettings)(nil)).Elem()

type DirectoryConnectSettingsInput interface {
	pulumi.Input

	ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput
	ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput
}

type DirectoryConnectSettingsArgs struct {
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps pulumi.StringArrayInput `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername pulumi.StringInput `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (DirectoryConnectSettingsArgs) ElementType() reflect.Type {
	return directoryConnectSettingsType
}

func (a DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return pulumi.ToOutput(a).(DirectoryConnectSettingsOutput)
}

func (a DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DirectoryConnectSettingsOutput)
}

type DirectoryConnectSettingsOutput struct { *pulumi.OutputState }

// The DNS IP addresses of the domain to connect to.
func (o DirectoryConnectSettingsOutput) CustomerDnsIps() pulumi.StringArrayOutput {
	return o.Apply(func(v DirectoryConnectSettings) []string {
		return v.CustomerDnsIps
	}).(pulumi.StringArrayOutput)
}

// The username corresponding to the password provided.
func (o DirectoryConnectSettingsOutput) CustomerUsername() pulumi.StringOutput {
	return o.Apply(func(v DirectoryConnectSettings) string {
		return v.CustomerUsername
	}).(pulumi.StringOutput)
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryConnectSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.Apply(func(v DirectoryConnectSettings) []string {
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryConnectSettingsOutput) VpcId() pulumi.StringOutput {
	return o.Apply(func(v DirectoryConnectSettings) string {
		return v.VpcId
	}).(pulumi.StringOutput)
}

func (DirectoryConnectSettingsOutput) ElementType() reflect.Type {
	return directoryConnectSettingsType
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return o
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DirectoryConnectSettingsOutput{}) }

type DirectoryVpcSettings struct {
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}
var directoryVpcSettingsType = reflect.TypeOf((*DirectoryVpcSettings)(nil)).Elem()

type DirectoryVpcSettingsInput interface {
	pulumi.Input

	ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput
	ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput
}

type DirectoryVpcSettingsArgs struct {
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (DirectoryVpcSettingsArgs) ElementType() reflect.Type {
	return directoryVpcSettingsType
}

func (a DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return pulumi.ToOutput(a).(DirectoryVpcSettingsOutput)
}

func (a DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DirectoryVpcSettingsOutput)
}

type DirectoryVpcSettingsOutput struct { *pulumi.OutputState }

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryVpcSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.Apply(func(v DirectoryVpcSettings) []string {
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryVpcSettingsOutput) VpcId() pulumi.StringOutput {
	return o.Apply(func(v DirectoryVpcSettings) string {
		return v.VpcId
	}).(pulumi.StringOutput)
}

func (DirectoryVpcSettingsOutput) ElementType() reflect.Type {
	return directoryVpcSettingsType
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return o
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DirectoryVpcSettingsOutput{}) }

