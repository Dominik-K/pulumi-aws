// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito Resource Server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_resource_server.html.markdown.
type ResourceServer struct {
	pulumi.CustomResourceState

	// An identifier for the resource server.
	Identifier pulumi.StringOutput `pulumi:"identifier"`

	// A name for the resource server.
	Name pulumi.StringOutput `pulumi:"name"`

	// A list of Authorization Scope.
	Scopes ResourceServerScopesArrayOutput `pulumi:"scopes"`

	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumi.StringArrayOutput `pulumi:"scopeIdentifiers"`

	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewResourceServer registers a new resource with the given unique name, arguments, and options.
func NewResourceServer(ctx *pulumi.Context,
	name string, args *ResourceServerArgs, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	if args == nil || args.Identifier == nil {
		return nil, errors.New("missing required argument 'Identifier'")
	}
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Identifier; i != nil { inputs["identifier"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Scopes; i != nil { inputs["scopes"] = i.ToResourceServerScopesArrayOutput() }
		if i := args.UserPoolId; i != nil { inputs["userPoolId"] = i.ToStringOutput() }
	}
	var resource ResourceServer
	err := ctx.RegisterResource("aws:cognito/resourceServer:ResourceServer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceServer gets an existing ResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceServerState, opts ...pulumi.ResourceOption) (*ResourceServer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Identifier; i != nil { inputs["identifier"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Scopes; i != nil { inputs["scopes"] = i.ToResourceServerScopesArrayOutput() }
		if i := state.ScopeIdentifiers; i != nil { inputs["scopeIdentifiers"] = i.ToStringArrayOutput() }
		if i := state.UserPoolId; i != nil { inputs["userPoolId"] = i.ToStringOutput() }
	}
	var resource ResourceServer
	err := ctx.ReadResource("aws:cognito/resourceServer:ResourceServer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceServer resources.
type ResourceServerState struct {
	// An identifier for the resource server.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// A name for the resource server.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of Authorization Scope.
	Scopes ResourceServerScopesArrayInput `pulumi:"scopes"`
	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumi.StringArrayInput `pulumi:"scopeIdentifiers"`
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ResourceServer resource.
type ResourceServerArgs struct {
	// An identifier for the resource server.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// A name for the resource server.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of Authorization Scope.
	Scopes ResourceServerScopesArrayInput `pulumi:"scopes"`
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}
type ResourceServerScopes struct {
	// The scope description.
	ScopeDescription string `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName string `pulumi:"scopeName"`
}
var resourceServerScopesType = reflect.TypeOf((*ResourceServerScopes)(nil)).Elem()

type ResourceServerScopesInput interface {
	pulumi.Input

	ToResourceServerScopesOutput() ResourceServerScopesOutput
	ToResourceServerScopesOutputWithContext(ctx context.Context) ResourceServerScopesOutput
}

type ResourceServerScopesArgs struct {
	// The scope description.
	ScopeDescription pulumi.StringInput `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName pulumi.StringInput `pulumi:"scopeName"`
}

func (ResourceServerScopesArgs) ElementType() reflect.Type {
	return resourceServerScopesType
}

func (a ResourceServerScopesArgs) ToResourceServerScopesOutput() ResourceServerScopesOutput {
	return pulumi.ToOutput(a).(ResourceServerScopesOutput)
}

func (a ResourceServerScopesArgs) ToResourceServerScopesOutputWithContext(ctx context.Context) ResourceServerScopesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceServerScopesOutput)
}

type ResourceServerScopesOutput struct { *pulumi.OutputState }

// The scope description.
func (o ResourceServerScopesOutput) ScopeDescription() pulumi.StringOutput {
	return o.Apply(func(v ResourceServerScopes) string {
		return v.ScopeDescription
	}).(pulumi.StringOutput)
}

// The scope name.
func (o ResourceServerScopesOutput) ScopeName() pulumi.StringOutput {
	return o.Apply(func(v ResourceServerScopes) string {
		return v.ScopeName
	}).(pulumi.StringOutput)
}

func (ResourceServerScopesOutput) ElementType() reflect.Type {
	return resourceServerScopesType
}

func (o ResourceServerScopesOutput) ToResourceServerScopesOutput() ResourceServerScopesOutput {
	return o
}

func (o ResourceServerScopesOutput) ToResourceServerScopesOutputWithContext(ctx context.Context) ResourceServerScopesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ResourceServerScopesOutput{}) }

var resourceServerScopesArrayType = reflect.TypeOf((*[]ResourceServerScopes)(nil)).Elem()

type ResourceServerScopesArrayInput interface {
	pulumi.Input

	ToResourceServerScopesArrayOutput() ResourceServerScopesArrayOutput
	ToResourceServerScopesArrayOutputWithContext(ctx context.Context) ResourceServerScopesArrayOutput
}

type ResourceServerScopesArrayArgs []ResourceServerScopesInput

func (ResourceServerScopesArrayArgs) ElementType() reflect.Type {
	return resourceServerScopesArrayType
}

func (a ResourceServerScopesArrayArgs) ToResourceServerScopesArrayOutput() ResourceServerScopesArrayOutput {
	return pulumi.ToOutput(a).(ResourceServerScopesArrayOutput)
}

func (a ResourceServerScopesArrayArgs) ToResourceServerScopesArrayOutputWithContext(ctx context.Context) ResourceServerScopesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ResourceServerScopesArrayOutput)
}

type ResourceServerScopesArrayOutput struct { *pulumi.OutputState }

func (o ResourceServerScopesArrayOutput) Index(i pulumi.IntInput) ResourceServerScopesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ResourceServerScopes {
		return vs[0].([]ResourceServerScopes)[vs[1].(int)]
	}).(ResourceServerScopesOutput)
}

func (ResourceServerScopesArrayOutput) ElementType() reflect.Type {
	return resourceServerScopesArrayType
}

func (o ResourceServerScopesArrayOutput) ToResourceServerScopesArrayOutput() ResourceServerScopesArrayOutput {
	return o
}

func (o ResourceServerScopesArrayOutput) ToResourceServerScopesArrayOutputWithContext(ctx context.Context) ResourceServerScopesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ResourceServerScopesArrayOutput{}) }

