// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito User Group resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_user_group.html.markdown.
type UserGroup struct {
	pulumi.CustomResourceState

	// The description of the user group.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the user group.
	Name pulumi.StringOutput `pulumi:"name"`

	// The precedence of the user group.
	Precedence pulumi.IntOutput `pulumi:"precedence"`

	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`

	// The user pool ID.
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Precedence; i != nil { inputs["precedence"] = i.ToIntOutput() }
		if i := args.RoleArn; i != nil { inputs["roleArn"] = i.ToStringOutput() }
		if i := args.UserPoolId; i != nil { inputs["userPoolId"] = i.ToStringOutput() }
	}
	var resource UserGroup
	err := ctx.RegisterResource("aws:cognito/userGroup:UserGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Precedence; i != nil { inputs["precedence"] = i.ToIntOutput() }
		if i := state.RoleArn; i != nil { inputs["roleArn"] = i.ToStringOutput() }
		if i := state.UserPoolId; i != nil { inputs["userPoolId"] = i.ToStringOutput() }
	}
	var resource UserGroup
	err := ctx.ReadResource("aws:cognito/userGroup:UserGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type UserGroupState struct {
	// The description of the user group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the user group.
	Name pulumi.StringInput `pulumi:"name"`
	// The precedence of the user group.
	Precedence pulumi.IntInput `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The description of the user group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the user group.
	Name pulumi.StringInput `pulumi:"name"`
	// The precedence of the user group.
	Precedence pulumi.IntInput `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}
