// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Cognito Identity Pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_identity_pool.html.markdown.
type IdentityPool struct {
	pulumi.CustomResourceState

	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolOutput `pulumi:"allowUnauthenticatedIdentities"`

	// The ARN of the identity pool.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders IdentityPoolCognitoIdentityProvidersArrayOutput `pulumi:"cognitoIdentityProviders"`

	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringOutput `pulumi:"developerProviderName"`

	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringOutput `pulumi:"identityPoolName"`

	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.StringArrayOutput `pulumi:"openidConnectProviderArns"`

	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.StringArrayOutput `pulumi:"samlProviderArns"`

	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.StringMapOutput `pulumi:"supportedLoginProviders"`

	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	if args == nil || args.IdentityPoolName == nil {
		return nil, errors.New("missing required argument 'IdentityPoolName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AllowUnauthenticatedIdentities; i != nil { inputs["allowUnauthenticatedIdentities"] = i.ToBoolOutput() }
		if i := args.CognitoIdentityProviders; i != nil { inputs["cognitoIdentityProviders"] = i.ToIdentityPoolCognitoIdentityProvidersArrayOutput() }
		if i := args.DeveloperProviderName; i != nil { inputs["developerProviderName"] = i.ToStringOutput() }
		if i := args.IdentityPoolName; i != nil { inputs["identityPoolName"] = i.ToStringOutput() }
		if i := args.OpenidConnectProviderArns; i != nil { inputs["openidConnectProviderArns"] = i.ToStringArrayOutput() }
		if i := args.SamlProviderArns; i != nil { inputs["samlProviderArns"] = i.ToStringArrayOutput() }
		if i := args.SupportedLoginProviders; i != nil { inputs["supportedLoginProviders"] = i.ToStringMapOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource IdentityPool
	err := ctx.RegisterResource("aws:cognito/identityPool:IdentityPool", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolState, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AllowUnauthenticatedIdentities; i != nil { inputs["allowUnauthenticatedIdentities"] = i.ToBoolOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CognitoIdentityProviders; i != nil { inputs["cognitoIdentityProviders"] = i.ToIdentityPoolCognitoIdentityProvidersArrayOutput() }
		if i := state.DeveloperProviderName; i != nil { inputs["developerProviderName"] = i.ToStringOutput() }
		if i := state.IdentityPoolName; i != nil { inputs["identityPoolName"] = i.ToStringOutput() }
		if i := state.OpenidConnectProviderArns; i != nil { inputs["openidConnectProviderArns"] = i.ToStringArrayOutput() }
		if i := state.SamlProviderArns; i != nil { inputs["samlProviderArns"] = i.ToStringArrayOutput() }
		if i := state.SupportedLoginProviders; i != nil { inputs["supportedLoginProviders"] = i.ToStringMapOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource IdentityPool
	err := ctx.ReadResource("aws:cognito/identityPool:IdentityPool", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPool resources.
type IdentityPoolState struct {
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolInput `pulumi:"allowUnauthenticatedIdentities"`
	// The ARN of the identity pool.
	Arn pulumi.StringInput `pulumi:"arn"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders IdentityPoolCognitoIdentityProvidersArrayInput `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringInput `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringInput `pulumi:"identityPoolName"`
	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.StringArrayInput `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.StringArrayInput `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.StringMapInput `pulumi:"supportedLoginProviders"`
	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolInput `pulumi:"allowUnauthenticatedIdentities"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders IdentityPoolCognitoIdentityProvidersArrayInput `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringInput `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringInput `pulumi:"identityPoolName"`
	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.StringArrayInput `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.StringArrayInput `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.StringMapInput `pulumi:"supportedLoginProviders"`
	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type IdentityPoolCognitoIdentityProviders struct {
	// The client ID for the Amazon Cognito Identity User Pool.
	ClientId *string `pulumi:"clientId"`
	// The provider name for an Amazon Cognito Identity User Pool.
	ProviderName *string `pulumi:"providerName"`
	// Whether server-side token validation is enabled for the identity provider’s token or not.
	ServerSideTokenCheck *bool `pulumi:"serverSideTokenCheck"`
}
var identityPoolCognitoIdentityProvidersType = reflect.TypeOf((*IdentityPoolCognitoIdentityProviders)(nil)).Elem()

type IdentityPoolCognitoIdentityProvidersInput interface {
	pulumi.Input

	ToIdentityPoolCognitoIdentityProvidersOutput() IdentityPoolCognitoIdentityProvidersOutput
	ToIdentityPoolCognitoIdentityProvidersOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersOutput
}

type IdentityPoolCognitoIdentityProvidersArgs struct {
	// The client ID for the Amazon Cognito Identity User Pool.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The provider name for an Amazon Cognito Identity User Pool.
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// Whether server-side token validation is enabled for the identity provider’s token or not.
	ServerSideTokenCheck pulumi.BoolInput `pulumi:"serverSideTokenCheck"`
}

func (IdentityPoolCognitoIdentityProvidersArgs) ElementType() reflect.Type {
	return identityPoolCognitoIdentityProvidersType
}

func (a IdentityPoolCognitoIdentityProvidersArgs) ToIdentityPoolCognitoIdentityProvidersOutput() IdentityPoolCognitoIdentityProvidersOutput {
	return pulumi.ToOutput(a).(IdentityPoolCognitoIdentityProvidersOutput)
}

func (a IdentityPoolCognitoIdentityProvidersArgs) ToIdentityPoolCognitoIdentityProvidersOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IdentityPoolCognitoIdentityProvidersOutput)
}

type IdentityPoolCognitoIdentityProvidersOutput struct { *pulumi.OutputState }

// The client ID for the Amazon Cognito Identity User Pool.
func (o IdentityPoolCognitoIdentityProvidersOutput) ClientId() pulumi.StringOutput {
	return o.Apply(func(v IdentityPoolCognitoIdentityProviders) string {
		if v.ClientId == nil { return *new(string) } else { return *v.ClientId }
	}).(pulumi.StringOutput)
}

// The provider name for an Amazon Cognito Identity User Pool.
func (o IdentityPoolCognitoIdentityProvidersOutput) ProviderName() pulumi.StringOutput {
	return o.Apply(func(v IdentityPoolCognitoIdentityProviders) string {
		if v.ProviderName == nil { return *new(string) } else { return *v.ProviderName }
	}).(pulumi.StringOutput)
}

// Whether server-side token validation is enabled for the identity provider’s token or not.
func (o IdentityPoolCognitoIdentityProvidersOutput) ServerSideTokenCheck() pulumi.BoolOutput {
	return o.Apply(func(v IdentityPoolCognitoIdentityProviders) bool {
		if v.ServerSideTokenCheck == nil { return *new(bool) } else { return *v.ServerSideTokenCheck }
	}).(pulumi.BoolOutput)
}

func (IdentityPoolCognitoIdentityProvidersOutput) ElementType() reflect.Type {
	return identityPoolCognitoIdentityProvidersType
}

func (o IdentityPoolCognitoIdentityProvidersOutput) ToIdentityPoolCognitoIdentityProvidersOutput() IdentityPoolCognitoIdentityProvidersOutput {
	return o
}

func (o IdentityPoolCognitoIdentityProvidersOutput) ToIdentityPoolCognitoIdentityProvidersOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(IdentityPoolCognitoIdentityProvidersOutput{}) }

var identityPoolCognitoIdentityProvidersArrayType = reflect.TypeOf((*[]IdentityPoolCognitoIdentityProviders)(nil)).Elem()

type IdentityPoolCognitoIdentityProvidersArrayInput interface {
	pulumi.Input

	ToIdentityPoolCognitoIdentityProvidersArrayOutput() IdentityPoolCognitoIdentityProvidersArrayOutput
	ToIdentityPoolCognitoIdentityProvidersArrayOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersArrayOutput
}

type IdentityPoolCognitoIdentityProvidersArrayArgs []IdentityPoolCognitoIdentityProvidersInput

func (IdentityPoolCognitoIdentityProvidersArrayArgs) ElementType() reflect.Type {
	return identityPoolCognitoIdentityProvidersArrayType
}

func (a IdentityPoolCognitoIdentityProvidersArrayArgs) ToIdentityPoolCognitoIdentityProvidersArrayOutput() IdentityPoolCognitoIdentityProvidersArrayOutput {
	return pulumi.ToOutput(a).(IdentityPoolCognitoIdentityProvidersArrayOutput)
}

func (a IdentityPoolCognitoIdentityProvidersArrayArgs) ToIdentityPoolCognitoIdentityProvidersArrayOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(IdentityPoolCognitoIdentityProvidersArrayOutput)
}

type IdentityPoolCognitoIdentityProvidersArrayOutput struct { *pulumi.OutputState }

func (o IdentityPoolCognitoIdentityProvidersArrayOutput) Index(i pulumi.IntInput) IdentityPoolCognitoIdentityProvidersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) IdentityPoolCognitoIdentityProviders {
		return vs[0].([]IdentityPoolCognitoIdentityProviders)[vs[1].(int)]
	}).(IdentityPoolCognitoIdentityProvidersOutput)
}

func (IdentityPoolCognitoIdentityProvidersArrayOutput) ElementType() reflect.Type {
	return identityPoolCognitoIdentityProvidersArrayType
}

func (o IdentityPoolCognitoIdentityProvidersArrayOutput) ToIdentityPoolCognitoIdentityProvidersArrayOutput() IdentityPoolCognitoIdentityProvidersArrayOutput {
	return o
}

func (o IdentityPoolCognitoIdentityProvidersArrayOutput) ToIdentityPoolCognitoIdentityProvidersArrayOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProvidersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(IdentityPoolCognitoIdentityProvidersArrayOutput{}) }

