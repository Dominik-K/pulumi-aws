// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Neptune Cluster Resource. A Cluster Resource defines attributes that are
// applied to the entire cluster of Neptune Cluster Instances.
// 
// Changes to a Neptune Cluster can occur when you manually change a
// parameter, such as `backupRetentionPeriod`, and are reflected in the next maintenance
// window. Because of this, this provider may report a difference in its planning
// phase because a modification has not yet taken place. You can use the
// `applyImmediately` flag to instruct the service to apply the change immediately
// (see documentation below).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/neptune_cluster.html.markdown.
type Cluster struct {
	pulumi.CustomResourceState

	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolOutput `pulumi:"applyImmediately"`

	// The Neptune Cluster Amazon Resource Name (ARN)
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`

	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumi.IntOutput `pulumi:"backupRetentionPeriod"`

	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumi.StringOutput `pulumi:"clusterIdentifier"`

	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumi.StringOutput `pulumi:"clusterIdentifierPrefix"`

	// List of Neptune Instances that are a part of this cluster
	ClusterMembers pulumi.StringArrayOutput `pulumi:"clusterMembers"`

	// The Neptune Cluster Resource ID
	ClusterResourceId pulumi.StringOutput `pulumi:"clusterResourceId"`

	// The DNS address of the Neptune instance
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`

	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumi.StringOutput `pulumi:"engine"`

	// The database engine version.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`

	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumi.StringOutput `pulumi:"finalSnapshotIdentifier"`

	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumi.StringOutput `pulumi:"hostedZoneId"`

	// Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumi.BoolOutput `pulumi:"iamDatabaseAuthenticationEnabled"`

	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumi.StringArrayOutput `pulumi:"iamRoles"`

	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumi.StringOutput `pulumi:"kmsKeyArn"`

	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumi.StringOutput `pulumi:"neptuneClusterParameterGroupName"`

	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumi.StringOutput `pulumi:"neptuneSubnetGroupName"`

	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumi.IntOutput `pulumi:"port"`

	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00
	PreferredBackupWindow pulumi.StringOutput `pulumi:"preferredBackupWindow"`

	// The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumi.StringOutput `pulumi:"preferredMaintenanceWindow"`

	// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumi.StringOutput `pulumi:"readerEndpoint"`

	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumi.StringOutput `pulumi:"replicationSourceIdentifier"`

	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumi.BoolOutput `pulumi:"skipFinalSnapshot"`

	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot.
	SnapshotIdentifier pulumi.StringOutput `pulumi:"snapshotIdentifier"`

	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumi.BoolOutput `pulumi:"storageEncrypted"`

	// A mapping of tags to assign to the Neptune cluster.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApplyImmediately; i != nil { inputs["applyImmediately"] = i.ToBoolOutput() }
		if i := args.AvailabilityZones; i != nil { inputs["availabilityZones"] = i.ToStringArrayOutput() }
		if i := args.BackupRetentionPeriod; i != nil { inputs["backupRetentionPeriod"] = i.ToIntOutput() }
		if i := args.ClusterIdentifier; i != nil { inputs["clusterIdentifier"] = i.ToStringOutput() }
		if i := args.ClusterIdentifierPrefix; i != nil { inputs["clusterIdentifierPrefix"] = i.ToStringOutput() }
		if i := args.Engine; i != nil { inputs["engine"] = i.ToStringOutput() }
		if i := args.EngineVersion; i != nil { inputs["engineVersion"] = i.ToStringOutput() }
		if i := args.FinalSnapshotIdentifier; i != nil { inputs["finalSnapshotIdentifier"] = i.ToStringOutput() }
		if i := args.IamDatabaseAuthenticationEnabled; i != nil { inputs["iamDatabaseAuthenticationEnabled"] = i.ToBoolOutput() }
		if i := args.IamRoles; i != nil { inputs["iamRoles"] = i.ToStringArrayOutput() }
		if i := args.KmsKeyArn; i != nil { inputs["kmsKeyArn"] = i.ToStringOutput() }
		if i := args.NeptuneClusterParameterGroupName; i != nil { inputs["neptuneClusterParameterGroupName"] = i.ToStringOutput() }
		if i := args.NeptuneSubnetGroupName; i != nil { inputs["neptuneSubnetGroupName"] = i.ToStringOutput() }
		if i := args.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := args.PreferredBackupWindow; i != nil { inputs["preferredBackupWindow"] = i.ToStringOutput() }
		if i := args.PreferredMaintenanceWindow; i != nil { inputs["preferredMaintenanceWindow"] = i.ToStringOutput() }
		if i := args.ReplicationSourceIdentifier; i != nil { inputs["replicationSourceIdentifier"] = i.ToStringOutput() }
		if i := args.SkipFinalSnapshot; i != nil { inputs["skipFinalSnapshot"] = i.ToBoolOutput() }
		if i := args.SnapshotIdentifier; i != nil { inputs["snapshotIdentifier"] = i.ToStringOutput() }
		if i := args.StorageEncrypted; i != nil { inputs["storageEncrypted"] = i.ToBoolOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.VpcSecurityGroupIds; i != nil { inputs["vpcSecurityGroupIds"] = i.ToStringArrayOutput() }
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:neptune/cluster:Cluster", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApplyImmediately; i != nil { inputs["applyImmediately"] = i.ToBoolOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.AvailabilityZones; i != nil { inputs["availabilityZones"] = i.ToStringArrayOutput() }
		if i := state.BackupRetentionPeriod; i != nil { inputs["backupRetentionPeriod"] = i.ToIntOutput() }
		if i := state.ClusterIdentifier; i != nil { inputs["clusterIdentifier"] = i.ToStringOutput() }
		if i := state.ClusterIdentifierPrefix; i != nil { inputs["clusterIdentifierPrefix"] = i.ToStringOutput() }
		if i := state.ClusterMembers; i != nil { inputs["clusterMembers"] = i.ToStringArrayOutput() }
		if i := state.ClusterResourceId; i != nil { inputs["clusterResourceId"] = i.ToStringOutput() }
		if i := state.Endpoint; i != nil { inputs["endpoint"] = i.ToStringOutput() }
		if i := state.Engine; i != nil { inputs["engine"] = i.ToStringOutput() }
		if i := state.EngineVersion; i != nil { inputs["engineVersion"] = i.ToStringOutput() }
		if i := state.FinalSnapshotIdentifier; i != nil { inputs["finalSnapshotIdentifier"] = i.ToStringOutput() }
		if i := state.HostedZoneId; i != nil { inputs["hostedZoneId"] = i.ToStringOutput() }
		if i := state.IamDatabaseAuthenticationEnabled; i != nil { inputs["iamDatabaseAuthenticationEnabled"] = i.ToBoolOutput() }
		if i := state.IamRoles; i != nil { inputs["iamRoles"] = i.ToStringArrayOutput() }
		if i := state.KmsKeyArn; i != nil { inputs["kmsKeyArn"] = i.ToStringOutput() }
		if i := state.NeptuneClusterParameterGroupName; i != nil { inputs["neptuneClusterParameterGroupName"] = i.ToStringOutput() }
		if i := state.NeptuneSubnetGroupName; i != nil { inputs["neptuneSubnetGroupName"] = i.ToStringOutput() }
		if i := state.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := state.PreferredBackupWindow; i != nil { inputs["preferredBackupWindow"] = i.ToStringOutput() }
		if i := state.PreferredMaintenanceWindow; i != nil { inputs["preferredMaintenanceWindow"] = i.ToStringOutput() }
		if i := state.ReaderEndpoint; i != nil { inputs["readerEndpoint"] = i.ToStringOutput() }
		if i := state.ReplicationSourceIdentifier; i != nil { inputs["replicationSourceIdentifier"] = i.ToStringOutput() }
		if i := state.SkipFinalSnapshot; i != nil { inputs["skipFinalSnapshot"] = i.ToBoolOutput() }
		if i := state.SnapshotIdentifier; i != nil { inputs["snapshotIdentifier"] = i.ToStringOutput() }
		if i := state.StorageEncrypted; i != nil { inputs["storageEncrypted"] = i.ToBoolOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VpcSecurityGroupIds; i != nil { inputs["vpcSecurityGroupIds"] = i.ToStringArrayOutput() }
	}
	var resource Cluster
	err := ctx.ReadResource("aws:neptune/cluster:Cluster", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// The Neptune Cluster Amazon Resource Name (ARN)
	Arn pulumi.StringInput `pulumi:"arn"`
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumi.IntInput `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumi.StringInput `pulumi:"clusterIdentifierPrefix"`
	// List of Neptune Instances that are a part of this cluster
	ClusterMembers pulumi.StringArrayInput `pulumi:"clusterMembers"`
	// The Neptune Cluster Resource ID
	ClusterResourceId pulumi.StringInput `pulumi:"clusterResourceId"`
	// The DNS address of the Neptune instance
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumi.StringInput `pulumi:"engine"`
	// The database engine version.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumi.StringInput `pulumi:"finalSnapshotIdentifier"`
	// The Route53 Hosted Zone ID of the endpoint
	HostedZoneId pulumi.StringInput `pulumi:"hostedZoneId"`
	// Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumi.BoolInput `pulumi:"iamDatabaseAuthenticationEnabled"`
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumi.StringArrayInput `pulumi:"iamRoles"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumi.StringInput `pulumi:"neptuneClusterParameterGroupName"`
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumi.StringInput `pulumi:"neptuneSubnetGroupName"`
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumi.IntInput `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00
	PreferredBackupWindow pulumi.StringInput `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumi.StringInput `pulumi:"preferredMaintenanceWindow"`
	// A read-only endpoint for the Neptune cluster, automatically load-balanced across replicas
	ReaderEndpoint pulumi.StringInput `pulumi:"readerEndpoint"`
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumi.StringInput `pulumi:"replicationSourceIdentifier"`
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumi.BoolInput `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot.
	SnapshotIdentifier pulumi.StringInput `pulumi:"snapshotIdentifier"`
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumi.BoolInput `pulumi:"storageEncrypted"`
	// A mapping of tags to assign to the Neptune cluster.
	Tags pulumi.MapInput `pulumi:"tags"`
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumi.StringArrayInput `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// A list of EC2 Availability Zones that instances in the Neptune cluster can be created in.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The days to retain backups for. Default `1`
	BackupRetentionPeriod pulumi.IntInput `pulumi:"backupRetentionPeriod"`
	// The cluster identifier. If omitted, this provider will assign a random, unique identifier.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `clusterIdentifier`.
	ClusterIdentifierPrefix pulumi.StringInput `pulumi:"clusterIdentifierPrefix"`
	// The name of the database engine to be used for this Neptune cluster. Defaults to `neptune`.
	Engine pulumi.StringInput `pulumi:"engine"`
	// The database engine version.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The name of your final Neptune snapshot when this Neptune cluster is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotIdentifier pulumi.StringInput `pulumi:"finalSnapshotIdentifier"`
	// Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled.
	IamDatabaseAuthenticationEnabled pulumi.BoolInput `pulumi:"iamDatabaseAuthenticationEnabled"`
	// A List of ARNs for the IAM roles to associate to the Neptune Cluster.
	IamRoles pulumi.StringArrayInput `pulumi:"iamRoles"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyArn`, `storageEncrypted` needs to be set to true.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// A cluster parameter group to associate with the cluster.
	NeptuneClusterParameterGroupName pulumi.StringInput `pulumi:"neptuneClusterParameterGroupName"`
	// A Neptune subnet group to associate with this Neptune instance.
	NeptuneSubnetGroupName pulumi.StringInput `pulumi:"neptuneSubnetGroupName"`
	// The port on which the Neptune accepts connections. Default is `8182`.
	Port pulumi.IntInput `pulumi:"port"`
	// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00
	PreferredBackupWindow pulumi.StringInput `pulumi:"preferredBackupWindow"`
	// The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30
	PreferredMaintenanceWindow pulumi.StringInput `pulumi:"preferredMaintenanceWindow"`
	// ARN of a source Neptune cluster or Neptune instance if this Neptune cluster is to be created as a Read Replica.
	ReplicationSourceIdentifier pulumi.StringInput `pulumi:"replicationSourceIdentifier"`
	// Determines whether a final Neptune snapshot is created before the Neptune cluster is deleted. If true is specified, no Neptune snapshot is created. If false is specified, a Neptune snapshot is created before the Neptune cluster is deleted, using the value from `finalSnapshotIdentifier`. Default is `false`.
	SkipFinalSnapshot pulumi.BoolInput `pulumi:"skipFinalSnapshot"`
	// Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a Neptune cluster snapshot, or the ARN when specifying a Neptune snapshot.
	SnapshotIdentifier pulumi.StringInput `pulumi:"snapshotIdentifier"`
	// Specifies whether the Neptune cluster is encrypted. The default is `false` if not specified.
	StorageEncrypted pulumi.BoolInput `pulumi:"storageEncrypted"`
	// A mapping of tags to assign to the Neptune cluster.
	Tags pulumi.MapInput `pulumi:"tags"`
	// List of VPC security groups to associate with the Cluster
	VpcSecurityGroupIds pulumi.StringArrayInput `pulumi:"vpcSecurityGroupIds"`
}
