// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## Attributes
// 
// The following additional atttributes are provided:
// 
// * `id` - The name of the Neptune event notification subscription.
// * `arn` - The Amazon Resource Name of the Neptune event notification subscription.
// * `customerAwsId` - The AWS customer account associated with the Neptune event notification subscription.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/neptune_event_subscription.html.markdown.
type EventSubscription struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`

	CustomerAwsId pulumi.StringOutput `pulumi:"customerAwsId"`

	// A boolean flag to enable/disable the subscription. Defaults to true.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// A list of event categories for a `sourceType` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
	EventCategories pulumi.StringArrayOutput `pulumi:"eventCategories"`

	// The name of the Neptune event subscription. By default generated by this provider.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Neptune event subscription. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// The ARN of the SNS topic to send events to.
	SnsTopicArn pulumi.StringOutput `pulumi:"snsTopicArn"`

	// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `sourceType` must also be specified.
	SourceIds pulumi.StringArrayOutput `pulumi:"sourceIds"`

	// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewEventSubscription registers a new resource with the given unique name, arguments, and options.
func NewEventSubscription(ctx *pulumi.Context,
	name string, args *EventSubscriptionArgs, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	if args == nil || args.SnsTopicArn == nil {
		return nil, errors.New("missing required argument 'SnsTopicArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := args.EventCategories; i != nil { inputs["eventCategories"] = i.ToStringArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := args.SnsTopicArn; i != nil { inputs["snsTopicArn"] = i.ToStringOutput() }
		if i := args.SourceIds; i != nil { inputs["sourceIds"] = i.ToStringArrayOutput() }
		if i := args.SourceType; i != nil { inputs["sourceType"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource EventSubscription
	err := ctx.RegisterResource("aws:neptune/eventSubscription:EventSubscription", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSubscription gets an existing EventSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSubscriptionState, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CustomerAwsId; i != nil { inputs["customerAwsId"] = i.ToStringOutput() }
		if i := state.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := state.EventCategories; i != nil { inputs["eventCategories"] = i.ToStringArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := state.SnsTopicArn; i != nil { inputs["snsTopicArn"] = i.ToStringOutput() }
		if i := state.SourceIds; i != nil { inputs["sourceIds"] = i.ToStringArrayOutput() }
		if i := state.SourceType; i != nil { inputs["sourceType"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource EventSubscription
	err := ctx.ReadResource("aws:neptune/eventSubscription:EventSubscription", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSubscription resources.
type EventSubscriptionState struct {
	Arn pulumi.StringInput `pulumi:"arn"`
	CustomerAwsId pulumi.StringInput `pulumi:"customerAwsId"`
	// A boolean flag to enable/disable the subscription. Defaults to true.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A list of event categories for a `sourceType` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
	EventCategories pulumi.StringArrayInput `pulumi:"eventCategories"`
	// The name of the Neptune event subscription. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Neptune event subscription. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The ARN of the SNS topic to send events to.
	SnsTopicArn pulumi.StringInput `pulumi:"snsTopicArn"`
	// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `sourceType` must also be specified.
	SourceIds pulumi.StringArrayInput `pulumi:"sourceIds"`
	// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a EventSubscription resource.
type EventSubscriptionArgs struct {
	// A boolean flag to enable/disable the subscription. Defaults to true.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A list of event categories for a `sourceType` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
	EventCategories pulumi.StringArrayInput `pulumi:"eventCategories"`
	// The name of the Neptune event subscription. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Neptune event subscription. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The ARN of the SNS topic to send events to.
	SnsTopicArn pulumi.StringInput `pulumi:"snsTopicArn"`
	// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `sourceType` must also be specified.
	SourceIds pulumi.StringArrayInput `pulumi:"sourceIds"`
	// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
