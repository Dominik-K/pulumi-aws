// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can be created, updated, deleted, and imported.
// 
// > **Note:** All arguments including the password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dms_endpoint.html.markdown.
type Endpoint struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`

	// The name of the endpoint database.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`

	// The Amazon Resource Name (ARN) for the endpoint.
	EndpointArn pulumi.StringOutput `pulumi:"endpointArn"`

	// The database endpoint identifier.
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`

	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`

	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringOutput `pulumi:"engineName"`

	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringOutput `pulumi:"extraConnectionAttributes"`

	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringOutput `pulumi:"kmsKeyArn"`

	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings EndpointMongodbSettingsOutput `pulumi:"mongodbSettings"`

	// The password to be used to login to the endpoint database.
	Password pulumi.StringOutput `pulumi:"password"`

	// The port used by the endpoint database.
	Port pulumi.IntOutput `pulumi:"port"`

	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings EndpointS3SettingsOutput `pulumi:"s3Settings"`

	// The host name of the server.
	ServerName pulumi.StringOutput `pulumi:"serverName"`

	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringOutput `pulumi:"serviceAccessRole"`

	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringOutput `pulumi:"sslMode"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The user name to be used to login to the endpoint database.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil || args.EndpointId == nil {
		return nil, errors.New("missing required argument 'EndpointId'")
	}
	if args == nil || args.EndpointType == nil {
		return nil, errors.New("missing required argument 'EndpointType'")
	}
	if args == nil || args.EngineName == nil {
		return nil, errors.New("missing required argument 'EngineName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CertificateArn; i != nil { inputs["certificateArn"] = i.ToStringOutput() }
		if i := args.DatabaseName; i != nil { inputs["databaseName"] = i.ToStringOutput() }
		if i := args.EndpointId; i != nil { inputs["endpointId"] = i.ToStringOutput() }
		if i := args.EndpointType; i != nil { inputs["endpointType"] = i.ToStringOutput() }
		if i := args.EngineName; i != nil { inputs["engineName"] = i.ToStringOutput() }
		if i := args.ExtraConnectionAttributes; i != nil { inputs["extraConnectionAttributes"] = i.ToStringOutput() }
		if i := args.KmsKeyArn; i != nil { inputs["kmsKeyArn"] = i.ToStringOutput() }
		if i := args.MongodbSettings; i != nil { inputs["mongodbSettings"] = i.ToEndpointMongodbSettingsOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := args.S3Settings; i != nil { inputs["s3Settings"] = i.ToEndpointS3SettingsOutput() }
		if i := args.ServerName; i != nil { inputs["serverName"] = i.ToStringOutput() }
		if i := args.ServiceAccessRole; i != nil { inputs["serviceAccessRole"] = i.ToStringOutput() }
		if i := args.SslMode; i != nil { inputs["sslMode"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource Endpoint
	err := ctx.RegisterResource("aws:dms/endpoint:Endpoint", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.CertificateArn; i != nil { inputs["certificateArn"] = i.ToStringOutput() }
		if i := state.DatabaseName; i != nil { inputs["databaseName"] = i.ToStringOutput() }
		if i := state.EndpointArn; i != nil { inputs["endpointArn"] = i.ToStringOutput() }
		if i := state.EndpointId; i != nil { inputs["endpointId"] = i.ToStringOutput() }
		if i := state.EndpointType; i != nil { inputs["endpointType"] = i.ToStringOutput() }
		if i := state.EngineName; i != nil { inputs["engineName"] = i.ToStringOutput() }
		if i := state.ExtraConnectionAttributes; i != nil { inputs["extraConnectionAttributes"] = i.ToStringOutput() }
		if i := state.KmsKeyArn; i != nil { inputs["kmsKeyArn"] = i.ToStringOutput() }
		if i := state.MongodbSettings; i != nil { inputs["mongodbSettings"] = i.ToEndpointMongodbSettingsOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := state.S3Settings; i != nil { inputs["s3Settings"] = i.ToEndpointS3SettingsOutput() }
		if i := state.ServerName; i != nil { inputs["serverName"] = i.ToStringOutput() }
		if i := state.ServiceAccessRole; i != nil { inputs["serviceAccessRole"] = i.ToStringOutput() }
		if i := state.SslMode; i != nil { inputs["sslMode"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource Endpoint
	err := ctx.ReadResource("aws:dms/endpoint:Endpoint", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type EndpointState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The name of the endpoint database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The Amazon Resource Name (ARN) for the endpoint.
	EndpointArn pulumi.StringInput `pulumi:"endpointArn"`
	// The database endpoint identifier.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringInput `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringInput `pulumi:"extraConnectionAttributes"`
	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings EndpointMongodbSettingsInput `pulumi:"mongodbSettings"`
	// The password to be used to login to the endpoint database.
	Password pulumi.StringInput `pulumi:"password"`
	// The port used by the endpoint database.
	Port pulumi.IntInput `pulumi:"port"`
	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings EndpointS3SettingsInput `pulumi:"s3Settings"`
	// The host name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringInput `pulumi:"serviceAccessRole"`
	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The user name to be used to login to the endpoint database.
	Username pulumi.StringInput `pulumi:"username"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The name of the endpoint database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The database endpoint identifier.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringInput `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringInput `pulumi:"extraConnectionAttributes"`
	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings EndpointMongodbSettingsInput `pulumi:"mongodbSettings"`
	// The password to be used to login to the endpoint database.
	Password pulumi.StringInput `pulumi:"password"`
	// The port used by the endpoint database.
	Port pulumi.IntInput `pulumi:"port"`
	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings EndpointS3SettingsInput `pulumi:"s3Settings"`
	// The host name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringInput `pulumi:"serviceAccessRole"`
	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The user name to be used to login to the endpoint database.
	Username pulumi.StringInput `pulumi:"username"`
}
type EndpointMongodbSettings struct {
	AuthMechanism *string `pulumi:"authMechanism"`
	AuthSource *string `pulumi:"authSource"`
	AuthType *string `pulumi:"authType"`
	DocsToInvestigate *string `pulumi:"docsToInvestigate"`
	ExtractDocId *string `pulumi:"extractDocId"`
	NestingLevel *string `pulumi:"nestingLevel"`
}
var endpointMongodbSettingsType = reflect.TypeOf((*EndpointMongodbSettings)(nil)).Elem()

type EndpointMongodbSettingsInput interface {
	pulumi.Input

	ToEndpointMongodbSettingsOutput() EndpointMongodbSettingsOutput
	ToEndpointMongodbSettingsOutputWithContext(ctx context.Context) EndpointMongodbSettingsOutput
}

type EndpointMongodbSettingsArgs struct {
	AuthMechanism pulumi.StringInput `pulumi:"authMechanism"`
	AuthSource pulumi.StringInput `pulumi:"authSource"`
	AuthType pulumi.StringInput `pulumi:"authType"`
	DocsToInvestigate pulumi.StringInput `pulumi:"docsToInvestigate"`
	ExtractDocId pulumi.StringInput `pulumi:"extractDocId"`
	NestingLevel pulumi.StringInput `pulumi:"nestingLevel"`
}

func (EndpointMongodbSettingsArgs) ElementType() reflect.Type {
	return endpointMongodbSettingsType
}

func (a EndpointMongodbSettingsArgs) ToEndpointMongodbSettingsOutput() EndpointMongodbSettingsOutput {
	return pulumi.ToOutput(a).(EndpointMongodbSettingsOutput)
}

func (a EndpointMongodbSettingsArgs) ToEndpointMongodbSettingsOutputWithContext(ctx context.Context) EndpointMongodbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EndpointMongodbSettingsOutput)
}

type EndpointMongodbSettingsOutput struct { *pulumi.OutputState }

func (o EndpointMongodbSettingsOutput) AuthMechanism() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.AuthMechanism == nil { return *new(string) } else { return *v.AuthMechanism }
	}).(pulumi.StringOutput)
}

func (o EndpointMongodbSettingsOutput) AuthSource() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.AuthSource == nil { return *new(string) } else { return *v.AuthSource }
	}).(pulumi.StringOutput)
}

func (o EndpointMongodbSettingsOutput) AuthType() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.AuthType == nil { return *new(string) } else { return *v.AuthType }
	}).(pulumi.StringOutput)
}

func (o EndpointMongodbSettingsOutput) DocsToInvestigate() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.DocsToInvestigate == nil { return *new(string) } else { return *v.DocsToInvestigate }
	}).(pulumi.StringOutput)
}

func (o EndpointMongodbSettingsOutput) ExtractDocId() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.ExtractDocId == nil { return *new(string) } else { return *v.ExtractDocId }
	}).(pulumi.StringOutput)
}

func (o EndpointMongodbSettingsOutput) NestingLevel() pulumi.StringOutput {
	return o.Apply(func(v EndpointMongodbSettings) string {
		if v.NestingLevel == nil { return *new(string) } else { return *v.NestingLevel }
	}).(pulumi.StringOutput)
}

func (EndpointMongodbSettingsOutput) ElementType() reflect.Type {
	return endpointMongodbSettingsType
}

func (o EndpointMongodbSettingsOutput) ToEndpointMongodbSettingsOutput() EndpointMongodbSettingsOutput {
	return o
}

func (o EndpointMongodbSettingsOutput) ToEndpointMongodbSettingsOutputWithContext(ctx context.Context) EndpointMongodbSettingsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(EndpointMongodbSettingsOutput{}) }

type EndpointS3Settings struct {
	BucketFolder *string `pulumi:"bucketFolder"`
	BucketName *string `pulumi:"bucketName"`
	CompressionType *string `pulumi:"compressionType"`
	CsvDelimiter *string `pulumi:"csvDelimiter"`
	CsvRowDelimiter *string `pulumi:"csvRowDelimiter"`
	ExternalTableDefinition *string `pulumi:"externalTableDefinition"`
	ServiceAccessRoleArn *string `pulumi:"serviceAccessRoleArn"`
}
var endpointS3SettingsType = reflect.TypeOf((*EndpointS3Settings)(nil)).Elem()

type EndpointS3SettingsInput interface {
	pulumi.Input

	ToEndpointS3SettingsOutput() EndpointS3SettingsOutput
	ToEndpointS3SettingsOutputWithContext(ctx context.Context) EndpointS3SettingsOutput
}

type EndpointS3SettingsArgs struct {
	BucketFolder pulumi.StringInput `pulumi:"bucketFolder"`
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	CompressionType pulumi.StringInput `pulumi:"compressionType"`
	CsvDelimiter pulumi.StringInput `pulumi:"csvDelimiter"`
	CsvRowDelimiter pulumi.StringInput `pulumi:"csvRowDelimiter"`
	ExternalTableDefinition pulumi.StringInput `pulumi:"externalTableDefinition"`
	ServiceAccessRoleArn pulumi.StringInput `pulumi:"serviceAccessRoleArn"`
}

func (EndpointS3SettingsArgs) ElementType() reflect.Type {
	return endpointS3SettingsType
}

func (a EndpointS3SettingsArgs) ToEndpointS3SettingsOutput() EndpointS3SettingsOutput {
	return pulumi.ToOutput(a).(EndpointS3SettingsOutput)
}

func (a EndpointS3SettingsArgs) ToEndpointS3SettingsOutputWithContext(ctx context.Context) EndpointS3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(EndpointS3SettingsOutput)
}

type EndpointS3SettingsOutput struct { *pulumi.OutputState }

func (o EndpointS3SettingsOutput) BucketFolder() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.BucketFolder == nil { return *new(string) } else { return *v.BucketFolder }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) BucketName() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.BucketName == nil { return *new(string) } else { return *v.BucketName }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) CompressionType() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.CompressionType == nil { return *new(string) } else { return *v.CompressionType }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) CsvDelimiter() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.CsvDelimiter == nil { return *new(string) } else { return *v.CsvDelimiter }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) CsvRowDelimiter() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.CsvRowDelimiter == nil { return *new(string) } else { return *v.CsvRowDelimiter }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) ExternalTableDefinition() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.ExternalTableDefinition == nil { return *new(string) } else { return *v.ExternalTableDefinition }
	}).(pulumi.StringOutput)
}

func (o EndpointS3SettingsOutput) ServiceAccessRoleArn() pulumi.StringOutput {
	return o.Apply(func(v EndpointS3Settings) string {
		if v.ServiceAccessRoleArn == nil { return *new(string) } else { return *v.ServiceAccessRoleArn }
	}).(pulumi.StringOutput)
}

func (EndpointS3SettingsOutput) ElementType() reflect.Type {
	return endpointS3SettingsType
}

func (o EndpointS3SettingsOutput) ToEndpointS3SettingsOutput() EndpointS3SettingsOutput {
	return o
}

func (o EndpointS3SettingsOutput) ToEndpointS3SettingsOutputWithContext(ctx context.Context) EndpointS3SettingsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(EndpointS3SettingsOutput{}) }

