// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DMS (Data Migration Service) certificate resource. DMS certificates can be created, deleted, and imported.
// 
// > **Note:** All arguments including the PEM encoded certificate will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dms_certificate.html.markdown.
type Certificate struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`

	// The certificate identifier.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`

	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumi.StringOutput `pulumi:"certificatePem"`

	// The contents of the Oracle Wallet certificate for use with SSL. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumi.StringOutput `pulumi:"certificateWallet"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.CertificateId == nil {
		return nil, errors.New("missing required argument 'CertificateId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CertificateId; i != nil { inputs["certificateId"] = i.ToStringOutput() }
		if i := args.CertificatePem; i != nil { inputs["certificatePem"] = i.ToStringOutput() }
		if i := args.CertificateWallet; i != nil { inputs["certificateWallet"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.RegisterResource("aws:dms/certificate:Certificate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.CertificateArn; i != nil { inputs["certificateArn"] = i.ToStringOutput() }
		if i := state.CertificateId; i != nil { inputs["certificateId"] = i.ToStringOutput() }
		if i := state.CertificatePem; i != nil { inputs["certificatePem"] = i.ToStringOutput() }
		if i := state.CertificateWallet; i != nil { inputs["certificateWallet"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.ReadResource("aws:dms/certificate:Certificate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The certificate identifier.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumi.StringInput `pulumi:"certificatePem"`
	// The contents of the Oracle Wallet certificate for use with SSL. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumi.StringInput `pulumi:"certificateWallet"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The certificate identifier.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumi.StringInput `pulumi:"certificatePem"`
	// The contents of the Oracle Wallet certificate for use with SSL. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumi.StringInput `pulumi:"certificateWallet"`
}
