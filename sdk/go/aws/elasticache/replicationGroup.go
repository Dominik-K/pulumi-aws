// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ElastiCache Replication Group resource.
// For working with Memcached or single primary Redis instances (Cluster Mode Disabled), see the
// [`elasticache.Cluster` resource](https://www.terraform.io/docs/providers/aws/r/elasticache_cluster.html).
// 
// > **Note:** When you change an attribute, such as `engineVersion`, by
// default the ElastiCache API applies it in the next maintenance window. Because
// of this, this provider may report a difference in its planning phase because the
// actual modification has not yet taken place. You can use the
// `applyImmediately` flag to instruct the service to apply the change
// immediately. Using `applyImmediately` can result in a brief downtime as
// servers reboots.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elasticache_replication_group.html.markdown.
type ReplicationGroup struct {
	pulumi.CustomResourceState

	// Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolOutput `pulumi:"applyImmediately"`

	// Whether to enable encryption at rest.
	AtRestEncryptionEnabled pulumi.BoolOutput `pulumi:"atRestEncryptionEnabled"`

	// The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
	AuthToken pulumi.StringOutput `pulumi:"authToken"`

	// Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Defaults to `true`.
	AutoMinorVersionUpgrade pulumi.BoolOutput `pulumi:"autoMinorVersionUpgrade"`

	// Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If true, Multi-AZ is enabled for this replication group. If false, Multi-AZ is disabled for this replication group. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
	AutomaticFailoverEnabled pulumi.BoolOutput `pulumi:"automaticFailoverEnabled"`

	// A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`

	// Create a native redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed.
	ClusterMode ReplicationGroupClusterModeOutput `pulumi:"clusterMode"`

	// The address of the replication group configuration endpoint when cluster mode is enabled.
	ConfigurationEndpointAddress pulumi.StringOutput `pulumi:"configurationEndpointAddress"`

	// The name of the cache engine to be used for the clusters in this replication group. e.g. `redis`
	Engine pulumi.StringOutput `pulumi:"engine"`

	// The version number of the cache engine to be used for the cache clusters in this replication group.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`

	// The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// Specifies the weekly time range for when maintenance
	// on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC).
	// The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringOutput `pulumi:"maintenanceWindow"`

	// The identifiers of all the nodes that are part of this replication group.
	MemberClusters pulumi.StringArrayOutput `pulumi:"memberClusters"`

	// The compute and memory capacity of the nodes in the node group.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`

	// An Amazon Resource Name (ARN) of an
	// SNS topic to send ElastiCache notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringOutput `pulumi:"notificationTopicArn"`

	// The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications.
	NumberCacheClusters pulumi.IntOutput `pulumi:"numberCacheClusters"`

	// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.
	ParameterGroupName pulumi.StringOutput `pulumi:"parameterGroupName"`

	// The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
	Port pulumi.IntOutput `pulumi:"port"`

	// (Redis only) The address of the endpoint for the primary node in the replication group, if the cluster mode is disabled.
	PrimaryEndpointAddress pulumi.StringOutput `pulumi:"primaryEndpointAddress"`

	// A user-created description for the replication group.
	ReplicationGroupDescription pulumi.StringOutput `pulumi:"replicationGroupDescription"`

	// The replication group identifier. This parameter is stored as a lowercase string.
	ReplicationGroupId pulumi.StringOutput `pulumi:"replicationGroupId"`

	// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`

	// A list of cache security group names to associate with this replication group.
	SecurityGroupNames pulumi.StringArrayOutput `pulumi:"securityGroupNames"`

	// A single-element string list containing an
	// Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3.
	// Example: `arn:aws:s3:::my_bucket/snapshot1.rdb`
	SnapshotArns pulumi.StringArrayOutput `pulumi:"snapshotArns"`

	// The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
	SnapshotName pulumi.StringOutput `pulumi:"snapshotName"`

	// The number of days for which ElastiCache will
	// retain automatic cache cluster snapshots before deleting them. For example, if you set
	// SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days
	// before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
	// Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro or cache.t2.* cache nodes
	SnapshotRetentionLimit pulumi.IntOutput `pulumi:"snapshotRetentionLimit"`

	// The daily time range (in UTC) during which ElastiCache will
	// begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
	SnapshotWindow pulumi.StringOutput `pulumi:"snapshotWindow"`

	// The name of the cache subnet group to be used for the replication group.
	SubnetGroupName pulumi.StringOutput `pulumi:"subnetGroupName"`

	// A mapping of tags to assign to the resource
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Whether to enable encryption in transit.
	TransitEncryptionEnabled pulumi.BoolOutput `pulumi:"transitEncryptionEnabled"`
}

// NewReplicationGroup registers a new resource with the given unique name, arguments, and options.
func NewReplicationGroup(ctx *pulumi.Context,
	name string, args *ReplicationGroupArgs, opts ...pulumi.ResourceOption) (*ReplicationGroup, error) {
	if args == nil || args.ReplicationGroupDescription == nil {
		return nil, errors.New("missing required argument 'ReplicationGroupDescription'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApplyImmediately; i != nil { inputs["applyImmediately"] = i.ToBoolOutput() }
		if i := args.AtRestEncryptionEnabled; i != nil { inputs["atRestEncryptionEnabled"] = i.ToBoolOutput() }
		if i := args.AuthToken; i != nil { inputs["authToken"] = i.ToStringOutput() }
		if i := args.AutoMinorVersionUpgrade; i != nil { inputs["autoMinorVersionUpgrade"] = i.ToBoolOutput() }
		if i := args.AutomaticFailoverEnabled; i != nil { inputs["automaticFailoverEnabled"] = i.ToBoolOutput() }
		if i := args.AvailabilityZones; i != nil { inputs["availabilityZones"] = i.ToStringArrayOutput() }
		if i := args.ClusterMode; i != nil { inputs["clusterMode"] = i.ToReplicationGroupClusterModeOutput() }
		if i := args.Engine; i != nil { inputs["engine"] = i.ToStringOutput() }
		if i := args.EngineVersion; i != nil { inputs["engineVersion"] = i.ToStringOutput() }
		if i := args.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := args.MaintenanceWindow; i != nil { inputs["maintenanceWindow"] = i.ToStringOutput() }
		if i := args.NodeType; i != nil { inputs["nodeType"] = i.ToStringOutput() }
		if i := args.NotificationTopicArn; i != nil { inputs["notificationTopicArn"] = i.ToStringOutput() }
		if i := args.NumberCacheClusters; i != nil { inputs["numberCacheClusters"] = i.ToIntOutput() }
		if i := args.ParameterGroupName; i != nil { inputs["parameterGroupName"] = i.ToStringOutput() }
		if i := args.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := args.ReplicationGroupDescription; i != nil { inputs["replicationGroupDescription"] = i.ToStringOutput() }
		if i := args.ReplicationGroupId; i != nil { inputs["replicationGroupId"] = i.ToStringOutput() }
		if i := args.SecurityGroupIds; i != nil { inputs["securityGroupIds"] = i.ToStringArrayOutput() }
		if i := args.SecurityGroupNames; i != nil { inputs["securityGroupNames"] = i.ToStringArrayOutput() }
		if i := args.SnapshotArns; i != nil { inputs["snapshotArns"] = i.ToStringArrayOutput() }
		if i := args.SnapshotName; i != nil { inputs["snapshotName"] = i.ToStringOutput() }
		if i := args.SnapshotRetentionLimit; i != nil { inputs["snapshotRetentionLimit"] = i.ToIntOutput() }
		if i := args.SnapshotWindow; i != nil { inputs["snapshotWindow"] = i.ToStringOutput() }
		if i := args.SubnetGroupName; i != nil { inputs["subnetGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.TransitEncryptionEnabled; i != nil { inputs["transitEncryptionEnabled"] = i.ToBoolOutput() }
	}
	var resource ReplicationGroup
	err := ctx.RegisterResource("aws:elasticache/replicationGroup:ReplicationGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationGroup gets an existing ReplicationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationGroupState, opts ...pulumi.ResourceOption) (*ReplicationGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApplyImmediately; i != nil { inputs["applyImmediately"] = i.ToBoolOutput() }
		if i := state.AtRestEncryptionEnabled; i != nil { inputs["atRestEncryptionEnabled"] = i.ToBoolOutput() }
		if i := state.AuthToken; i != nil { inputs["authToken"] = i.ToStringOutput() }
		if i := state.AutoMinorVersionUpgrade; i != nil { inputs["autoMinorVersionUpgrade"] = i.ToBoolOutput() }
		if i := state.AutomaticFailoverEnabled; i != nil { inputs["automaticFailoverEnabled"] = i.ToBoolOutput() }
		if i := state.AvailabilityZones; i != nil { inputs["availabilityZones"] = i.ToStringArrayOutput() }
		if i := state.ClusterMode; i != nil { inputs["clusterMode"] = i.ToReplicationGroupClusterModeOutput() }
		if i := state.ConfigurationEndpointAddress; i != nil { inputs["configurationEndpointAddress"] = i.ToStringOutput() }
		if i := state.Engine; i != nil { inputs["engine"] = i.ToStringOutput() }
		if i := state.EngineVersion; i != nil { inputs["engineVersion"] = i.ToStringOutput() }
		if i := state.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := state.MaintenanceWindow; i != nil { inputs["maintenanceWindow"] = i.ToStringOutput() }
		if i := state.MemberClusters; i != nil { inputs["memberClusters"] = i.ToStringArrayOutput() }
		if i := state.NodeType; i != nil { inputs["nodeType"] = i.ToStringOutput() }
		if i := state.NotificationTopicArn; i != nil { inputs["notificationTopicArn"] = i.ToStringOutput() }
		if i := state.NumberCacheClusters; i != nil { inputs["numberCacheClusters"] = i.ToIntOutput() }
		if i := state.ParameterGroupName; i != nil { inputs["parameterGroupName"] = i.ToStringOutput() }
		if i := state.Port; i != nil { inputs["port"] = i.ToIntOutput() }
		if i := state.PrimaryEndpointAddress; i != nil { inputs["primaryEndpointAddress"] = i.ToStringOutput() }
		if i := state.ReplicationGroupDescription; i != nil { inputs["replicationGroupDescription"] = i.ToStringOutput() }
		if i := state.ReplicationGroupId; i != nil { inputs["replicationGroupId"] = i.ToStringOutput() }
		if i := state.SecurityGroupIds; i != nil { inputs["securityGroupIds"] = i.ToStringArrayOutput() }
		if i := state.SecurityGroupNames; i != nil { inputs["securityGroupNames"] = i.ToStringArrayOutput() }
		if i := state.SnapshotArns; i != nil { inputs["snapshotArns"] = i.ToStringArrayOutput() }
		if i := state.SnapshotName; i != nil { inputs["snapshotName"] = i.ToStringOutput() }
		if i := state.SnapshotRetentionLimit; i != nil { inputs["snapshotRetentionLimit"] = i.ToIntOutput() }
		if i := state.SnapshotWindow; i != nil { inputs["snapshotWindow"] = i.ToStringOutput() }
		if i := state.SubnetGroupName; i != nil { inputs["subnetGroupName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.TransitEncryptionEnabled; i != nil { inputs["transitEncryptionEnabled"] = i.ToBoolOutput() }
	}
	var resource ReplicationGroup
	err := ctx.ReadResource("aws:elasticache/replicationGroup:ReplicationGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationGroup resources.
type ReplicationGroupState struct {
	// Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// Whether to enable encryption at rest.
	AtRestEncryptionEnabled pulumi.BoolInput `pulumi:"atRestEncryptionEnabled"`
	// The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
	AuthToken pulumi.StringInput `pulumi:"authToken"`
	// Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Defaults to `true`.
	AutoMinorVersionUpgrade pulumi.BoolInput `pulumi:"autoMinorVersionUpgrade"`
	// Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If true, Multi-AZ is enabled for this replication group. If false, Multi-AZ is disabled for this replication group. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
	AutomaticFailoverEnabled pulumi.BoolInput `pulumi:"automaticFailoverEnabled"`
	// A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Create a native redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed.
	ClusterMode ReplicationGroupClusterModeInput `pulumi:"clusterMode"`
	// The address of the replication group configuration endpoint when cluster mode is enabled.
	ConfigurationEndpointAddress pulumi.StringInput `pulumi:"configurationEndpointAddress"`
	// The name of the cache engine to be used for the clusters in this replication group. e.g. `redis`
	Engine pulumi.StringInput `pulumi:"engine"`
	// The version number of the cache engine to be used for the cache clusters in this replication group.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Specifies the weekly time range for when maintenance
	// on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC).
	// The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringInput `pulumi:"maintenanceWindow"`
	// The identifiers of all the nodes that are part of this replication group.
	MemberClusters pulumi.StringArrayInput `pulumi:"memberClusters"`
	// The compute and memory capacity of the nodes in the node group.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send ElastiCache notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringInput `pulumi:"notificationTopicArn"`
	// The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications.
	NumberCacheClusters pulumi.IntInput `pulumi:"numberCacheClusters"`
	// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.
	ParameterGroupName pulumi.StringInput `pulumi:"parameterGroupName"`
	// The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
	Port pulumi.IntInput `pulumi:"port"`
	// (Redis only) The address of the endpoint for the primary node in the replication group, if the cluster mode is disabled.
	PrimaryEndpointAddress pulumi.StringInput `pulumi:"primaryEndpointAddress"`
	// A user-created description for the replication group.
	ReplicationGroupDescription pulumi.StringInput `pulumi:"replicationGroupDescription"`
	// The replication group identifier. This parameter is stored as a lowercase string.
	ReplicationGroupId pulumi.StringInput `pulumi:"replicationGroupId"`
	// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of cache security group names to associate with this replication group.
	SecurityGroupNames pulumi.StringArrayInput `pulumi:"securityGroupNames"`
	// A single-element string list containing an
	// Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3.
	// Example: `arn:aws:s3:::my_bucket/snapshot1.rdb`
	SnapshotArns pulumi.StringArrayInput `pulumi:"snapshotArns"`
	// The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
	SnapshotName pulumi.StringInput `pulumi:"snapshotName"`
	// The number of days for which ElastiCache will
	// retain automatic cache cluster snapshots before deleting them. For example, if you set
	// SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days
	// before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
	// Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro or cache.t2.* cache nodes
	SnapshotRetentionLimit pulumi.IntInput `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which ElastiCache will
	// begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
	SnapshotWindow pulumi.StringInput `pulumi:"snapshotWindow"`
	// The name of the cache subnet group to be used for the replication group.
	SubnetGroupName pulumi.StringInput `pulumi:"subnetGroupName"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
	// Whether to enable encryption in transit.
	TransitEncryptionEnabled pulumi.BoolInput `pulumi:"transitEncryptionEnabled"`
}

// The set of arguments for constructing a ReplicationGroup resource.
type ReplicationGroupArgs struct {
	// Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// Whether to enable encryption at rest.
	AtRestEncryptionEnabled pulumi.BoolInput `pulumi:"atRestEncryptionEnabled"`
	// The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
	AuthToken pulumi.StringInput `pulumi:"authToken"`
	// Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Defaults to `true`.
	AutoMinorVersionUpgrade pulumi.BoolInput `pulumi:"autoMinorVersionUpgrade"`
	// Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If true, Multi-AZ is enabled for this replication group. If false, Multi-AZ is disabled for this replication group. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
	AutomaticFailoverEnabled pulumi.BoolInput `pulumi:"automaticFailoverEnabled"`
	// A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Create a native redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed.
	ClusterMode ReplicationGroupClusterModeInput `pulumi:"clusterMode"`
	// The name of the cache engine to be used for the clusters in this replication group. e.g. `redis`
	Engine pulumi.StringInput `pulumi:"engine"`
	// The version number of the cache engine to be used for the cache clusters in this replication group.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Specifies the weekly time range for when maintenance
	// on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC).
	// The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringInput `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes in the node group.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send ElastiCache notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringInput `pulumi:"notificationTopicArn"`
	// The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications.
	NumberCacheClusters pulumi.IntInput `pulumi:"numberCacheClusters"`
	// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.
	ParameterGroupName pulumi.StringInput `pulumi:"parameterGroupName"`
	// The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
	Port pulumi.IntInput `pulumi:"port"`
	// A user-created description for the replication group.
	ReplicationGroupDescription pulumi.StringInput `pulumi:"replicationGroupDescription"`
	// The replication group identifier. This parameter is stored as a lowercase string.
	ReplicationGroupId pulumi.StringInput `pulumi:"replicationGroupId"`
	// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of cache security group names to associate with this replication group.
	SecurityGroupNames pulumi.StringArrayInput `pulumi:"securityGroupNames"`
	// A single-element string list containing an
	// Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3.
	// Example: `arn:aws:s3:::my_bucket/snapshot1.rdb`
	SnapshotArns pulumi.StringArrayInput `pulumi:"snapshotArns"`
	// The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
	SnapshotName pulumi.StringInput `pulumi:"snapshotName"`
	// The number of days for which ElastiCache will
	// retain automatic cache cluster snapshots before deleting them. For example, if you set
	// SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days
	// before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
	// Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro or cache.t2.* cache nodes
	SnapshotRetentionLimit pulumi.IntInput `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which ElastiCache will
	// begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
	SnapshotWindow pulumi.StringInput `pulumi:"snapshotWindow"`
	// The name of the cache subnet group to be used for the replication group.
	SubnetGroupName pulumi.StringInput `pulumi:"subnetGroupName"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
	// Whether to enable encryption in transit.
	TransitEncryptionEnabled pulumi.BoolInput `pulumi:"transitEncryptionEnabled"`
}
type ReplicationGroupClusterMode struct {
	// Specify the number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications.
	NumNodeGroups int `pulumi:"numNodeGroups"`
	// Specify the number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will force a new resource.
	ReplicasPerNodeGroup int `pulumi:"replicasPerNodeGroup"`
}
var replicationGroupClusterModeType = reflect.TypeOf((*ReplicationGroupClusterMode)(nil)).Elem()

type ReplicationGroupClusterModeInput interface {
	pulumi.Input

	ToReplicationGroupClusterModeOutput() ReplicationGroupClusterModeOutput
	ToReplicationGroupClusterModeOutputWithContext(ctx context.Context) ReplicationGroupClusterModeOutput
}

type ReplicationGroupClusterModeArgs struct {
	// Specify the number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications.
	NumNodeGroups pulumi.IntInput `pulumi:"numNodeGroups"`
	// Specify the number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will force a new resource.
	ReplicasPerNodeGroup pulumi.IntInput `pulumi:"replicasPerNodeGroup"`
}

func (ReplicationGroupClusterModeArgs) ElementType() reflect.Type {
	return replicationGroupClusterModeType
}

func (a ReplicationGroupClusterModeArgs) ToReplicationGroupClusterModeOutput() ReplicationGroupClusterModeOutput {
	return pulumi.ToOutput(a).(ReplicationGroupClusterModeOutput)
}

func (a ReplicationGroupClusterModeArgs) ToReplicationGroupClusterModeOutputWithContext(ctx context.Context) ReplicationGroupClusterModeOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ReplicationGroupClusterModeOutput)
}

type ReplicationGroupClusterModeOutput struct { *pulumi.OutputState }

// Specify the number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications.
func (o ReplicationGroupClusterModeOutput) NumNodeGroups() pulumi.IntOutput {
	return o.Apply(func(v ReplicationGroupClusterMode) int {
		return v.NumNodeGroups
	}).(pulumi.IntOutput)
}

// Specify the number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will force a new resource.
func (o ReplicationGroupClusterModeOutput) ReplicasPerNodeGroup() pulumi.IntOutput {
	return o.Apply(func(v ReplicationGroupClusterMode) int {
		return v.ReplicasPerNodeGroup
	}).(pulumi.IntOutput)
}

func (ReplicationGroupClusterModeOutput) ElementType() reflect.Type {
	return replicationGroupClusterModeType
}

func (o ReplicationGroupClusterModeOutput) ToReplicationGroupClusterModeOutput() ReplicationGroupClusterModeOutput {
	return o
}

func (o ReplicationGroupClusterModeOutput) ToReplicationGroupClusterModeOutputWithContext(ctx context.Context) ReplicationGroupClusterModeOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ReplicationGroupClusterModeOutput{}) }

