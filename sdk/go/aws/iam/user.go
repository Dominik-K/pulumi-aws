// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an IAM user.
// 
// > *NOTE:* If policies are attached to the user via the [`iam.PolicyAttachment` resource](https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html) and you are modifying the user `name` or `path`, the `forceDestroy` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The [`iam.UserPolicyAttachment` resource (recommended)](https://www.terraform.io/docs/providers/aws/r/iam_user_policy_attachment.html) does not have this requirement.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_user.html.markdown.
type User struct {
	pulumi.CustomResourceState

	// The ARN assigned by AWS for this user.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// When destroying this user, destroy even if it
	// has non-this provider-managed IAM access keys, login profile or MFA devices. Without `forceDestroy`
	// a user with non-this provider-managed access keys and login profile will fail to be destroyed.
	ForceDestroy pulumi.BoolOutput `pulumi:"forceDestroy"`

	// The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
	Name pulumi.StringOutput `pulumi:"name"`

	// Path in which to create the user.
	Path pulumi.StringOutput `pulumi:"path"`

	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary pulumi.StringOutput `pulumi:"permissionsBoundary"`

	// Key-value mapping of tags for the IAM user
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The [unique ID][1] assigned by AWS.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ForceDestroy; i != nil { inputs["forceDestroy"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Path; i != nil { inputs["path"] = i.ToStringOutput() }
		if i := args.PermissionsBoundary; i != nil { inputs["permissionsBoundary"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource User
	err := ctx.RegisterResource("aws:iam/user:User", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.ForceDestroy; i != nil { inputs["forceDestroy"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Path; i != nil { inputs["path"] = i.ToStringOutput() }
		if i := state.PermissionsBoundary; i != nil { inputs["permissionsBoundary"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UniqueId; i != nil { inputs["uniqueId"] = i.ToStringOutput() }
	}
	var resource User
	err := ctx.ReadResource("aws:iam/user:User", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// The ARN assigned by AWS for this user.
	Arn pulumi.StringInput `pulumi:"arn"`
	// When destroying this user, destroy even if it
	// has non-this provider-managed IAM access keys, login profile or MFA devices. Without `forceDestroy`
	// a user with non-this provider-managed access keys and login profile will fail to be destroyed.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
	Name pulumi.StringInput `pulumi:"name"`
	// Path in which to create the user.
	Path pulumi.StringInput `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary pulumi.StringInput `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM user
	Tags pulumi.MapInput `pulumi:"tags"`
	// The [unique ID][1] assigned by AWS.
	UniqueId pulumi.StringInput `pulumi:"uniqueId"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// When destroying this user, destroy even if it
	// has non-this provider-managed IAM access keys, login profile or MFA devices. Without `forceDestroy`
	// a user with non-this provider-managed access keys and login profile will fail to be destroyed.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
	Name pulumi.StringInput `pulumi:"name"`
	// Path in which to create the user.
	Path pulumi.StringInput `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary pulumi.StringInput `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM user
	Tags pulumi.MapInput `pulumi:"tags"`
}
