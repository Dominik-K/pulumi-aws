// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an IAM SAML provider.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_saml_provider.html.markdown.
type SamlProvider struct {
	pulumi.CustomResourceState

	// The ARN assigned by AWS for this provider.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The name of the provider to create.
	Name pulumi.StringOutput `pulumi:"name"`

	// An XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument pulumi.StringOutput `pulumi:"samlMetadataDocument"`

	// The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.
	ValidUntil pulumi.StringOutput `pulumi:"validUntil"`
}

// NewSamlProvider registers a new resource with the given unique name, arguments, and options.
func NewSamlProvider(ctx *pulumi.Context,
	name string, args *SamlProviderArgs, opts ...pulumi.ResourceOption) (*SamlProvider, error) {
	if args == nil || args.SamlMetadataDocument == nil {
		return nil, errors.New("missing required argument 'SamlMetadataDocument'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.SamlMetadataDocument; i != nil { inputs["samlMetadataDocument"] = i.ToStringOutput() }
	}
	var resource SamlProvider
	err := ctx.RegisterResource("aws:iam/samlProvider:SamlProvider", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlProvider gets an existing SamlProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlProviderState, opts ...pulumi.ResourceOption) (*SamlProvider, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.SamlMetadataDocument; i != nil { inputs["samlMetadataDocument"] = i.ToStringOutput() }
		if i := state.ValidUntil; i != nil { inputs["validUntil"] = i.ToStringOutput() }
	}
	var resource SamlProvider
	err := ctx.ReadResource("aws:iam/samlProvider:SamlProvider", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlProvider resources.
type SamlProviderState struct {
	// The ARN assigned by AWS for this provider.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The name of the provider to create.
	Name pulumi.StringInput `pulumi:"name"`
	// An XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument pulumi.StringInput `pulumi:"samlMetadataDocument"`
	// The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.
	ValidUntil pulumi.StringInput `pulumi:"validUntil"`
}

// The set of arguments for constructing a SamlProvider resource.
type SamlProviderArgs struct {
	// The name of the provider to create.
	Name pulumi.StringInput `pulumi:"name"`
	// An XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument pulumi.StringInput `pulumi:"samlMetadataDocument"`
}
