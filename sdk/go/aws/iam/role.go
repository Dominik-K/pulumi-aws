// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an IAM role.
// 
// > *NOTE:* If policies are attached to the role via the [`iam.PolicyAttachment` resource](https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html) and you are modifying the role `name` or `path`, the `forceDetachPolicies` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The [`iam.RolePolicyAttachment` resource (recommended)](https://www.terraform.io/docs/providers/aws/r/iam_role_policy_attachment.html) does not have this requirement.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_role.html.markdown.
type Role struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) specifying the role.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The policy that grants an entity permission to assume the role.
	AssumeRolePolicy pulumi.StringOutput `pulumi:"assumeRolePolicy"`

	// The creation date of the IAM role.
	CreateDate pulumi.StringOutput `pulumi:"createDate"`

	// The description of the role.
	Description pulumi.StringOutput `pulumi:"description"`

	// Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumi.BoolOutput `pulumi:"forceDetachPolicies"`

	// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumi.IntOutput `pulumi:"maxSessionDuration"`

	// The name of the role. If omitted, this provider will assign a random, unique name.
	Name pulumi.StringOutput `pulumi:"name"`

	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// The path to the role.
	// See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumi.StringOutput `pulumi:"path"`

	// The ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumi.StringOutput `pulumi:"permissionsBoundary"`

	// Key-value mapping of tags for the IAM role
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The stable and unique string identifying the role.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil || args.AssumeRolePolicy == nil {
		return nil, errors.New("missing required argument 'AssumeRolePolicy'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AssumeRolePolicy; i != nil { inputs["assumeRolePolicy"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.ForceDetachPolicies; i != nil { inputs["forceDetachPolicies"] = i.ToBoolOutput() }
		if i := args.MaxSessionDuration; i != nil { inputs["maxSessionDuration"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := args.Path; i != nil { inputs["path"] = i.ToStringOutput() }
		if i := args.PermissionsBoundary; i != nil { inputs["permissionsBoundary"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Role
	err := ctx.RegisterResource("aws:iam/role:Role", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.AssumeRolePolicy; i != nil { inputs["assumeRolePolicy"] = i.ToStringOutput() }
		if i := state.CreateDate; i != nil { inputs["createDate"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.ForceDetachPolicies; i != nil { inputs["forceDetachPolicies"] = i.ToBoolOutput() }
		if i := state.MaxSessionDuration; i != nil { inputs["maxSessionDuration"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := state.Path; i != nil { inputs["path"] = i.ToStringOutput() }
		if i := state.PermissionsBoundary; i != nil { inputs["permissionsBoundary"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UniqueId; i != nil { inputs["uniqueId"] = i.ToStringOutput() }
	}
	var resource Role
	err := ctx.ReadResource("aws:iam/role:Role", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type RoleState struct {
	// The Amazon Resource Name (ARN) specifying the role.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The policy that grants an entity permission to assume the role.
	AssumeRolePolicy pulumi.StringInput `pulumi:"assumeRolePolicy"`
	// The creation date of the IAM role.
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// The description of the role.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumi.BoolInput `pulumi:"forceDetachPolicies"`
	// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumi.IntInput `pulumi:"maxSessionDuration"`
	// The name of the role. If omitted, this provider will assign a random, unique name.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The path to the role.
	// See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumi.StringInput `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumi.StringInput `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM role
	Tags pulumi.MapInput `pulumi:"tags"`
	// The stable and unique string identifying the role.
	UniqueId pulumi.StringInput `pulumi:"uniqueId"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// The policy that grants an entity permission to assume the role.
	AssumeRolePolicy pulumi.StringInput `pulumi:"assumeRolePolicy"`
	// The description of the role.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumi.BoolInput `pulumi:"forceDetachPolicies"`
	// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumi.IntInput `pulumi:"maxSessionDuration"`
	// The name of the role. If omitted, this provider will assign a random, unique name.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The path to the role.
	// See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumi.StringInput `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumi.StringInput `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM role
	Tags pulumi.MapInput `pulumi:"tags"`
}
