// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > **Note:** There is only a single policy allowed per AWS account. An existing policy will be lost when using this resource as an effect of this limitation.
// 
// Manages Password Policy for the AWS Account.
// See more about [Account Password Policy](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html)
// in the official AWS docs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_account_password_policy.html.markdown.
type AccountPasswordPolicy struct {
	pulumi.CustomResourceState

	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumi.BoolOutput `pulumi:"allowUsersToChangePassword"`

	// Indicates whether passwords in the account expire.
	// Returns `true` if `maxPasswordAge` contains a value greater than `0`.
	// Returns `false` if it is `0` or _not present_.
	ExpirePasswords pulumi.BoolOutput `pulumi:"expirePasswords"`

	// Whether users are prevented from setting a new password after their password has expired
	// (i.e. require administrator reset)
	HardExpiry pulumi.BoolOutput `pulumi:"hardExpiry"`

	// The number of days that an user password is valid.
	MaxPasswordAge pulumi.IntOutput `pulumi:"maxPasswordAge"`

	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumi.IntOutput `pulumi:"minimumPasswordLength"`

	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumi.IntOutput `pulumi:"passwordReusePrevention"`

	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumi.BoolOutput `pulumi:"requireLowercaseCharacters"`

	// Whether to require numbers for user passwords.
	RequireNumbers pulumi.BoolOutput `pulumi:"requireNumbers"`

	// Whether to require symbols for user passwords.
	RequireSymbols pulumi.BoolOutput `pulumi:"requireSymbols"`

	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumi.BoolOutput `pulumi:"requireUppercaseCharacters"`
}

// NewAccountPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountPasswordPolicy(ctx *pulumi.Context,
	name string, args *AccountPasswordPolicyArgs, opts ...pulumi.ResourceOption) (*AccountPasswordPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AllowUsersToChangePassword; i != nil { inputs["allowUsersToChangePassword"] = i.ToBoolOutput() }
		if i := args.HardExpiry; i != nil { inputs["hardExpiry"] = i.ToBoolOutput() }
		if i := args.MaxPasswordAge; i != nil { inputs["maxPasswordAge"] = i.ToIntOutput() }
		if i := args.MinimumPasswordLength; i != nil { inputs["minimumPasswordLength"] = i.ToIntOutput() }
		if i := args.PasswordReusePrevention; i != nil { inputs["passwordReusePrevention"] = i.ToIntOutput() }
		if i := args.RequireLowercaseCharacters; i != nil { inputs["requireLowercaseCharacters"] = i.ToBoolOutput() }
		if i := args.RequireNumbers; i != nil { inputs["requireNumbers"] = i.ToBoolOutput() }
		if i := args.RequireSymbols; i != nil { inputs["requireSymbols"] = i.ToBoolOutput() }
		if i := args.RequireUppercaseCharacters; i != nil { inputs["requireUppercaseCharacters"] = i.ToBoolOutput() }
	}
	var resource AccountPasswordPolicy
	err := ctx.RegisterResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPasswordPolicy gets an existing AccountPasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPasswordPolicyState, opts ...pulumi.ResourceOption) (*AccountPasswordPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AllowUsersToChangePassword; i != nil { inputs["allowUsersToChangePassword"] = i.ToBoolOutput() }
		if i := state.ExpirePasswords; i != nil { inputs["expirePasswords"] = i.ToBoolOutput() }
		if i := state.HardExpiry; i != nil { inputs["hardExpiry"] = i.ToBoolOutput() }
		if i := state.MaxPasswordAge; i != nil { inputs["maxPasswordAge"] = i.ToIntOutput() }
		if i := state.MinimumPasswordLength; i != nil { inputs["minimumPasswordLength"] = i.ToIntOutput() }
		if i := state.PasswordReusePrevention; i != nil { inputs["passwordReusePrevention"] = i.ToIntOutput() }
		if i := state.RequireLowercaseCharacters; i != nil { inputs["requireLowercaseCharacters"] = i.ToBoolOutput() }
		if i := state.RequireNumbers; i != nil { inputs["requireNumbers"] = i.ToBoolOutput() }
		if i := state.RequireSymbols; i != nil { inputs["requireSymbols"] = i.ToBoolOutput() }
		if i := state.RequireUppercaseCharacters; i != nil { inputs["requireUppercaseCharacters"] = i.ToBoolOutput() }
	}
	var resource AccountPasswordPolicy
	err := ctx.ReadResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPasswordPolicy resources.
type AccountPasswordPolicyState struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumi.BoolInput `pulumi:"allowUsersToChangePassword"`
	// Indicates whether passwords in the account expire.
	// Returns `true` if `maxPasswordAge` contains a value greater than `0`.
	// Returns `false` if it is `0` or _not present_.
	ExpirePasswords pulumi.BoolInput `pulumi:"expirePasswords"`
	// Whether users are prevented from setting a new password after their password has expired
	// (i.e. require administrator reset)
	HardExpiry pulumi.BoolInput `pulumi:"hardExpiry"`
	// The number of days that an user password is valid.
	MaxPasswordAge pulumi.IntInput `pulumi:"maxPasswordAge"`
	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumi.IntInput `pulumi:"minimumPasswordLength"`
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumi.IntInput `pulumi:"passwordReusePrevention"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumi.BoolInput `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers pulumi.BoolInput `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols pulumi.BoolInput `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumi.BoolInput `pulumi:"requireUppercaseCharacters"`
}

// The set of arguments for constructing a AccountPasswordPolicy resource.
type AccountPasswordPolicyArgs struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumi.BoolInput `pulumi:"allowUsersToChangePassword"`
	// Whether users are prevented from setting a new password after their password has expired
	// (i.e. require administrator reset)
	HardExpiry pulumi.BoolInput `pulumi:"hardExpiry"`
	// The number of days that an user password is valid.
	MaxPasswordAge pulumi.IntInput `pulumi:"maxPasswordAge"`
	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumi.IntInput `pulumi:"minimumPasswordLength"`
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumi.IntInput `pulumi:"passwordReusePrevention"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumi.BoolInput `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers pulumi.BoolInput `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols pulumi.BoolInput `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumi.BoolInput `pulumi:"requireUppercaseCharacters"`
}
