// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Lambda function alias. Creates an alias that points to the specified Lambda function version.
// 
// For information about Lambda and how to use it, see [What is AWS Lambda?][1]
// For information about function aliases, see [CreateAlias][2] and [AliasRoutingConfiguration][3] in the API docs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_alias.html.markdown.
type Alias struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) identifying your Lambda function alias.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Description of the alias.
	Description pulumi.StringOutput `pulumi:"description"`

	// The function ARN of the Lambda function for which you want to create an alias.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`

	// Lambda function version for which you are creating the alias. Pattern: `(\$LATEST|[0-9]+)`.
	FunctionVersion pulumi.StringOutput `pulumi:"functionVersion"`

	// The ARN to be used for invoking Lambda Function from API Gateway - to be used in [`apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`
	InvokeArn pulumi.StringOutput `pulumi:"invokeArn"`

	// Name for the alias you are creating. Pattern: `(?!^[0-9]+$)([a-zA-Z0-9-_]+)`
	Name pulumi.StringOutput `pulumi:"name"`

	// The Lambda alias' route configuration settings. Fields documented below
	RoutingConfig AliasRoutingConfigOutput `pulumi:"routingConfig"`
}

// NewAlias registers a new resource with the given unique name, arguments, and options.
func NewAlias(ctx *pulumi.Context,
	name string, args *AliasArgs, opts ...pulumi.ResourceOption) (*Alias, error) {
	if args == nil || args.FunctionName == nil {
		return nil, errors.New("missing required argument 'FunctionName'")
	}
	if args == nil || args.FunctionVersion == nil {
		return nil, errors.New("missing required argument 'FunctionVersion'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.FunctionName; i != nil { inputs["functionName"] = i.ToStringOutput() }
		if i := args.FunctionVersion; i != nil { inputs["functionVersion"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.RoutingConfig; i != nil { inputs["routingConfig"] = i.ToAliasRoutingConfigOutput() }
	}
	var resource Alias
	err := ctx.RegisterResource("aws:lambda/alias:Alias", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlias gets an existing Alias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AliasState, opts ...pulumi.ResourceOption) (*Alias, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.FunctionName; i != nil { inputs["functionName"] = i.ToStringOutput() }
		if i := state.FunctionVersion; i != nil { inputs["functionVersion"] = i.ToStringOutput() }
		if i := state.InvokeArn; i != nil { inputs["invokeArn"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RoutingConfig; i != nil { inputs["routingConfig"] = i.ToAliasRoutingConfigOutput() }
	}
	var resource Alias
	err := ctx.ReadResource("aws:lambda/alias:Alias", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alias resources.
type AliasState struct {
	// The Amazon Resource Name (ARN) identifying your Lambda function alias.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Description of the alias.
	Description pulumi.StringInput `pulumi:"description"`
	// The function ARN of the Lambda function for which you want to create an alias.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// Lambda function version for which you are creating the alias. Pattern: `(\$LATEST|[0-9]+)`.
	FunctionVersion pulumi.StringInput `pulumi:"functionVersion"`
	// The ARN to be used for invoking Lambda Function from API Gateway - to be used in [`apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`
	InvokeArn pulumi.StringInput `pulumi:"invokeArn"`
	// Name for the alias you are creating. Pattern: `(?!^[0-9]+$)([a-zA-Z0-9-_]+)`
	Name pulumi.StringInput `pulumi:"name"`
	// The Lambda alias' route configuration settings. Fields documented below
	RoutingConfig AliasRoutingConfigInput `pulumi:"routingConfig"`
}

// The set of arguments for constructing a Alias resource.
type AliasArgs struct {
	// Description of the alias.
	Description pulumi.StringInput `pulumi:"description"`
	// The function ARN of the Lambda function for which you want to create an alias.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// Lambda function version for which you are creating the alias. Pattern: `(\$LATEST|[0-9]+)`.
	FunctionVersion pulumi.StringInput `pulumi:"functionVersion"`
	// Name for the alias you are creating. Pattern: `(?!^[0-9]+$)([a-zA-Z0-9-_]+)`
	Name pulumi.StringInput `pulumi:"name"`
	// The Lambda alias' route configuration settings. Fields documented below
	RoutingConfig AliasRoutingConfigInput `pulumi:"routingConfig"`
}
type AliasRoutingConfig struct {
	// A map that defines the proportion of events that should be sent to different versions of a lambda function.
	AdditionalVersionWeights *map[string]float64 `pulumi:"additionalVersionWeights"`
}
var aliasRoutingConfigType = reflect.TypeOf((*AliasRoutingConfig)(nil)).Elem()

type AliasRoutingConfigInput interface {
	pulumi.Input

	ToAliasRoutingConfigOutput() AliasRoutingConfigOutput
	ToAliasRoutingConfigOutputWithContext(ctx context.Context) AliasRoutingConfigOutput
}

type AliasRoutingConfigArgs struct {
	// A map that defines the proportion of events that should be sent to different versions of a lambda function.
	AdditionalVersionWeights pulumi.Float64MapInput `pulumi:"additionalVersionWeights"`
}

func (AliasRoutingConfigArgs) ElementType() reflect.Type {
	return aliasRoutingConfigType
}

func (a AliasRoutingConfigArgs) ToAliasRoutingConfigOutput() AliasRoutingConfigOutput {
	return pulumi.ToOutput(a).(AliasRoutingConfigOutput)
}

func (a AliasRoutingConfigArgs) ToAliasRoutingConfigOutputWithContext(ctx context.Context) AliasRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AliasRoutingConfigOutput)
}

type AliasRoutingConfigOutput struct { *pulumi.OutputState }

// A map that defines the proportion of events that should be sent to different versions of a lambda function.
func (o AliasRoutingConfigOutput) AdditionalVersionWeights() pulumi.Float64MapOutput {
	return o.Apply(func(v AliasRoutingConfig) map[string]float64 {
		if v.AdditionalVersionWeights == nil { return *new(map[string]float64) } else { return *v.AdditionalVersionWeights }
	}).(pulumi.Float64MapOutput)
}

func (AliasRoutingConfigOutput) ElementType() reflect.Type {
	return aliasRoutingConfigType
}

func (o AliasRoutingConfigOutput) ToAliasRoutingConfigOutput() AliasRoutingConfigOutput {
	return o
}

func (o AliasRoutingConfigOutput) ToAliasRoutingConfigOutputWithContext(ctx context.Context) AliasRoutingConfigOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AliasRoutingConfigOutput{}) }

