// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_webhook.html.markdown.
type Webhook struct {
	pulumi.CustomResourceState

	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringOutput `pulumi:"branchFilter"`

	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups WebhookFilterGroupsArrayOutput `pulumi:"filterGroups"`

	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumi.StringOutput `pulumi:"payloadUrl"`

	// The name of the build project.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`

	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumi.StringOutput `pulumi:"secret"`

	// The URL to the webhook.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.BranchFilter; i != nil { inputs["branchFilter"] = i.ToStringOutput() }
		if i := args.FilterGroups; i != nil { inputs["filterGroups"] = i.ToWebhookFilterGroupsArrayOutput() }
		if i := args.ProjectName; i != nil { inputs["projectName"] = i.ToStringOutput() }
	}
	var resource Webhook
	err := ctx.RegisterResource("aws:codebuild/webhook:Webhook", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.BranchFilter; i != nil { inputs["branchFilter"] = i.ToStringOutput() }
		if i := state.FilterGroups; i != nil { inputs["filterGroups"] = i.ToWebhookFilterGroupsArrayOutput() }
		if i := state.PayloadUrl; i != nil { inputs["payloadUrl"] = i.ToStringOutput() }
		if i := state.ProjectName; i != nil { inputs["projectName"] = i.ToStringOutput() }
		if i := state.Secret; i != nil { inputs["secret"] = i.ToStringOutput() }
		if i := state.Url; i != nil { inputs["url"] = i.ToStringOutput() }
	}
	var resource Webhook
	err := ctx.ReadResource("aws:codebuild/webhook:Webhook", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type WebhookState struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringInput `pulumi:"branchFilter"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups WebhookFilterGroupsArrayInput `pulumi:"filterGroups"`
	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumi.StringInput `pulumi:"payloadUrl"`
	// The name of the build project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The URL to the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringInput `pulumi:"branchFilter"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups WebhookFilterGroupsArrayInput `pulumi:"filterGroups"`
	// The name of the build project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
}
type WebhookFilterGroups struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters *[]WebhookFilterGroupsFilters `pulumi:"filters"`
}
var webhookFilterGroupsType = reflect.TypeOf((*WebhookFilterGroups)(nil)).Elem()

type WebhookFilterGroupsInput interface {
	pulumi.Input

	ToWebhookFilterGroupsOutput() WebhookFilterGroupsOutput
	ToWebhookFilterGroupsOutputWithContext(ctx context.Context) WebhookFilterGroupsOutput
}

type WebhookFilterGroupsArgs struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters WebhookFilterGroupsFiltersArrayInput `pulumi:"filters"`
}

func (WebhookFilterGroupsArgs) ElementType() reflect.Type {
	return webhookFilterGroupsType
}

func (a WebhookFilterGroupsArgs) ToWebhookFilterGroupsOutput() WebhookFilterGroupsOutput {
	return pulumi.ToOutput(a).(WebhookFilterGroupsOutput)
}

func (a WebhookFilterGroupsArgs) ToWebhookFilterGroupsOutputWithContext(ctx context.Context) WebhookFilterGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookFilterGroupsOutput)
}

type WebhookFilterGroupsOutput struct { *pulumi.OutputState }

// A webhook filter for the group. Filter blocks are documented below.
func (o WebhookFilterGroupsOutput) Filters() WebhookFilterGroupsFiltersArrayOutput {
	return o.Apply(func(v WebhookFilterGroups) []WebhookFilterGroupsFilters {
		if v.Filters == nil { return *new([]WebhookFilterGroupsFilters) } else { return *v.Filters }
	}).(WebhookFilterGroupsFiltersArrayOutput)
}

func (WebhookFilterGroupsOutput) ElementType() reflect.Type {
	return webhookFilterGroupsType
}

func (o WebhookFilterGroupsOutput) ToWebhookFilterGroupsOutput() WebhookFilterGroupsOutput {
	return o
}

func (o WebhookFilterGroupsOutput) ToWebhookFilterGroupsOutputWithContext(ctx context.Context) WebhookFilterGroupsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(WebhookFilterGroupsOutput{}) }

var webhookFilterGroupsArrayType = reflect.TypeOf((*[]WebhookFilterGroups)(nil)).Elem()

type WebhookFilterGroupsArrayInput interface {
	pulumi.Input

	ToWebhookFilterGroupsArrayOutput() WebhookFilterGroupsArrayOutput
	ToWebhookFilterGroupsArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsArrayOutput
}

type WebhookFilterGroupsArrayArgs []WebhookFilterGroupsInput

func (WebhookFilterGroupsArrayArgs) ElementType() reflect.Type {
	return webhookFilterGroupsArrayType
}

func (a WebhookFilterGroupsArrayArgs) ToWebhookFilterGroupsArrayOutput() WebhookFilterGroupsArrayOutput {
	return pulumi.ToOutput(a).(WebhookFilterGroupsArrayOutput)
}

func (a WebhookFilterGroupsArrayArgs) ToWebhookFilterGroupsArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookFilterGroupsArrayOutput)
}

type WebhookFilterGroupsArrayOutput struct { *pulumi.OutputState }

func (o WebhookFilterGroupsArrayOutput) Index(i pulumi.IntInput) WebhookFilterGroupsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) WebhookFilterGroups {
		return vs[0].([]WebhookFilterGroups)[vs[1].(int)]
	}).(WebhookFilterGroupsOutput)
}

func (WebhookFilterGroupsArrayOutput) ElementType() reflect.Type {
	return webhookFilterGroupsArrayType
}

func (o WebhookFilterGroupsArrayOutput) ToWebhookFilterGroupsArrayOutput() WebhookFilterGroupsArrayOutput {
	return o
}

func (o WebhookFilterGroupsArrayOutput) ToWebhookFilterGroupsArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(WebhookFilterGroupsArrayOutput{}) }

type WebhookFilterGroupsFilters struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern *bool `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern string `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
	Type string `pulumi:"type"`
}
var webhookFilterGroupsFiltersType = reflect.TypeOf((*WebhookFilterGroupsFilters)(nil)).Elem()

type WebhookFilterGroupsFiltersInput interface {
	pulumi.Input

	ToWebhookFilterGroupsFiltersOutput() WebhookFilterGroupsFiltersOutput
	ToWebhookFilterGroupsFiltersOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersOutput
}

type WebhookFilterGroupsFiltersArgs struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern pulumi.BoolInput `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern pulumi.StringInput `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebhookFilterGroupsFiltersArgs) ElementType() reflect.Type {
	return webhookFilterGroupsFiltersType
}

func (a WebhookFilterGroupsFiltersArgs) ToWebhookFilterGroupsFiltersOutput() WebhookFilterGroupsFiltersOutput {
	return pulumi.ToOutput(a).(WebhookFilterGroupsFiltersOutput)
}

func (a WebhookFilterGroupsFiltersArgs) ToWebhookFilterGroupsFiltersOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookFilterGroupsFiltersOutput)
}

type WebhookFilterGroupsFiltersOutput struct { *pulumi.OutputState }

// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
func (o WebhookFilterGroupsFiltersOutput) ExcludeMatchedPattern() pulumi.BoolOutput {
	return o.Apply(func(v WebhookFilterGroupsFilters) bool {
		if v.ExcludeMatchedPattern == nil { return *new(bool) } else { return *v.ExcludeMatchedPattern }
	}).(pulumi.BoolOutput)
}

// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
func (o WebhookFilterGroupsFiltersOutput) Pattern() pulumi.StringOutput {
	return o.Apply(func(v WebhookFilterGroupsFilters) string {
		return v.Pattern
	}).(pulumi.StringOutput)
}

// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
func (o WebhookFilterGroupsFiltersOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v WebhookFilterGroupsFilters) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (WebhookFilterGroupsFiltersOutput) ElementType() reflect.Type {
	return webhookFilterGroupsFiltersType
}

func (o WebhookFilterGroupsFiltersOutput) ToWebhookFilterGroupsFiltersOutput() WebhookFilterGroupsFiltersOutput {
	return o
}

func (o WebhookFilterGroupsFiltersOutput) ToWebhookFilterGroupsFiltersOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(WebhookFilterGroupsFiltersOutput{}) }

var webhookFilterGroupsFiltersArrayType = reflect.TypeOf((*[]WebhookFilterGroupsFilters)(nil)).Elem()

type WebhookFilterGroupsFiltersArrayInput interface {
	pulumi.Input

	ToWebhookFilterGroupsFiltersArrayOutput() WebhookFilterGroupsFiltersArrayOutput
	ToWebhookFilterGroupsFiltersArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersArrayOutput
}

type WebhookFilterGroupsFiltersArrayArgs []WebhookFilterGroupsFiltersInput

func (WebhookFilterGroupsFiltersArrayArgs) ElementType() reflect.Type {
	return webhookFilterGroupsFiltersArrayType
}

func (a WebhookFilterGroupsFiltersArrayArgs) ToWebhookFilterGroupsFiltersArrayOutput() WebhookFilterGroupsFiltersArrayOutput {
	return pulumi.ToOutput(a).(WebhookFilterGroupsFiltersArrayOutput)
}

func (a WebhookFilterGroupsFiltersArrayArgs) ToWebhookFilterGroupsFiltersArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(WebhookFilterGroupsFiltersArrayOutput)
}

type WebhookFilterGroupsFiltersArrayOutput struct { *pulumi.OutputState }

func (o WebhookFilterGroupsFiltersArrayOutput) Index(i pulumi.IntInput) WebhookFilterGroupsFiltersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) WebhookFilterGroupsFilters {
		return vs[0].([]WebhookFilterGroupsFilters)[vs[1].(int)]
	}).(WebhookFilterGroupsFiltersOutput)
}

func (WebhookFilterGroupsFiltersArrayOutput) ElementType() reflect.Type {
	return webhookFilterGroupsFiltersArrayType
}

func (o WebhookFilterGroupsFiltersArrayOutput) ToWebhookFilterGroupsFiltersArrayOutput() WebhookFilterGroupsFiltersArrayOutput {
	return o
}

func (o WebhookFilterGroupsFiltersArrayOutput) ToWebhookFilterGroupsFiltersArrayOutputWithContext(ctx context.Context) WebhookFilterGroupsFiltersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(WebhookFilterGroupsFiltersArrayOutput{}) }

