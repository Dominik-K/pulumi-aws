// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks stack resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_stack.html.markdown.
type Stack struct {
	pulumi.CustomResourceState

	// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`

	Arn pulumi.StringOutput `pulumi:"arn"`

	// If `manageBerkshelf` is enabled, the version of Berkshelf to use.
	BerkshelfVersion pulumi.StringOutput `pulumi:"berkshelfVersion"`

	// Color to paint next to the stack's resources in the OpsWorks console.
	Color pulumi.StringOutput `pulumi:"color"`

	// Name of the configuration manager to use. Defaults to "Chef".
	ConfigurationManagerName pulumi.StringOutput `pulumi:"configurationManagerName"`

	// Version of the configuration manager to use. Defaults to "11.4".
	ConfigurationManagerVersion pulumi.StringOutput `pulumi:"configurationManagerVersion"`

	// When `useCustomCookbooks` is set, provide this sub-object as
	// described below.
	CustomCookbooksSources StackCustomCookbooksSourcesArrayOutput `pulumi:"customCookbooksSources"`

	// Custom JSON attributes to apply to the entire stack.
	CustomJson pulumi.StringOutput `pulumi:"customJson"`

	// Name of the availability zone where instances will be created
	// by default. This is required unless you set `vpcId`.
	DefaultAvailabilityZone pulumi.StringOutput `pulumi:"defaultAvailabilityZone"`

	// The ARN of an IAM Instance Profile that created instances
	// will have by default.
	DefaultInstanceProfileArn pulumi.StringOutput `pulumi:"defaultInstanceProfileArn"`

	// Name of OS that will be installed on instances by default.
	DefaultOs pulumi.StringOutput `pulumi:"defaultOs"`

	// Name of the type of root device instances will have by default.
	DefaultRootDeviceType pulumi.StringOutput `pulumi:"defaultRootDeviceType"`

	// Name of the SSH keypair that instances will have by default.
	DefaultSshKeyName pulumi.StringOutput `pulumi:"defaultSshKeyName"`

	// Id of the subnet in which instances will be created by default. Mandatory
	// if `vpcId` is set, and forbidden if it isn't.
	DefaultSubnetId pulumi.StringOutput `pulumi:"defaultSubnetId"`

	// Keyword representing the naming scheme that will be used for instance hostnames
	// within this stack.
	HostnameTheme pulumi.StringOutput `pulumi:"hostnameTheme"`

	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	ManageBerkshelf pulumi.BoolOutput `pulumi:"manageBerkshelf"`

	// The name of the stack.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the region where the stack will exist.
	Region pulumi.StringOutput `pulumi:"region"`

	// The ARN of an IAM role that the OpsWorks service will act as.
	ServiceRoleArn pulumi.StringOutput `pulumi:"serviceRoleArn"`

	StackEndpoint pulumi.StringOutput `pulumi:"stackEndpoint"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Boolean value controlling whether the custom cookbook settings are
	// enabled.
	UseCustomCookbooks pulumi.BoolOutput `pulumi:"useCustomCookbooks"`

	// Boolean value controlling whether the standard OpsWorks
	// security groups apply to created instances.
	UseOpsworksSecurityGroups pulumi.BoolOutput `pulumi:"useOpsworksSecurityGroups"`

	// The id of the VPC that this stack belongs to.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil || args.DefaultInstanceProfileArn == nil {
		return nil, errors.New("missing required argument 'DefaultInstanceProfileArn'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil || args.ServiceRoleArn == nil {
		return nil, errors.New("missing required argument 'ServiceRoleArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AgentVersion; i != nil { inputs["agentVersion"] = i.ToStringOutput() }
		if i := args.BerkshelfVersion; i != nil { inputs["berkshelfVersion"] = i.ToStringOutput() }
		if i := args.Color; i != nil { inputs["color"] = i.ToStringOutput() }
		if i := args.ConfigurationManagerName; i != nil { inputs["configurationManagerName"] = i.ToStringOutput() }
		if i := args.ConfigurationManagerVersion; i != nil { inputs["configurationManagerVersion"] = i.ToStringOutput() }
		if i := args.CustomCookbooksSources; i != nil { inputs["customCookbooksSources"] = i.ToStackCustomCookbooksSourcesArrayOutput() }
		if i := args.CustomJson; i != nil { inputs["customJson"] = i.ToStringOutput() }
		if i := args.DefaultAvailabilityZone; i != nil { inputs["defaultAvailabilityZone"] = i.ToStringOutput() }
		if i := args.DefaultInstanceProfileArn; i != nil { inputs["defaultInstanceProfileArn"] = i.ToStringOutput() }
		if i := args.DefaultOs; i != nil { inputs["defaultOs"] = i.ToStringOutput() }
		if i := args.DefaultRootDeviceType; i != nil { inputs["defaultRootDeviceType"] = i.ToStringOutput() }
		if i := args.DefaultSshKeyName; i != nil { inputs["defaultSshKeyName"] = i.ToStringOutput() }
		if i := args.DefaultSubnetId; i != nil { inputs["defaultSubnetId"] = i.ToStringOutput() }
		if i := args.HostnameTheme; i != nil { inputs["hostnameTheme"] = i.ToStringOutput() }
		if i := args.ManageBerkshelf; i != nil { inputs["manageBerkshelf"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Region; i != nil { inputs["region"] = i.ToStringOutput() }
		if i := args.ServiceRoleArn; i != nil { inputs["serviceRoleArn"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.UseCustomCookbooks; i != nil { inputs["useCustomCookbooks"] = i.ToBoolOutput() }
		if i := args.UseOpsworksSecurityGroups; i != nil { inputs["useOpsworksSecurityGroups"] = i.ToBoolOutput() }
		if i := args.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource Stack
	err := ctx.RegisterResource("aws:opsworks/stack:Stack", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AgentVersion; i != nil { inputs["agentVersion"] = i.ToStringOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.BerkshelfVersion; i != nil { inputs["berkshelfVersion"] = i.ToStringOutput() }
		if i := state.Color; i != nil { inputs["color"] = i.ToStringOutput() }
		if i := state.ConfigurationManagerName; i != nil { inputs["configurationManagerName"] = i.ToStringOutput() }
		if i := state.ConfigurationManagerVersion; i != nil { inputs["configurationManagerVersion"] = i.ToStringOutput() }
		if i := state.CustomCookbooksSources; i != nil { inputs["customCookbooksSources"] = i.ToStackCustomCookbooksSourcesArrayOutput() }
		if i := state.CustomJson; i != nil { inputs["customJson"] = i.ToStringOutput() }
		if i := state.DefaultAvailabilityZone; i != nil { inputs["defaultAvailabilityZone"] = i.ToStringOutput() }
		if i := state.DefaultInstanceProfileArn; i != nil { inputs["defaultInstanceProfileArn"] = i.ToStringOutput() }
		if i := state.DefaultOs; i != nil { inputs["defaultOs"] = i.ToStringOutput() }
		if i := state.DefaultRootDeviceType; i != nil { inputs["defaultRootDeviceType"] = i.ToStringOutput() }
		if i := state.DefaultSshKeyName; i != nil { inputs["defaultSshKeyName"] = i.ToStringOutput() }
		if i := state.DefaultSubnetId; i != nil { inputs["defaultSubnetId"] = i.ToStringOutput() }
		if i := state.HostnameTheme; i != nil { inputs["hostnameTheme"] = i.ToStringOutput() }
		if i := state.ManageBerkshelf; i != nil { inputs["manageBerkshelf"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Region; i != nil { inputs["region"] = i.ToStringOutput() }
		if i := state.ServiceRoleArn; i != nil { inputs["serviceRoleArn"] = i.ToStringOutput() }
		if i := state.StackEndpoint; i != nil { inputs["stackEndpoint"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UseCustomCookbooks; i != nil { inputs["useCustomCookbooks"] = i.ToBoolOutput() }
		if i := state.UseOpsworksSecurityGroups; i != nil { inputs["useOpsworksSecurityGroups"] = i.ToBoolOutput() }
		if i := state.VpcId; i != nil { inputs["vpcId"] = i.ToStringOutput() }
	}
	var resource Stack
	err := ctx.ReadResource("aws:opsworks/stack:Stack", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type StackState struct {
	// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
	AgentVersion pulumi.StringInput `pulumi:"agentVersion"`
	Arn pulumi.StringInput `pulumi:"arn"`
	// If `manageBerkshelf` is enabled, the version of Berkshelf to use.
	BerkshelfVersion pulumi.StringInput `pulumi:"berkshelfVersion"`
	// Color to paint next to the stack's resources in the OpsWorks console.
	Color pulumi.StringInput `pulumi:"color"`
	// Name of the configuration manager to use. Defaults to "Chef".
	ConfigurationManagerName pulumi.StringInput `pulumi:"configurationManagerName"`
	// Version of the configuration manager to use. Defaults to "11.4".
	ConfigurationManagerVersion pulumi.StringInput `pulumi:"configurationManagerVersion"`
	// When `useCustomCookbooks` is set, provide this sub-object as
	// described below.
	CustomCookbooksSources StackCustomCookbooksSourcesArrayInput `pulumi:"customCookbooksSources"`
	// Custom JSON attributes to apply to the entire stack.
	CustomJson pulumi.StringInput `pulumi:"customJson"`
	// Name of the availability zone where instances will be created
	// by default. This is required unless you set `vpcId`.
	DefaultAvailabilityZone pulumi.StringInput `pulumi:"defaultAvailabilityZone"`
	// The ARN of an IAM Instance Profile that created instances
	// will have by default.
	DefaultInstanceProfileArn pulumi.StringInput `pulumi:"defaultInstanceProfileArn"`
	// Name of OS that will be installed on instances by default.
	DefaultOs pulumi.StringInput `pulumi:"defaultOs"`
	// Name of the type of root device instances will have by default.
	DefaultRootDeviceType pulumi.StringInput `pulumi:"defaultRootDeviceType"`
	// Name of the SSH keypair that instances will have by default.
	DefaultSshKeyName pulumi.StringInput `pulumi:"defaultSshKeyName"`
	// Id of the subnet in which instances will be created by default. Mandatory
	// if `vpcId` is set, and forbidden if it isn't.
	DefaultSubnetId pulumi.StringInput `pulumi:"defaultSubnetId"`
	// Keyword representing the naming scheme that will be used for instance hostnames
	// within this stack.
	HostnameTheme pulumi.StringInput `pulumi:"hostnameTheme"`
	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	ManageBerkshelf pulumi.BoolInput `pulumi:"manageBerkshelf"`
	// The name of the stack.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the region where the stack will exist.
	Region pulumi.StringInput `pulumi:"region"`
	// The ARN of an IAM role that the OpsWorks service will act as.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	StackEndpoint pulumi.StringInput `pulumi:"stackEndpoint"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Boolean value controlling whether the custom cookbook settings are
	// enabled.
	UseCustomCookbooks pulumi.BoolInput `pulumi:"useCustomCookbooks"`
	// Boolean value controlling whether the standard OpsWorks
	// security groups apply to created instances.
	UseOpsworksSecurityGroups pulumi.BoolInput `pulumi:"useOpsworksSecurityGroups"`
	// The id of the VPC that this stack belongs to.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
	AgentVersion pulumi.StringInput `pulumi:"agentVersion"`
	// If `manageBerkshelf` is enabled, the version of Berkshelf to use.
	BerkshelfVersion pulumi.StringInput `pulumi:"berkshelfVersion"`
	// Color to paint next to the stack's resources in the OpsWorks console.
	Color pulumi.StringInput `pulumi:"color"`
	// Name of the configuration manager to use. Defaults to "Chef".
	ConfigurationManagerName pulumi.StringInput `pulumi:"configurationManagerName"`
	// Version of the configuration manager to use. Defaults to "11.4".
	ConfigurationManagerVersion pulumi.StringInput `pulumi:"configurationManagerVersion"`
	// When `useCustomCookbooks` is set, provide this sub-object as
	// described below.
	CustomCookbooksSources StackCustomCookbooksSourcesArrayInput `pulumi:"customCookbooksSources"`
	// Custom JSON attributes to apply to the entire stack.
	CustomJson pulumi.StringInput `pulumi:"customJson"`
	// Name of the availability zone where instances will be created
	// by default. This is required unless you set `vpcId`.
	DefaultAvailabilityZone pulumi.StringInput `pulumi:"defaultAvailabilityZone"`
	// The ARN of an IAM Instance Profile that created instances
	// will have by default.
	DefaultInstanceProfileArn pulumi.StringInput `pulumi:"defaultInstanceProfileArn"`
	// Name of OS that will be installed on instances by default.
	DefaultOs pulumi.StringInput `pulumi:"defaultOs"`
	// Name of the type of root device instances will have by default.
	DefaultRootDeviceType pulumi.StringInput `pulumi:"defaultRootDeviceType"`
	// Name of the SSH keypair that instances will have by default.
	DefaultSshKeyName pulumi.StringInput `pulumi:"defaultSshKeyName"`
	// Id of the subnet in which instances will be created by default. Mandatory
	// if `vpcId` is set, and forbidden if it isn't.
	DefaultSubnetId pulumi.StringInput `pulumi:"defaultSubnetId"`
	// Keyword representing the naming scheme that will be used for instance hostnames
	// within this stack.
	HostnameTheme pulumi.StringInput `pulumi:"hostnameTheme"`
	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	ManageBerkshelf pulumi.BoolInput `pulumi:"manageBerkshelf"`
	// The name of the stack.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the region where the stack will exist.
	Region pulumi.StringInput `pulumi:"region"`
	// The ARN of an IAM role that the OpsWorks service will act as.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Boolean value controlling whether the custom cookbook settings are
	// enabled.
	UseCustomCookbooks pulumi.BoolInput `pulumi:"useCustomCookbooks"`
	// Boolean value controlling whether the standard OpsWorks
	// security groups apply to created instances.
	UseOpsworksSecurityGroups pulumi.BoolInput `pulumi:"useOpsworksSecurityGroups"`
	// The id of the VPC that this stack belongs to.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}
type StackCustomCookbooksSources struct {
	Password *string `pulumi:"password"`
	Revision *string `pulumi:"revision"`
	SshKey *string `pulumi:"sshKey"`
	Type string `pulumi:"type"`
	Url string `pulumi:"url"`
	Username *string `pulumi:"username"`
}
var stackCustomCookbooksSourcesType = reflect.TypeOf((*StackCustomCookbooksSources)(nil)).Elem()

type StackCustomCookbooksSourcesInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourcesOutput() StackCustomCookbooksSourcesOutput
	ToStackCustomCookbooksSourcesOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesOutput
}

type StackCustomCookbooksSourcesArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Revision pulumi.StringInput `pulumi:"revision"`
	SshKey pulumi.StringInput `pulumi:"sshKey"`
	Type pulumi.StringInput `pulumi:"type"`
	Url pulumi.StringInput `pulumi:"url"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (StackCustomCookbooksSourcesArgs) ElementType() reflect.Type {
	return stackCustomCookbooksSourcesType
}

func (a StackCustomCookbooksSourcesArgs) ToStackCustomCookbooksSourcesOutput() StackCustomCookbooksSourcesOutput {
	return pulumi.ToOutput(a).(StackCustomCookbooksSourcesOutput)
}

func (a StackCustomCookbooksSourcesArgs) ToStackCustomCookbooksSourcesOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StackCustomCookbooksSourcesOutput)
}

type StackCustomCookbooksSourcesOutput struct { *pulumi.OutputState }

func (o StackCustomCookbooksSourcesOutput) Password() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		if v.Password == nil { return *new(string) } else { return *v.Password }
	}).(pulumi.StringOutput)
}

func (o StackCustomCookbooksSourcesOutput) Revision() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		if v.Revision == nil { return *new(string) } else { return *v.Revision }
	}).(pulumi.StringOutput)
}

func (o StackCustomCookbooksSourcesOutput) SshKey() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		if v.SshKey == nil { return *new(string) } else { return *v.SshKey }
	}).(pulumi.StringOutput)
}

func (o StackCustomCookbooksSourcesOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (o StackCustomCookbooksSourcesOutput) Url() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		return v.Url
	}).(pulumi.StringOutput)
}

func (o StackCustomCookbooksSourcesOutput) Username() pulumi.StringOutput {
	return o.Apply(func(v StackCustomCookbooksSources) string {
		if v.Username == nil { return *new(string) } else { return *v.Username }
	}).(pulumi.StringOutput)
}

func (StackCustomCookbooksSourcesOutput) ElementType() reflect.Type {
	return stackCustomCookbooksSourcesType
}

func (o StackCustomCookbooksSourcesOutput) ToStackCustomCookbooksSourcesOutput() StackCustomCookbooksSourcesOutput {
	return o
}

func (o StackCustomCookbooksSourcesOutput) ToStackCustomCookbooksSourcesOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(StackCustomCookbooksSourcesOutput{}) }

var stackCustomCookbooksSourcesArrayType = reflect.TypeOf((*[]StackCustomCookbooksSources)(nil)).Elem()

type StackCustomCookbooksSourcesArrayInput interface {
	pulumi.Input

	ToStackCustomCookbooksSourcesArrayOutput() StackCustomCookbooksSourcesArrayOutput
	ToStackCustomCookbooksSourcesArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesArrayOutput
}

type StackCustomCookbooksSourcesArrayArgs []StackCustomCookbooksSourcesInput

func (StackCustomCookbooksSourcesArrayArgs) ElementType() reflect.Type {
	return stackCustomCookbooksSourcesArrayType
}

func (a StackCustomCookbooksSourcesArrayArgs) ToStackCustomCookbooksSourcesArrayOutput() StackCustomCookbooksSourcesArrayOutput {
	return pulumi.ToOutput(a).(StackCustomCookbooksSourcesArrayOutput)
}

func (a StackCustomCookbooksSourcesArrayArgs) ToStackCustomCookbooksSourcesArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StackCustomCookbooksSourcesArrayOutput)
}

type StackCustomCookbooksSourcesArrayOutput struct { *pulumi.OutputState }

func (o StackCustomCookbooksSourcesArrayOutput) Index(i pulumi.IntInput) StackCustomCookbooksSourcesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) StackCustomCookbooksSources {
		return vs[0].([]StackCustomCookbooksSources)[vs[1].(int)]
	}).(StackCustomCookbooksSourcesOutput)
}

func (StackCustomCookbooksSourcesArrayOutput) ElementType() reflect.Type {
	return stackCustomCookbooksSourcesArrayType
}

func (o StackCustomCookbooksSourcesArrayOutput) ToStackCustomCookbooksSourcesArrayOutput() StackCustomCookbooksSourcesArrayOutput {
	return o
}

func (o StackCustomCookbooksSourcesArrayOutput) ToStackCustomCookbooksSourcesArrayOutputWithContext(ctx context.Context) StackCustomCookbooksSourcesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(StackCustomCookbooksSourcesArrayOutput{}) }

