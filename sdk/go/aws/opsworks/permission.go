// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks permission resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_permission.html.markdown.
type Permission struct {
	pulumi.CustomResourceState

	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumi.BoolOutput `pulumi:"allowSsh"`

	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumi.BoolOutput `pulumi:"allowSudo"`

	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumi.StringOutput `pulumi:"level"`

	// The stack to set the permissions for
	StackId pulumi.StringOutput `pulumi:"stackId"`

	// The user's IAM ARN to set permissions for
	UserArn pulumi.StringOutput `pulumi:"userArn"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil || args.UserArn == nil {
		return nil, errors.New("missing required argument 'UserArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AllowSsh; i != nil { inputs["allowSsh"] = i.ToBoolOutput() }
		if i := args.AllowSudo; i != nil { inputs["allowSudo"] = i.ToBoolOutput() }
		if i := args.Level; i != nil { inputs["level"] = i.ToStringOutput() }
		if i := args.StackId; i != nil { inputs["stackId"] = i.ToStringOutput() }
		if i := args.UserArn; i != nil { inputs["userArn"] = i.ToStringOutput() }
	}
	var resource Permission
	err := ctx.RegisterResource("aws:opsworks/permission:Permission", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AllowSsh; i != nil { inputs["allowSsh"] = i.ToBoolOutput() }
		if i := state.AllowSudo; i != nil { inputs["allowSudo"] = i.ToBoolOutput() }
		if i := state.Level; i != nil { inputs["level"] = i.ToStringOutput() }
		if i := state.StackId; i != nil { inputs["stackId"] = i.ToStringOutput() }
		if i := state.UserArn; i != nil { inputs["userArn"] = i.ToStringOutput() }
	}
	var resource Permission
	err := ctx.ReadResource("aws:opsworks/permission:Permission", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type PermissionState struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumi.BoolInput `pulumi:"allowSsh"`
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumi.BoolInput `pulumi:"allowSudo"`
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumi.StringInput `pulumi:"level"`
	// The stack to set the permissions for
	StackId pulumi.StringInput `pulumi:"stackId"`
	// The user's IAM ARN to set permissions for
	UserArn pulumi.StringInput `pulumi:"userArn"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh pulumi.BoolInput `pulumi:"allowSsh"`
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo pulumi.BoolInput `pulumi:"allowSudo"`
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
	Level pulumi.StringInput `pulumi:"level"`
	// The stack to set the permissions for
	StackId pulumi.StringInput `pulumi:"stackId"`
	// The user's IAM ARN to set permissions for
	UserArn pulumi.StringInput `pulumi:"userArn"`
}
