// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks static web server layer resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_static_web_layer.html.markdown.
type StaticWebLayer struct {
	pulumi.CustomResourceState

	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolOutput `pulumi:"autoAssignElasticIps"`

	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolOutput `pulumi:"autoAssignPublicIps"`

	// Whether to enable auto-healing for the layer.
	AutoHealing pulumi.BoolOutput `pulumi:"autoHealing"`

	CustomConfigureRecipes pulumi.StringArrayOutput `pulumi:"customConfigureRecipes"`

	CustomDeployRecipes pulumi.StringArrayOutput `pulumi:"customDeployRecipes"`

	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringOutput `pulumi:"customInstanceProfileArn"`

	CustomJson pulumi.StringOutput `pulumi:"customJson"`

	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayOutput `pulumi:"customSecurityGroupIds"`

	CustomSetupRecipes pulumi.StringArrayOutput `pulumi:"customSetupRecipes"`

	CustomShutdownRecipes pulumi.StringArrayOutput `pulumi:"customShutdownRecipes"`

	CustomUndeployRecipes pulumi.StringArrayOutput `pulumi:"customUndeployRecipes"`

	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolOutput `pulumi:"drainElbOnShutdown"`

	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes StaticWebLayerEbsVolumesArrayOutput `pulumi:"ebsVolumes"`

	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringOutput `pulumi:"elasticLoadBalancer"`

	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolOutput `pulumi:"installUpdatesOnBoot"`

	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntOutput `pulumi:"instanceShutdownTimeout"`

	// A human-readable name for the layer.
	Name pulumi.StringOutput `pulumi:"name"`

	// The id of the stack the layer will belong to.
	StackId pulumi.StringOutput `pulumi:"stackId"`

	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayOutput `pulumi:"systemPackages"`

	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolOutput `pulumi:"useEbsOptimizedInstances"`
}

// NewStaticWebLayer registers a new resource with the given unique name, arguments, and options.
func NewStaticWebLayer(ctx *pulumi.Context,
	name string, args *StaticWebLayerArgs, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	if args == nil || args.StackId == nil {
		return nil, errors.New("missing required argument 'StackId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoAssignElasticIps; i != nil { inputs["autoAssignElasticIps"] = i.ToBoolOutput() }
		if i := args.AutoAssignPublicIps; i != nil { inputs["autoAssignPublicIps"] = i.ToBoolOutput() }
		if i := args.AutoHealing; i != nil { inputs["autoHealing"] = i.ToBoolOutput() }
		if i := args.CustomConfigureRecipes; i != nil { inputs["customConfigureRecipes"] = i.ToStringArrayOutput() }
		if i := args.CustomDeployRecipes; i != nil { inputs["customDeployRecipes"] = i.ToStringArrayOutput() }
		if i := args.CustomInstanceProfileArn; i != nil { inputs["customInstanceProfileArn"] = i.ToStringOutput() }
		if i := args.CustomJson; i != nil { inputs["customJson"] = i.ToStringOutput() }
		if i := args.CustomSecurityGroupIds; i != nil { inputs["customSecurityGroupIds"] = i.ToStringArrayOutput() }
		if i := args.CustomSetupRecipes; i != nil { inputs["customSetupRecipes"] = i.ToStringArrayOutput() }
		if i := args.CustomShutdownRecipes; i != nil { inputs["customShutdownRecipes"] = i.ToStringArrayOutput() }
		if i := args.CustomUndeployRecipes; i != nil { inputs["customUndeployRecipes"] = i.ToStringArrayOutput() }
		if i := args.DrainElbOnShutdown; i != nil { inputs["drainElbOnShutdown"] = i.ToBoolOutput() }
		if i := args.EbsVolumes; i != nil { inputs["ebsVolumes"] = i.ToStaticWebLayerEbsVolumesArrayOutput() }
		if i := args.ElasticLoadBalancer; i != nil { inputs["elasticLoadBalancer"] = i.ToStringOutput() }
		if i := args.InstallUpdatesOnBoot; i != nil { inputs["installUpdatesOnBoot"] = i.ToBoolOutput() }
		if i := args.InstanceShutdownTimeout; i != nil { inputs["instanceShutdownTimeout"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.StackId; i != nil { inputs["stackId"] = i.ToStringOutput() }
		if i := args.SystemPackages; i != nil { inputs["systemPackages"] = i.ToStringArrayOutput() }
		if i := args.UseEbsOptimizedInstances; i != nil { inputs["useEbsOptimizedInstances"] = i.ToBoolOutput() }
	}
	var resource StaticWebLayer
	err := ctx.RegisterResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticWebLayer gets an existing StaticWebLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticWebLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticWebLayerState, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoAssignElasticIps; i != nil { inputs["autoAssignElasticIps"] = i.ToBoolOutput() }
		if i := state.AutoAssignPublicIps; i != nil { inputs["autoAssignPublicIps"] = i.ToBoolOutput() }
		if i := state.AutoHealing; i != nil { inputs["autoHealing"] = i.ToBoolOutput() }
		if i := state.CustomConfigureRecipes; i != nil { inputs["customConfigureRecipes"] = i.ToStringArrayOutput() }
		if i := state.CustomDeployRecipes; i != nil { inputs["customDeployRecipes"] = i.ToStringArrayOutput() }
		if i := state.CustomInstanceProfileArn; i != nil { inputs["customInstanceProfileArn"] = i.ToStringOutput() }
		if i := state.CustomJson; i != nil { inputs["customJson"] = i.ToStringOutput() }
		if i := state.CustomSecurityGroupIds; i != nil { inputs["customSecurityGroupIds"] = i.ToStringArrayOutput() }
		if i := state.CustomSetupRecipes; i != nil { inputs["customSetupRecipes"] = i.ToStringArrayOutput() }
		if i := state.CustomShutdownRecipes; i != nil { inputs["customShutdownRecipes"] = i.ToStringArrayOutput() }
		if i := state.CustomUndeployRecipes; i != nil { inputs["customUndeployRecipes"] = i.ToStringArrayOutput() }
		if i := state.DrainElbOnShutdown; i != nil { inputs["drainElbOnShutdown"] = i.ToBoolOutput() }
		if i := state.EbsVolumes; i != nil { inputs["ebsVolumes"] = i.ToStaticWebLayerEbsVolumesArrayOutput() }
		if i := state.ElasticLoadBalancer; i != nil { inputs["elasticLoadBalancer"] = i.ToStringOutput() }
		if i := state.InstallUpdatesOnBoot; i != nil { inputs["installUpdatesOnBoot"] = i.ToBoolOutput() }
		if i := state.InstanceShutdownTimeout; i != nil { inputs["instanceShutdownTimeout"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.StackId; i != nil { inputs["stackId"] = i.ToStringOutput() }
		if i := state.SystemPackages; i != nil { inputs["systemPackages"] = i.ToStringArrayOutput() }
		if i := state.UseEbsOptimizedInstances; i != nil { inputs["useEbsOptimizedInstances"] = i.ToBoolOutput() }
	}
	var resource StaticWebLayer
	err := ctx.ReadResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticWebLayer resources.
type StaticWebLayerState struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolInput `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolInput `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing pulumi.BoolInput `pulumi:"autoHealing"`
	CustomConfigureRecipes pulumi.StringArrayInput `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes pulumi.StringArrayInput `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringInput `pulumi:"customInstanceProfileArn"`
	CustomJson pulumi.StringInput `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayInput `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes pulumi.StringArrayInput `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes pulumi.StringArrayInput `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes pulumi.StringArrayInput `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolInput `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes StaticWebLayerEbsVolumesArrayInput `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringInput `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolInput `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntInput `pulumi:"instanceShutdownTimeout"`
	// A human-readable name for the layer.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of the stack the layer will belong to.
	StackId pulumi.StringInput `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayInput `pulumi:"systemPackages"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolInput `pulumi:"useEbsOptimizedInstances"`
}

// The set of arguments for constructing a StaticWebLayer resource.
type StaticWebLayerArgs struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolInput `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolInput `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing pulumi.BoolInput `pulumi:"autoHealing"`
	CustomConfigureRecipes pulumi.StringArrayInput `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes pulumi.StringArrayInput `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringInput `pulumi:"customInstanceProfileArn"`
	CustomJson pulumi.StringInput `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayInput `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes pulumi.StringArrayInput `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes pulumi.StringArrayInput `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes pulumi.StringArrayInput `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolInput `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes StaticWebLayerEbsVolumesArrayInput `pulumi:"ebsVolumes"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringInput `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolInput `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntInput `pulumi:"instanceShutdownTimeout"`
	// A human-readable name for the layer.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of the stack the layer will belong to.
	StackId pulumi.StringInput `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayInput `pulumi:"systemPackages"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolInput `pulumi:"useEbsOptimizedInstances"`
}
type StaticWebLayerEbsVolumes struct {
	Iops *int `pulumi:"iops"`
	MountPoint string `pulumi:"mountPoint"`
	NumberOfDisks int `pulumi:"numberOfDisks"`
	RaidLevel *string `pulumi:"raidLevel"`
	Size int `pulumi:"size"`
	Type *string `pulumi:"type"`
}
var staticWebLayerEbsVolumesType = reflect.TypeOf((*StaticWebLayerEbsVolumes)(nil)).Elem()

type StaticWebLayerEbsVolumesInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumesOutput() StaticWebLayerEbsVolumesOutput
	ToStaticWebLayerEbsVolumesOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesOutput
}

type StaticWebLayerEbsVolumesArgs struct {
	Iops pulumi.IntInput `pulumi:"iops"`
	MountPoint pulumi.StringInput `pulumi:"mountPoint"`
	NumberOfDisks pulumi.IntInput `pulumi:"numberOfDisks"`
	RaidLevel pulumi.StringInput `pulumi:"raidLevel"`
	Size pulumi.IntInput `pulumi:"size"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (StaticWebLayerEbsVolumesArgs) ElementType() reflect.Type {
	return staticWebLayerEbsVolumesType
}

func (a StaticWebLayerEbsVolumesArgs) ToStaticWebLayerEbsVolumesOutput() StaticWebLayerEbsVolumesOutput {
	return pulumi.ToOutput(a).(StaticWebLayerEbsVolumesOutput)
}

func (a StaticWebLayerEbsVolumesArgs) ToStaticWebLayerEbsVolumesOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StaticWebLayerEbsVolumesOutput)
}

type StaticWebLayerEbsVolumesOutput struct { *pulumi.OutputState }

func (o StaticWebLayerEbsVolumesOutput) Iops() pulumi.IntOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) int {
		if v.Iops == nil { return *new(int) } else { return *v.Iops }
	}).(pulumi.IntOutput)
}

func (o StaticWebLayerEbsVolumesOutput) MountPoint() pulumi.StringOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) string {
		return v.MountPoint
	}).(pulumi.StringOutput)
}

func (o StaticWebLayerEbsVolumesOutput) NumberOfDisks() pulumi.IntOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) int {
		return v.NumberOfDisks
	}).(pulumi.IntOutput)
}

func (o StaticWebLayerEbsVolumesOutput) RaidLevel() pulumi.StringOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) string {
		if v.RaidLevel == nil { return *new(string) } else { return *v.RaidLevel }
	}).(pulumi.StringOutput)
}

func (o StaticWebLayerEbsVolumesOutput) Size() pulumi.IntOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) int {
		return v.Size
	}).(pulumi.IntOutput)
}

func (o StaticWebLayerEbsVolumesOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v StaticWebLayerEbsVolumes) string {
		if v.Type == nil { return *new(string) } else { return *v.Type }
	}).(pulumi.StringOutput)
}

func (StaticWebLayerEbsVolumesOutput) ElementType() reflect.Type {
	return staticWebLayerEbsVolumesType
}

func (o StaticWebLayerEbsVolumesOutput) ToStaticWebLayerEbsVolumesOutput() StaticWebLayerEbsVolumesOutput {
	return o
}

func (o StaticWebLayerEbsVolumesOutput) ToStaticWebLayerEbsVolumesOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(StaticWebLayerEbsVolumesOutput{}) }

var staticWebLayerEbsVolumesArrayType = reflect.TypeOf((*[]StaticWebLayerEbsVolumes)(nil)).Elem()

type StaticWebLayerEbsVolumesArrayInput interface {
	pulumi.Input

	ToStaticWebLayerEbsVolumesArrayOutput() StaticWebLayerEbsVolumesArrayOutput
	ToStaticWebLayerEbsVolumesArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesArrayOutput
}

type StaticWebLayerEbsVolumesArrayArgs []StaticWebLayerEbsVolumesInput

func (StaticWebLayerEbsVolumesArrayArgs) ElementType() reflect.Type {
	return staticWebLayerEbsVolumesArrayType
}

func (a StaticWebLayerEbsVolumesArrayArgs) ToStaticWebLayerEbsVolumesArrayOutput() StaticWebLayerEbsVolumesArrayOutput {
	return pulumi.ToOutput(a).(StaticWebLayerEbsVolumesArrayOutput)
}

func (a StaticWebLayerEbsVolumesArrayArgs) ToStaticWebLayerEbsVolumesArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StaticWebLayerEbsVolumesArrayOutput)
}

type StaticWebLayerEbsVolumesArrayOutput struct { *pulumi.OutputState }

func (o StaticWebLayerEbsVolumesArrayOutput) Index(i pulumi.IntInput) StaticWebLayerEbsVolumesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) StaticWebLayerEbsVolumes {
		return vs[0].([]StaticWebLayerEbsVolumes)[vs[1].(int)]
	}).(StaticWebLayerEbsVolumesOutput)
}

func (StaticWebLayerEbsVolumesArrayOutput) ElementType() reflect.Type {
	return staticWebLayerEbsVolumesArrayType
}

func (o StaticWebLayerEbsVolumesArrayOutput) ToStaticWebLayerEbsVolumesArrayOutput() StaticWebLayerEbsVolumesArrayOutput {
	return o
}

func (o StaticWebLayerEbsVolumesArrayOutput) ToStaticWebLayerEbsVolumesArrayOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(StaticWebLayerEbsVolumesArrayOutput{}) }

