// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a member account in the current organization.
// 
// > **Note:** Account management must be done from the organization's master account.
// 
// !> **WARNING:** Deleting this resource will only remove an AWS account from an organization. This provider will not close the account. The member account must be prepared to be a standalone account beforehand. See the [AWS Organizations documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html) for more information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/organizations_account.html.markdown.
type Account struct {
	pulumi.CustomResourceState

	// The ARN for this account.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumi.StringOutput `pulumi:"email"`

	// If set to `ALLOW`, the new account enables IAM users to access account billing information if they have the required permissions. If set to `DENY`, then only the root user of the new account can access account billing information.
	IamUserAccessToBilling pulumi.StringOutput `pulumi:"iamUserAccessToBilling"`

	JoinedMethod pulumi.StringOutput `pulumi:"joinedMethod"`

	JoinedTimestamp pulumi.StringOutput `pulumi:"joinedTimestamp"`

	// A friendly name for the member account.
	Name pulumi.StringOutput `pulumi:"name"`

	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumi.StringOutput `pulumi:"parentId"`

	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so this provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless [`ignoreChanges`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) is used.
	RoleName pulumi.StringOutput `pulumi:"roleName"`

	Status pulumi.StringOutput `pulumi:"status"`

	// Key-value mapping of resource tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := args.IamUserAccessToBilling; i != nil { inputs["iamUserAccessToBilling"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ParentId; i != nil { inputs["parentId"] = i.ToStringOutput() }
		if i := args.RoleName; i != nil { inputs["roleName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.RegisterResource("aws:organizations/account:Account", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := state.IamUserAccessToBilling; i != nil { inputs["iamUserAccessToBilling"] = i.ToStringOutput() }
		if i := state.JoinedMethod; i != nil { inputs["joinedMethod"] = i.ToStringOutput() }
		if i := state.JoinedTimestamp; i != nil { inputs["joinedTimestamp"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ParentId; i != nil { inputs["parentId"] = i.ToStringOutput() }
		if i := state.RoleName; i != nil { inputs["roleName"] = i.ToStringOutput() }
		if i := state.Status; i != nil { inputs["status"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.ReadResource("aws:organizations/account:Account", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type AccountState struct {
	// The ARN for this account.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumi.StringInput `pulumi:"email"`
	// If set to `ALLOW`, the new account enables IAM users to access account billing information if they have the required permissions. If set to `DENY`, then only the root user of the new account can access account billing information.
	IamUserAccessToBilling pulumi.StringInput `pulumi:"iamUserAccessToBilling"`
	JoinedMethod pulumi.StringInput `pulumi:"joinedMethod"`
	JoinedTimestamp pulumi.StringInput `pulumi:"joinedTimestamp"`
	// A friendly name for the member account.
	Name pulumi.StringInput `pulumi:"name"`
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumi.StringInput `pulumi:"parentId"`
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so this provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless [`ignoreChanges`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) is used.
	RoleName pulumi.StringInput `pulumi:"roleName"`
	Status pulumi.StringInput `pulumi:"status"`
	// Key-value mapping of resource tags.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumi.StringInput `pulumi:"email"`
	// If set to `ALLOW`, the new account enables IAM users to access account billing information if they have the required permissions. If set to `DENY`, then only the root user of the new account can access account billing information.
	IamUserAccessToBilling pulumi.StringInput `pulumi:"iamUserAccessToBilling"`
	// A friendly name for the member account.
	Name pulumi.StringInput `pulumi:"name"`
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumi.StringInput `pulumi:"parentId"`
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so this provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless [`ignoreChanges`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) is used.
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// Key-value mapping of resource tags.
	Tags pulumi.MapInput `pulumi:"tags"`
}
