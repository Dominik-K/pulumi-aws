// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to attach an AWS Organizations policy to an organization account, root, or unit.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/organizations_policy_attachment.html.markdown.
type PolicyAttachment struct {
	pulumi.CustomResourceState

	// The unique identifier (ID) of the policy that you want to attach to the target.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`

	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
}

// NewPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAttachment(ctx *pulumi.Context,
	name string, args *PolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	if args == nil || args.TargetId == nil {
		return nil, errors.New("missing required argument 'TargetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.PolicyId; i != nil { inputs["policyId"] = i.ToStringOutput() }
		if i := args.TargetId; i != nil { inputs["targetId"] = i.ToStringOutput() }
	}
	var resource PolicyAttachment
	err := ctx.RegisterResource("aws:organizations/policyAttachment:PolicyAttachment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAttachment gets an existing PolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAttachmentState, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.PolicyId; i != nil { inputs["policyId"] = i.ToStringOutput() }
		if i := state.TargetId; i != nil { inputs["targetId"] = i.ToStringOutput() }
	}
	var resource PolicyAttachment
	err := ctx.ReadResource("aws:organizations/policyAttachment:PolicyAttachment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAttachment resources.
type PolicyAttachmentState struct {
	// The unique identifier (ID) of the policy that you want to attach to the target.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	TargetId pulumi.StringInput `pulumi:"targetId"`
}

// The set of arguments for constructing a PolicyAttachment resource.
type PolicyAttachmentArgs struct {
	// The unique identifier (ID) of the policy that you want to attach to the target.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
	TargetId pulumi.StringInput `pulumi:"targetId"`
}
