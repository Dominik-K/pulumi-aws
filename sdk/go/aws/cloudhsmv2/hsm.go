// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudhsmv2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an HSM module in Amazon CloudHSM v2 cluster.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudhsm_v2_hsm.html.markdown.
type Hsm struct {
	pulumi.CustomResourceState

	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`

	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`

	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumi.StringOutput `pulumi:"hsmEniId"`

	// The id of the HSM module.
	HsmId pulumi.StringOutput `pulumi:"hsmId"`

	// The state of the HSM module.
	HsmState pulumi.StringOutput `pulumi:"hsmState"`

	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`

	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewHsm registers a new resource with the given unique name, arguments, and options.
func NewHsm(ctx *pulumi.Context,
	name string, args *HsmArgs, opts ...pulumi.ResourceOption) (*Hsm, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AvailabilityZone; i != nil { inputs["availabilityZone"] = i.ToStringOutput() }
		if i := args.ClusterId; i != nil { inputs["clusterId"] = i.ToStringOutput() }
		if i := args.IpAddress; i != nil { inputs["ipAddress"] = i.ToStringOutput() }
		if i := args.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
	}
	var resource Hsm
	err := ctx.RegisterResource("aws:cloudhsmv2/hsm:Hsm", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsm gets an existing Hsm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmState, opts ...pulumi.ResourceOption) (*Hsm, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AvailabilityZone; i != nil { inputs["availabilityZone"] = i.ToStringOutput() }
		if i := state.ClusterId; i != nil { inputs["clusterId"] = i.ToStringOutput() }
		if i := state.HsmEniId; i != nil { inputs["hsmEniId"] = i.ToStringOutput() }
		if i := state.HsmId; i != nil { inputs["hsmId"] = i.ToStringOutput() }
		if i := state.HsmState; i != nil { inputs["hsmState"] = i.ToStringOutput() }
		if i := state.IpAddress; i != nil { inputs["ipAddress"] = i.ToStringOutput() }
		if i := state.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
	}
	var resource Hsm
	err := ctx.ReadResource("aws:cloudhsmv2/hsm:Hsm", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hsm resources.
type HsmState struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumi.StringInput `pulumi:"hsmEniId"`
	// The id of the HSM module.
	HsmId pulumi.StringInput `pulumi:"hsmId"`
	// The state of the HSM module.
	HsmState pulumi.StringInput `pulumi:"hsmState"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

// The set of arguments for constructing a Hsm resource.
type HsmArgs struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}
