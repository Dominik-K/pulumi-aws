// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic File System (EFS) mount target.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/efs_mount_target.html.markdown.
type MountTarget struct {
	pulumi.CustomResourceState

	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	DnsName pulumi.StringOutput `pulumi:"dnsName"`

	// Amazon Resource Name of the file system.
	FileSystemArn pulumi.StringOutput `pulumi:"fileSystemArn"`

	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`

	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`

	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`

	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`

	// The ID of the subnet to add the mount target in.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewMountTarget registers a new resource with the given unique name, arguments, and options.
func NewMountTarget(ctx *pulumi.Context,
	name string, args *MountTargetArgs, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	if args == nil || args.FileSystemId == nil {
		return nil, errors.New("missing required argument 'FileSystemId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.FileSystemId; i != nil { inputs["fileSystemId"] = i.ToStringOutput() }
		if i := args.IpAddress; i != nil { inputs["ipAddress"] = i.ToStringOutput() }
		if i := args.SecurityGroups; i != nil { inputs["securityGroups"] = i.ToStringArrayOutput() }
		if i := args.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
	}
	var resource MountTarget
	err := ctx.RegisterResource("aws:efs/mountTarget:MountTarget", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountTarget gets an existing MountTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountTargetState, opts ...pulumi.ResourceOption) (*MountTarget, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DnsName; i != nil { inputs["dnsName"] = i.ToStringOutput() }
		if i := state.FileSystemArn; i != nil { inputs["fileSystemArn"] = i.ToStringOutput() }
		if i := state.FileSystemId; i != nil { inputs["fileSystemId"] = i.ToStringOutput() }
		if i := state.IpAddress; i != nil { inputs["ipAddress"] = i.ToStringOutput() }
		if i := state.NetworkInterfaceId; i != nil { inputs["networkInterfaceId"] = i.ToStringOutput() }
		if i := state.SecurityGroups; i != nil { inputs["securityGroups"] = i.ToStringArrayOutput() }
		if i := state.SubnetId; i != nil { inputs["subnetId"] = i.ToStringOutput() }
	}
	var resource MountTarget
	err := ctx.ReadResource("aws:efs/mountTarget:MountTarget", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountTarget resources.
type MountTargetState struct {
	// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// Amazon Resource Name of the file system.
	FileSystemArn pulumi.StringInput `pulumi:"fileSystemArn"`
	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The ID of the network interface that Amazon EFS created when it created the mount target.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The ID of the subnet to add the mount target in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

// The set of arguments for constructing a MountTarget resource.
type MountTargetArgs struct {
	// The ID of the file system for which the mount target is intended.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The address (within the address range of the specified subnet) at
	// which the file system may be mounted via the mount target.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// A list of up to 5 VPC security group IDs (that must
	// be for the same VPC as subnet specified) in effect for the mount target.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The ID of the subnet to add the mount target in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}
