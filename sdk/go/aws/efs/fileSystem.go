// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic File System (EFS) resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/efs_file_system.html.markdown.
type FileSystem struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the file system.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A unique name (a maximum of 64 characters are allowed)
	// used as reference when creating the Elastic File System to ensure idempotent file
	// system creation. By default generated by this provider. See [Elastic File System]
	// (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information.
	CreationToken pulumi.StringOutput `pulumi:"creationToken"`

	// The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	DnsName pulumi.StringOutput `pulumi:"dnsName"`

	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`

	// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object (documented below).
	LifecyclePolicy FileSystemLifecyclePolicyOutput `pulumi:"lifecyclePolicy"`

	// The file system performance mode. Can be either `"generalPurpose"` or `"maxIO"` (Default: `"generalPurpose"`).
	PerformanceMode pulumi.StringOutput `pulumi:"performanceMode"`

	// The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
	ProvisionedThroughputInMibps pulumi.Float64Output `pulumi:"provisionedThroughputInMibps"`

	// A mapping of tags to assign to the file system.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`. When using `provisioned`, also set `provisionedThroughputInMibps`.
	ThroughputMode pulumi.StringOutput `pulumi:"throughputMode"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CreationToken; i != nil { inputs["creationToken"] = i.ToStringOutput() }
		if i := args.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := args.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := args.LifecyclePolicy; i != nil { inputs["lifecyclePolicy"] = i.ToFileSystemLifecyclePolicyOutput() }
		if i := args.PerformanceMode; i != nil { inputs["performanceMode"] = i.ToStringOutput() }
		if i := args.ProvisionedThroughputInMibps; i != nil { inputs["provisionedThroughputInMibps"] = i.ToFloat64Output() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.ThroughputMode; i != nil { inputs["throughputMode"] = i.ToStringOutput() }
	}
	var resource FileSystem
	err := ctx.RegisterResource("aws:efs/fileSystem:FileSystem", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CreationToken; i != nil { inputs["creationToken"] = i.ToStringOutput() }
		if i := state.DnsName; i != nil { inputs["dnsName"] = i.ToStringOutput() }
		if i := state.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := state.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := state.LifecyclePolicy; i != nil { inputs["lifecyclePolicy"] = i.ToFileSystemLifecyclePolicyOutput() }
		if i := state.PerformanceMode; i != nil { inputs["performanceMode"] = i.ToStringOutput() }
		if i := state.ProvisionedThroughputInMibps; i != nil { inputs["provisionedThroughputInMibps"] = i.ToFloat64Output() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.ThroughputMode; i != nil { inputs["throughputMode"] = i.ToStringOutput() }
	}
	var resource FileSystem
	err := ctx.ReadResource("aws:efs/fileSystem:FileSystem", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type FileSystemState struct {
	// Amazon Resource Name of the file system.
	Arn pulumi.StringInput `pulumi:"arn"`
	// A unique name (a maximum of 64 characters are allowed)
	// used as reference when creating the Elastic File System to ensure idempotent file
	// system creation. By default generated by this provider. See [Elastic File System]
	// (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information.
	CreationToken pulumi.StringInput `pulumi:"creationToken"`
	// The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object (documented below).
	LifecyclePolicy FileSystemLifecyclePolicyInput `pulumi:"lifecyclePolicy"`
	// The file system performance mode. Can be either `"generalPurpose"` or `"maxIO"` (Default: `"generalPurpose"`).
	PerformanceMode pulumi.StringInput `pulumi:"performanceMode"`
	// The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
	ProvisionedThroughputInMibps pulumi.Float64Input `pulumi:"provisionedThroughputInMibps"`
	// A mapping of tags to assign to the file system.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`. When using `provisioned`, also set `provisionedThroughputInMibps`.
	ThroughputMode pulumi.StringInput `pulumi:"throughputMode"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// A unique name (a maximum of 64 characters are allowed)
	// used as reference when creating the Elastic File System to ensure idempotent file
	// system creation. By default generated by this provider. See [Elastic File System]
	// (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information.
	CreationToken pulumi.StringInput `pulumi:"creationToken"`
	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object (documented below).
	LifecyclePolicy FileSystemLifecyclePolicyInput `pulumi:"lifecyclePolicy"`
	// The file system performance mode. Can be either `"generalPurpose"` or `"maxIO"` (Default: `"generalPurpose"`).
	PerformanceMode pulumi.StringInput `pulumi:"performanceMode"`
	// The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughputMode` set to `provisioned`.
	ProvisionedThroughputInMibps pulumi.Float64Input `pulumi:"provisionedThroughputInMibps"`
	// A mapping of tags to assign to the file system.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`. When using `provisioned`, also set `provisionedThroughputInMibps`.
	ThroughputMode pulumi.StringInput `pulumi:"throughputMode"`
}
type FileSystemLifecyclePolicy struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa *string `pulumi:"transitionToIa"`
}
var fileSystemLifecyclePolicyType = reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()

type FileSystemLifecyclePolicyInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput
	ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput
}

type FileSystemLifecyclePolicyArgs struct {
	// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
	TransitionToIa pulumi.StringInput `pulumi:"transitionToIa"`
}

func (FileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return fileSystemLifecyclePolicyType
}

func (a FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutput(a).(FileSystemLifecyclePolicyOutput)
}

func (a FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(FileSystemLifecyclePolicyOutput)
}

type FileSystemLifecyclePolicyOutput struct { *pulumi.OutputState }

// Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
func (o FileSystemLifecyclePolicyOutput) TransitionToIa() pulumi.StringOutput {
	return o.Apply(func(v FileSystemLifecyclePolicy) string {
		if v.TransitionToIa == nil { return *new(string) } else { return *v.TransitionToIa }
	}).(pulumi.StringOutput)
}

func (FileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return fileSystemLifecyclePolicyType
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return o
}

func init() { pulumi.RegisterOutputType(FileSystemLifecyclePolicyOutput{}) }

