// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Associates an SSM Document to an instance or EC2 tag.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_association.html.markdown.
type Association struct {
	pulumi.CustomResourceState

	// The ID of the SSM association.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`

	// The descriptive name for the association.
	AssociationName pulumi.StringOutput `pulumi:"associationName"`

	// The compliance severity for the association. Can be one of the following: `UNSPECIFIED`, `LOW`, `MEDIUM`, `HIGH` or `CRITICAL`
	ComplianceSeverity pulumi.StringOutput `pulumi:"complianceSeverity"`

	// The document version you want to associate with the target(s). Can be a specific version or the default version.
	DocumentVersion pulumi.StringOutput `pulumi:"documentVersion"`

	// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`

	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxConcurrency pulumi.StringOutput `pulumi:"maxConcurrency"`

	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxErrors pulumi.StringOutput `pulumi:"maxErrors"`

	// The name of the SSM document to apply.
	Name pulumi.StringOutput `pulumi:"name"`

	// An output location block. Output Location is documented below.
	OutputLocation AssociationOutputLocationOutput `pulumi:"outputLocation"`

	// A block of arbitrary string parameters to pass to the SSM document.
	Parameters pulumi.MapOutput `pulumi:"parameters"`

	// A cron expression when the association will be applied to the target(s).
	ScheduleExpression pulumi.StringOutput `pulumi:"scheduleExpression"`

	// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
	Targets AssociationTargetsArrayOutput `pulumi:"targets"`
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOption) (*Association, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AssociationName; i != nil { inputs["associationName"] = i.ToStringOutput() }
		if i := args.ComplianceSeverity; i != nil { inputs["complianceSeverity"] = i.ToStringOutput() }
		if i := args.DocumentVersion; i != nil { inputs["documentVersion"] = i.ToStringOutput() }
		if i := args.InstanceId; i != nil { inputs["instanceId"] = i.ToStringOutput() }
		if i := args.MaxConcurrency; i != nil { inputs["maxConcurrency"] = i.ToStringOutput() }
		if i := args.MaxErrors; i != nil { inputs["maxErrors"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.OutputLocation; i != nil { inputs["outputLocation"] = i.ToAssociationOutputLocationOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToMapOutput() }
		if i := args.ScheduleExpression; i != nil { inputs["scheduleExpression"] = i.ToStringOutput() }
		if i := args.Targets; i != nil { inputs["targets"] = i.ToAssociationTargetsArrayOutput() }
	}
	var resource Association
	err := ctx.RegisterResource("aws:ssm/association:Association", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociationState, opts ...pulumi.ResourceOption) (*Association, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AssociationId; i != nil { inputs["associationId"] = i.ToStringOutput() }
		if i := state.AssociationName; i != nil { inputs["associationName"] = i.ToStringOutput() }
		if i := state.ComplianceSeverity; i != nil { inputs["complianceSeverity"] = i.ToStringOutput() }
		if i := state.DocumentVersion; i != nil { inputs["documentVersion"] = i.ToStringOutput() }
		if i := state.InstanceId; i != nil { inputs["instanceId"] = i.ToStringOutput() }
		if i := state.MaxConcurrency; i != nil { inputs["maxConcurrency"] = i.ToStringOutput() }
		if i := state.MaxErrors; i != nil { inputs["maxErrors"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.OutputLocation; i != nil { inputs["outputLocation"] = i.ToAssociationOutputLocationOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToMapOutput() }
		if i := state.ScheduleExpression; i != nil { inputs["scheduleExpression"] = i.ToStringOutput() }
		if i := state.Targets; i != nil { inputs["targets"] = i.ToAssociationTargetsArrayOutput() }
	}
	var resource Association
	err := ctx.ReadResource("aws:ssm/association:Association", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Association resources.
type AssociationState struct {
	// The ID of the SSM association.
	AssociationId pulumi.StringInput `pulumi:"associationId"`
	// The descriptive name for the association.
	AssociationName pulumi.StringInput `pulumi:"associationName"`
	// The compliance severity for the association. Can be one of the following: `UNSPECIFIED`, `LOW`, `MEDIUM`, `HIGH` or `CRITICAL`
	ComplianceSeverity pulumi.StringInput `pulumi:"complianceSeverity"`
	// The document version you want to associate with the target(s). Can be a specific version or the default version.
	DocumentVersion pulumi.StringInput `pulumi:"documentVersion"`
	// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxConcurrency pulumi.StringInput `pulumi:"maxConcurrency"`
	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxErrors pulumi.StringInput `pulumi:"maxErrors"`
	// The name of the SSM document to apply.
	Name pulumi.StringInput `pulumi:"name"`
	// An output location block. Output Location is documented below.
	OutputLocation AssociationOutputLocationInput `pulumi:"outputLocation"`
	// A block of arbitrary string parameters to pass to the SSM document.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// A cron expression when the association will be applied to the target(s).
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
	// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
	Targets AssociationTargetsArrayInput `pulumi:"targets"`
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	// The descriptive name for the association.
	AssociationName pulumi.StringInput `pulumi:"associationName"`
	// The compliance severity for the association. Can be one of the following: `UNSPECIFIED`, `LOW`, `MEDIUM`, `HIGH` or `CRITICAL`
	ComplianceSeverity pulumi.StringInput `pulumi:"complianceSeverity"`
	// The document version you want to associate with the target(s). Can be a specific version or the default version.
	DocumentVersion pulumi.StringInput `pulumi:"documentVersion"`
	// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxConcurrency pulumi.StringInput `pulumi:"maxConcurrency"`
	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
	MaxErrors pulumi.StringInput `pulumi:"maxErrors"`
	// The name of the SSM document to apply.
	Name pulumi.StringInput `pulumi:"name"`
	// An output location block. Output Location is documented below.
	OutputLocation AssociationOutputLocationInput `pulumi:"outputLocation"`
	// A block of arbitrary string parameters to pass to the SSM document.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// A cron expression when the association will be applied to the target(s).
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
	// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
	Targets AssociationTargetsArrayInput `pulumi:"targets"`
}
type AssociationOutputLocation struct {
	// The S3 bucket name.
	S3BucketName string `pulumi:"s3BucketName"`
	// The S3 bucket prefix. Results stored in the root if not configured.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}
var associationOutputLocationType = reflect.TypeOf((*AssociationOutputLocation)(nil)).Elem()

type AssociationOutputLocationInput interface {
	pulumi.Input

	ToAssociationOutputLocationOutput() AssociationOutputLocationOutput
	ToAssociationOutputLocationOutputWithContext(ctx context.Context) AssociationOutputLocationOutput
}

type AssociationOutputLocationArgs struct {
	// The S3 bucket name.
	S3BucketName pulumi.StringInput `pulumi:"s3BucketName"`
	// The S3 bucket prefix. Results stored in the root if not configured.
	S3KeyPrefix pulumi.StringInput `pulumi:"s3KeyPrefix"`
}

func (AssociationOutputLocationArgs) ElementType() reflect.Type {
	return associationOutputLocationType
}

func (a AssociationOutputLocationArgs) ToAssociationOutputLocationOutput() AssociationOutputLocationOutput {
	return pulumi.ToOutput(a).(AssociationOutputLocationOutput)
}

func (a AssociationOutputLocationArgs) ToAssociationOutputLocationOutputWithContext(ctx context.Context) AssociationOutputLocationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AssociationOutputLocationOutput)
}

type AssociationOutputLocationOutput struct { *pulumi.OutputState }

// The S3 bucket name.
func (o AssociationOutputLocationOutput) S3BucketName() pulumi.StringOutput {
	return o.Apply(func(v AssociationOutputLocation) string {
		return v.S3BucketName
	}).(pulumi.StringOutput)
}

// The S3 bucket prefix. Results stored in the root if not configured.
func (o AssociationOutputLocationOutput) S3KeyPrefix() pulumi.StringOutput {
	return o.Apply(func(v AssociationOutputLocation) string {
		if v.S3KeyPrefix == nil { return *new(string) } else { return *v.S3KeyPrefix }
	}).(pulumi.StringOutput)
}

func (AssociationOutputLocationOutput) ElementType() reflect.Type {
	return associationOutputLocationType
}

func (o AssociationOutputLocationOutput) ToAssociationOutputLocationOutput() AssociationOutputLocationOutput {
	return o
}

func (o AssociationOutputLocationOutput) ToAssociationOutputLocationOutputWithContext(ctx context.Context) AssociationOutputLocationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AssociationOutputLocationOutput{}) }

type AssociationTargets struct {
	// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
	Key string `pulumi:"key"`
	// A list of instance IDs or tag values. AWS currently limits this list size to one value.
	Values []string `pulumi:"values"`
}
var associationTargetsType = reflect.TypeOf((*AssociationTargets)(nil)).Elem()

type AssociationTargetsInput interface {
	pulumi.Input

	ToAssociationTargetsOutput() AssociationTargetsOutput
	ToAssociationTargetsOutputWithContext(ctx context.Context) AssociationTargetsOutput
}

type AssociationTargetsArgs struct {
	// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
	Key pulumi.StringInput `pulumi:"key"`
	// A list of instance IDs or tag values. AWS currently limits this list size to one value.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AssociationTargetsArgs) ElementType() reflect.Type {
	return associationTargetsType
}

func (a AssociationTargetsArgs) ToAssociationTargetsOutput() AssociationTargetsOutput {
	return pulumi.ToOutput(a).(AssociationTargetsOutput)
}

func (a AssociationTargetsArgs) ToAssociationTargetsOutputWithContext(ctx context.Context) AssociationTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AssociationTargetsOutput)
}

type AssociationTargetsOutput struct { *pulumi.OutputState }

// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
func (o AssociationTargetsOutput) Key() pulumi.StringOutput {
	return o.Apply(func(v AssociationTargets) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// A list of instance IDs or tag values. AWS currently limits this list size to one value.
func (o AssociationTargetsOutput) Values() pulumi.StringArrayOutput {
	return o.Apply(func(v AssociationTargets) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

func (AssociationTargetsOutput) ElementType() reflect.Type {
	return associationTargetsType
}

func (o AssociationTargetsOutput) ToAssociationTargetsOutput() AssociationTargetsOutput {
	return o
}

func (o AssociationTargetsOutput) ToAssociationTargetsOutputWithContext(ctx context.Context) AssociationTargetsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AssociationTargetsOutput{}) }

var associationTargetsArrayType = reflect.TypeOf((*[]AssociationTargets)(nil)).Elem()

type AssociationTargetsArrayInput interface {
	pulumi.Input

	ToAssociationTargetsArrayOutput() AssociationTargetsArrayOutput
	ToAssociationTargetsArrayOutputWithContext(ctx context.Context) AssociationTargetsArrayOutput
}

type AssociationTargetsArrayArgs []AssociationTargetsInput

func (AssociationTargetsArrayArgs) ElementType() reflect.Type {
	return associationTargetsArrayType
}

func (a AssociationTargetsArrayArgs) ToAssociationTargetsArrayOutput() AssociationTargetsArrayOutput {
	return pulumi.ToOutput(a).(AssociationTargetsArrayOutput)
}

func (a AssociationTargetsArrayArgs) ToAssociationTargetsArrayOutputWithContext(ctx context.Context) AssociationTargetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AssociationTargetsArrayOutput)
}

type AssociationTargetsArrayOutput struct { *pulumi.OutputState }

func (o AssociationTargetsArrayOutput) Index(i pulumi.IntInput) AssociationTargetsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AssociationTargets {
		return vs[0].([]AssociationTargets)[vs[1].(int)]
	}).(AssociationTargetsOutput)
}

func (AssociationTargetsArrayOutput) ElementType() reflect.Type {
	return associationTargetsArrayType
}

func (o AssociationTargetsArrayOutput) ToAssociationTargetsArrayOutput() AssociationTargetsArrayOutput {
	return o
}

func (o AssociationTargetsArrayOutput) ToAssociationTargetsArrayOutputWithContext(ctx context.Context) AssociationTargetsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AssociationTargetsArrayOutput{}) }

