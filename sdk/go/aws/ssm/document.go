// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Document resource
// 
// > **NOTE on updating SSM documents:** Only documents with a schema version of 2.0
// or greater can update their content once created, see [SSM Schema Features][1]. To update a document with an older
// schema version you must recreate the resource.
// 
// ## Permissions
// 
// The permissions attribute specifies how you want to share the document. If you share a document privately,
// you must specify the AWS user account IDs for those people who can use the document. If you share a document
// publicly, you must specify All as the account ID.
// 
// The permissions mapping supports the following:
// 
// * `type` - The permission type for the document. The permission type can be `Share`.
// * `accountIds` - The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or `All`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_document.html.markdown.
type Document struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`

	// The JSON or YAML content of the document.
	Content pulumi.StringOutput `pulumi:"content"`

	// The date the document was created.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`

	// The default version of the document.
	DefaultVersion pulumi.StringOutput `pulumi:"defaultVersion"`

	// The description of the document.
	Description pulumi.StringOutput `pulumi:"description"`

	// The format of the document. Valid document types include: `JSON` and `YAML`
	DocumentFormat pulumi.StringOutput `pulumi:"documentFormat"`

	// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
	DocumentType pulumi.StringOutput `pulumi:"documentType"`

	// The sha1 or sha256 of the document content
	Hash pulumi.StringOutput `pulumi:"hash"`

	// "Sha1" "Sha256". The hashing algorithm used when hashing the content.
	HashType pulumi.StringOutput `pulumi:"hashType"`

	// The latest version of the document.
	LatestVersion pulumi.StringOutput `pulumi:"latestVersion"`

	// The name of the document.
	Name pulumi.StringOutput `pulumi:"name"`

	// The AWS user account of the person who created the document.
	Owner pulumi.StringOutput `pulumi:"owner"`

	// The parameters that are available to this document.
	Parameters DocumentParametersArrayOutput `pulumi:"parameters"`

	// Additional Permissions to attach to the document. See Permissions below for details.
	Permissions DocumentPermissionsOutput `pulumi:"permissions"`

	// A list of OS platforms compatible with this SSM document, either "Windows" or "Linux".
	PlatformTypes pulumi.StringArrayOutput `pulumi:"platformTypes"`

	// The schema version of the document.
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`

	// "Creating", "Active" or "Deleting". The current status of the document.
	Status pulumi.StringOutput `pulumi:"status"`

	// A mapping of tags to assign to the object.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil || args.DocumentType == nil {
		return nil, errors.New("missing required argument 'DocumentType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Content; i != nil { inputs["content"] = i.ToStringOutput() }
		if i := args.DocumentFormat; i != nil { inputs["documentFormat"] = i.ToStringOutput() }
		if i := args.DocumentType; i != nil { inputs["documentType"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Permissions; i != nil { inputs["permissions"] = i.ToDocumentPermissionsOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Document
	err := ctx.RegisterResource("aws:ssm/document:Document", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Content; i != nil { inputs["content"] = i.ToStringOutput() }
		if i := state.CreatedDate; i != nil { inputs["createdDate"] = i.ToStringOutput() }
		if i := state.DefaultVersion; i != nil { inputs["defaultVersion"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DocumentFormat; i != nil { inputs["documentFormat"] = i.ToStringOutput() }
		if i := state.DocumentType; i != nil { inputs["documentType"] = i.ToStringOutput() }
		if i := state.Hash; i != nil { inputs["hash"] = i.ToStringOutput() }
		if i := state.HashType; i != nil { inputs["hashType"] = i.ToStringOutput() }
		if i := state.LatestVersion; i != nil { inputs["latestVersion"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Owner; i != nil { inputs["owner"] = i.ToStringOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToDocumentParametersArrayOutput() }
		if i := state.Permissions; i != nil { inputs["permissions"] = i.ToDocumentPermissionsOutput() }
		if i := state.PlatformTypes; i != nil { inputs["platformTypes"] = i.ToStringArrayOutput() }
		if i := state.SchemaVersion; i != nil { inputs["schemaVersion"] = i.ToStringOutput() }
		if i := state.Status; i != nil { inputs["status"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Document
	err := ctx.ReadResource("aws:ssm/document:Document", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type DocumentState struct {
	Arn pulumi.StringInput `pulumi:"arn"`
	// The JSON or YAML content of the document.
	Content pulumi.StringInput `pulumi:"content"`
	// The date the document was created.
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// The default version of the document.
	DefaultVersion pulumi.StringInput `pulumi:"defaultVersion"`
	// The description of the document.
	Description pulumi.StringInput `pulumi:"description"`
	// The format of the document. Valid document types include: `JSON` and `YAML`
	DocumentFormat pulumi.StringInput `pulumi:"documentFormat"`
	// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
	DocumentType pulumi.StringInput `pulumi:"documentType"`
	// The sha1 or sha256 of the document content
	Hash pulumi.StringInput `pulumi:"hash"`
	// "Sha1" "Sha256". The hashing algorithm used when hashing the content.
	HashType pulumi.StringInput `pulumi:"hashType"`
	// The latest version of the document.
	LatestVersion pulumi.StringInput `pulumi:"latestVersion"`
	// The name of the document.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS user account of the person who created the document.
	Owner pulumi.StringInput `pulumi:"owner"`
	// The parameters that are available to this document.
	Parameters DocumentParametersArrayInput `pulumi:"parameters"`
	// Additional Permissions to attach to the document. See Permissions below for details.
	Permissions DocumentPermissionsInput `pulumi:"permissions"`
	// A list of OS platforms compatible with this SSM document, either "Windows" or "Linux".
	PlatformTypes pulumi.StringArrayInput `pulumi:"platformTypes"`
	// The schema version of the document.
	SchemaVersion pulumi.StringInput `pulumi:"schemaVersion"`
	// "Creating", "Active" or "Deleting". The current status of the document.
	Status pulumi.StringInput `pulumi:"status"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	// The JSON or YAML content of the document.
	Content pulumi.StringInput `pulumi:"content"`
	// The format of the document. Valid document types include: `JSON` and `YAML`
	DocumentFormat pulumi.StringInput `pulumi:"documentFormat"`
	// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
	DocumentType pulumi.StringInput `pulumi:"documentType"`
	// The name of the document.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional Permissions to attach to the document. See Permissions below for details.
	Permissions DocumentPermissionsInput `pulumi:"permissions"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type DocumentParameters struct {
	DefaultValue *string `pulumi:"defaultValue"`
	// The description of the document.
	Description *string `pulumi:"description"`
	// The name of the document.
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}
var documentParametersType = reflect.TypeOf((*DocumentParameters)(nil)).Elem()

type DocumentParametersInput interface {
	pulumi.Input

	ToDocumentParametersOutput() DocumentParametersOutput
	ToDocumentParametersOutputWithContext(ctx context.Context) DocumentParametersOutput
}

type DocumentParametersArgs struct {
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// The description of the document.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the document.
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentParametersArgs) ElementType() reflect.Type {
	return documentParametersType
}

func (a DocumentParametersArgs) ToDocumentParametersOutput() DocumentParametersOutput {
	return pulumi.ToOutput(a).(DocumentParametersOutput)
}

func (a DocumentParametersArgs) ToDocumentParametersOutputWithContext(ctx context.Context) DocumentParametersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DocumentParametersOutput)
}

type DocumentParametersOutput struct { *pulumi.OutputState }

func (o DocumentParametersOutput) DefaultValue() pulumi.StringOutput {
	return o.Apply(func(v DocumentParameters) string {
		if v.DefaultValue == nil { return *new(string) } else { return *v.DefaultValue }
	}).(pulumi.StringOutput)
}

// The description of the document.
func (o DocumentParametersOutput) Description() pulumi.StringOutput {
	return o.Apply(func(v DocumentParameters) string {
		if v.Description == nil { return *new(string) } else { return *v.Description }
	}).(pulumi.StringOutput)
}

// The name of the document.
func (o DocumentParametersOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v DocumentParameters) string {
		if v.Name == nil { return *new(string) } else { return *v.Name }
	}).(pulumi.StringOutput)
}

func (o DocumentParametersOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v DocumentParameters) string {
		if v.Type == nil { return *new(string) } else { return *v.Type }
	}).(pulumi.StringOutput)
}

func (DocumentParametersOutput) ElementType() reflect.Type {
	return documentParametersType
}

func (o DocumentParametersOutput) ToDocumentParametersOutput() DocumentParametersOutput {
	return o
}

func (o DocumentParametersOutput) ToDocumentParametersOutputWithContext(ctx context.Context) DocumentParametersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DocumentParametersOutput{}) }

var documentParametersArrayType = reflect.TypeOf((*[]DocumentParameters)(nil)).Elem()

type DocumentParametersArrayInput interface {
	pulumi.Input

	ToDocumentParametersArrayOutput() DocumentParametersArrayOutput
	ToDocumentParametersArrayOutputWithContext(ctx context.Context) DocumentParametersArrayOutput
}

type DocumentParametersArrayArgs []DocumentParametersInput

func (DocumentParametersArrayArgs) ElementType() reflect.Type {
	return documentParametersArrayType
}

func (a DocumentParametersArrayArgs) ToDocumentParametersArrayOutput() DocumentParametersArrayOutput {
	return pulumi.ToOutput(a).(DocumentParametersArrayOutput)
}

func (a DocumentParametersArrayArgs) ToDocumentParametersArrayOutputWithContext(ctx context.Context) DocumentParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DocumentParametersArrayOutput)
}

type DocumentParametersArrayOutput struct { *pulumi.OutputState }

func (o DocumentParametersArrayOutput) Index(i pulumi.IntInput) DocumentParametersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) DocumentParameters {
		return vs[0].([]DocumentParameters)[vs[1].(int)]
	}).(DocumentParametersOutput)
}

func (DocumentParametersArrayOutput) ElementType() reflect.Type {
	return documentParametersArrayType
}

func (o DocumentParametersArrayOutput) ToDocumentParametersArrayOutput() DocumentParametersArrayOutput {
	return o
}

func (o DocumentParametersArrayOutput) ToDocumentParametersArrayOutputWithContext(ctx context.Context) DocumentParametersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DocumentParametersArrayOutput{}) }

type DocumentPermissions struct {
	AccountIds string `pulumi:"accountIds"`
	Type string `pulumi:"type"`
}
var documentPermissionsType = reflect.TypeOf((*DocumentPermissions)(nil)).Elem()

type DocumentPermissionsInput interface {
	pulumi.Input

	ToDocumentPermissionsOutput() DocumentPermissionsOutput
	ToDocumentPermissionsOutputWithContext(ctx context.Context) DocumentPermissionsOutput
}

type DocumentPermissionsArgs struct {
	AccountIds pulumi.StringInput `pulumi:"accountIds"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentPermissionsArgs) ElementType() reflect.Type {
	return documentPermissionsType
}

func (a DocumentPermissionsArgs) ToDocumentPermissionsOutput() DocumentPermissionsOutput {
	return pulumi.ToOutput(a).(DocumentPermissionsOutput)
}

func (a DocumentPermissionsArgs) ToDocumentPermissionsOutputWithContext(ctx context.Context) DocumentPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DocumentPermissionsOutput)
}

type DocumentPermissionsOutput struct { *pulumi.OutputState }

func (o DocumentPermissionsOutput) AccountIds() pulumi.StringOutput {
	return o.Apply(func(v DocumentPermissions) string {
		return v.AccountIds
	}).(pulumi.StringOutput)
}

func (o DocumentPermissionsOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v DocumentPermissions) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (DocumentPermissionsOutput) ElementType() reflect.Type {
	return documentPermissionsType
}

func (o DocumentPermissionsOutput) ToDocumentPermissionsOutput() DocumentPermissionsOutput {
	return o
}

func (o DocumentPermissionsOutput) ToDocumentPermissionsOutputWithContext(ctx context.Context) DocumentPermissionsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DocumentPermissionsOutput{}) }

