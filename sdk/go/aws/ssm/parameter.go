// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Parameter resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_parameter.html.markdown.
type Parameter struct {
	pulumi.CustomResourceState

	// A regular expression used to validate the parameter value.
	AllowedPattern pulumi.StringOutput `pulumi:"allowedPattern"`

	// The ARN of the parameter.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The description of the parameter.
	Description pulumi.StringOutput `pulumi:"description"`

	// The KMS key id or arn for encrypting a SecureString.
	KeyId pulumi.StringOutput `pulumi:"keyId"`

	// The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
	Name pulumi.StringOutput `pulumi:"name"`

	// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
	Overwrite pulumi.BoolOutput `pulumi:"overwrite"`

	// A mapping of tags to assign to the object.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
	Tier pulumi.StringOutput `pulumi:"tier"`

	// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
	Type pulumi.StringOutput `pulumi:"type"`

	// The value of the parameter.
	Value pulumi.StringOutput `pulumi:"value"`

	// The version of the parameter.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewParameter registers a new resource with the given unique name, arguments, and options.
func NewParameter(ctx *pulumi.Context,
	name string, args *ParameterArgs, opts ...pulumi.ResourceOption) (*Parameter, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AllowedPattern; i != nil { inputs["allowedPattern"] = i.ToStringOutput() }
		if i := args.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.KeyId; i != nil { inputs["keyId"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Overwrite; i != nil { inputs["overwrite"] = i.ToBoolOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Tier; i != nil { inputs["tier"] = i.ToStringOutput() }
		if i := args.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := args.Value; i != nil { inputs["value"] = i.ToStringOutput() }
	}
	var resource Parameter
	err := ctx.RegisterResource("aws:ssm/parameter:Parameter", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameter gets an existing Parameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterState, opts ...pulumi.ResourceOption) (*Parameter, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AllowedPattern; i != nil { inputs["allowedPattern"] = i.ToStringOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.KeyId; i != nil { inputs["keyId"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Overwrite; i != nil { inputs["overwrite"] = i.ToBoolOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Tier; i != nil { inputs["tier"] = i.ToStringOutput() }
		if i := state.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := state.Value; i != nil { inputs["value"] = i.ToStringOutput() }
		if i := state.Version; i != nil { inputs["version"] = i.ToIntOutput() }
	}
	var resource Parameter
	err := ctx.ReadResource("aws:ssm/parameter:Parameter", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Parameter resources.
type ParameterState struct {
	// A regular expression used to validate the parameter value.
	AllowedPattern pulumi.StringInput `pulumi:"allowedPattern"`
	// The ARN of the parameter.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The description of the parameter.
	Description pulumi.StringInput `pulumi:"description"`
	// The KMS key id or arn for encrypting a SecureString.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
	Name pulumi.StringInput `pulumi:"name"`
	// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
	Overwrite pulumi.BoolInput `pulumi:"overwrite"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
	Tier pulumi.StringInput `pulumi:"tier"`
	// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
	// The version of the parameter.
	Version pulumi.IntInput `pulumi:"version"`
}

// The set of arguments for constructing a Parameter resource.
type ParameterArgs struct {
	// A regular expression used to validate the parameter value.
	AllowedPattern pulumi.StringInput `pulumi:"allowedPattern"`
	// The ARN of the parameter.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The description of the parameter.
	Description pulumi.StringInput `pulumi:"description"`
	// The KMS key id or arn for encrypting a SecureString.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The name of the parameter. If the name contains a path (e.g. any forward slashes (`/`)), it must be fully qualified with a leading forward slash (`/`). For additional requirements and constraints, see the [AWS SSM User Guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html).
	Name pulumi.StringInput `pulumi:"name"`
	// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by this provider to avoid overwrite of existing resource and will default to `true` otherwise (lifecycle rules should then be used to manage the update behavior).
	Overwrite pulumi.BoolInput `pulumi:"overwrite"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The tier of the parameter. If not specified, will default to `Standard`. Valid tiers are `Standard` and `Advanced`. For more information on parameter tiers, see the [AWS SSM Parameter tier comparison and guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html).
	Tier pulumi.StringInput `pulumi:"tier"`
	// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}
