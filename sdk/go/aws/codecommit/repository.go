// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeCommit Repository Resource.
// 
// > **NOTE on CodeCommit Availability**: The CodeCommit is not yet rolled out
// in all regions - available regions are listed
// [the AWS Docs](https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codecommit_repository.html.markdown.
type Repository struct {
	pulumi.CustomResourceState

	// The ARN of the repository
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The URL to use for cloning the repository over HTTPS.
	CloneUrlHttp pulumi.StringOutput `pulumi:"cloneUrlHttp"`

	// The URL to use for cloning the repository over SSH.
	CloneUrlSsh pulumi.StringOutput `pulumi:"cloneUrlSsh"`

	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`

	// The description of the repository. This needs to be less than 1000 characters
	Description pulumi.StringOutput `pulumi:"description"`

	// The ID of the repository
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`

	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumi.StringOutput `pulumi:"repositoryName"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil || args.RepositoryName == nil {
		return nil, errors.New("missing required argument 'RepositoryName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DefaultBranch; i != nil { inputs["defaultBranch"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.RepositoryName; i != nil { inputs["repositoryName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Repository
	err := ctx.RegisterResource("aws:codecommit/repository:Repository", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CloneUrlHttp; i != nil { inputs["cloneUrlHttp"] = i.ToStringOutput() }
		if i := state.CloneUrlSsh; i != nil { inputs["cloneUrlSsh"] = i.ToStringOutput() }
		if i := state.DefaultBranch; i != nil { inputs["defaultBranch"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.RepositoryId; i != nil { inputs["repositoryId"] = i.ToStringOutput() }
		if i := state.RepositoryName; i != nil { inputs["repositoryName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Repository
	err := ctx.ReadResource("aws:codecommit/repository:Repository", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type RepositoryState struct {
	// The ARN of the repository
	Arn pulumi.StringInput `pulumi:"arn"`
	// The URL to use for cloning the repository over HTTPS.
	CloneUrlHttp pulumi.StringInput `pulumi:"cloneUrlHttp"`
	// The URL to use for cloning the repository over SSH.
	CloneUrlSsh pulumi.StringInput `pulumi:"cloneUrlSsh"`
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// The description of the repository. This needs to be less than 1000 characters
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the repository
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// The description of the repository. This needs to be less than 1000 characters
	Description pulumi.StringInput `pulumi:"description"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}
