// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Snapshot of a snapshot.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ebs_snapshot_copy.html.markdown.
type SnapshotCopy struct {
	pulumi.CustomResourceState

	// The data encryption key identifier for the snapshot.
	// * `sourceSnapshotId` The ARN of the copied snapshot.
	// * `sourceRegion` The region of the source snapshot.
	DataEncryptionKeyId pulumi.StringOutput `pulumi:"dataEncryptionKeyId"`

	// A description of what the snapshot is.
	Description pulumi.StringOutput `pulumi:"description"`

	// Whether the snapshot is encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`

	// The ARN for the KMS encryption key.
	// * `sourceSnapshotId` The ARN for the snapshot to be copied.
	// * `sourceRegion` The region of the source snapshot.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumi.StringOutput `pulumi:"ownerAlias"`

	// The AWS account ID of the snapshot owner.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	SourceRegion pulumi.StringOutput `pulumi:"sourceRegion"`

	SourceSnapshotId pulumi.StringOutput `pulumi:"sourceSnapshotId"`

	// A mapping of tags for the snapshot.
	Tags pulumi.MapOutput `pulumi:"tags"`

	VolumeId pulumi.StringOutput `pulumi:"volumeId"`

	// The size of the drive in GiBs.
	VolumeSize pulumi.IntOutput `pulumi:"volumeSize"`
}

// NewSnapshotCopy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotCopy(ctx *pulumi.Context,
	name string, args *SnapshotCopyArgs, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	if args == nil || args.SourceRegion == nil {
		return nil, errors.New("missing required argument 'SourceRegion'")
	}
	if args == nil || args.SourceSnapshotId == nil {
		return nil, errors.New("missing required argument 'SourceSnapshotId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := args.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := args.SourceRegion; i != nil { inputs["sourceRegion"] = i.ToStringOutput() }
		if i := args.SourceSnapshotId; i != nil { inputs["sourceSnapshotId"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource SnapshotCopy
	err := ctx.RegisterResource("aws:ebs/snapshotCopy:SnapshotCopy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotCopy gets an existing SnapshotCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotCopyState, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DataEncryptionKeyId; i != nil { inputs["dataEncryptionKeyId"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Encrypted; i != nil { inputs["encrypted"] = i.ToBoolOutput() }
		if i := state.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := state.OwnerAlias; i != nil { inputs["ownerAlias"] = i.ToStringOutput() }
		if i := state.OwnerId; i != nil { inputs["ownerId"] = i.ToStringOutput() }
		if i := state.SourceRegion; i != nil { inputs["sourceRegion"] = i.ToStringOutput() }
		if i := state.SourceSnapshotId; i != nil { inputs["sourceSnapshotId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.VolumeId; i != nil { inputs["volumeId"] = i.ToStringOutput() }
		if i := state.VolumeSize; i != nil { inputs["volumeSize"] = i.ToIntOutput() }
	}
	var resource SnapshotCopy
	err := ctx.ReadResource("aws:ebs/snapshotCopy:SnapshotCopy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotCopy resources.
type SnapshotCopyState struct {
	// The data encryption key identifier for the snapshot.
	// * `sourceSnapshotId` The ARN of the copied snapshot.
	// * `sourceRegion` The region of the source snapshot.
	DataEncryptionKeyId pulumi.StringInput `pulumi:"dataEncryptionKeyId"`
	// A description of what the snapshot is.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The ARN for the KMS encryption key.
	// * `sourceSnapshotId` The ARN for the snapshot to be copied.
	// * `sourceRegion` The region of the source snapshot.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias pulumi.StringInput `pulumi:"ownerAlias"`
	// The AWS account ID of the snapshot owner.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	SourceRegion pulumi.StringInput `pulumi:"sourceRegion"`
	SourceSnapshotId pulumi.StringInput `pulumi:"sourceSnapshotId"`
	// A mapping of tags for the snapshot.
	Tags pulumi.MapInput `pulumi:"tags"`
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The size of the drive in GiBs.
	VolumeSize pulumi.IntInput `pulumi:"volumeSize"`
}

// The set of arguments for constructing a SnapshotCopy resource.
type SnapshotCopyArgs struct {
	// A description of what the snapshot is.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The ARN for the KMS encryption key.
	// * `sourceSnapshotId` The ARN for the snapshot to be copied.
	// * `sourceRegion` The region of the source snapshot.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	SourceRegion pulumi.StringInput `pulumi:"sourceRegion"`
	SourceSnapshotId pulumi.StringInput `pulumi:"sourceSnapshotId"`
	// A mapping of tags for the snapshot.
	Tags pulumi.MapInput `pulumi:"tags"`
}
