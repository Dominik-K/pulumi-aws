// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/redshift_security_group.html.markdown.
type SecurityGroup struct {
	pulumi.CustomResourceState

	// The description of the Redshift security group. Defaults to "Managed by Pulumi".
	Description pulumi.StringOutput `pulumi:"description"`

	// A list of ingress rules.
	Ingress SecurityGroupIngressArrayOutput `pulumi:"ingress"`

	// The name of the Redshift security group.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil || args.Ingress == nil {
		return nil, errors.New("missing required argument 'Ingress'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["description"] = pulumi.Any("Managed by Pulumi")
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Ingress; i != nil { inputs["ingress"] = i.ToSecurityGroupIngressArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource SecurityGroup
	err := ctx.RegisterResource("aws:redshift/securityGroup:SecurityGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Ingress; i != nil { inputs["ingress"] = i.ToSecurityGroupIngressArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource SecurityGroup
	err := ctx.ReadResource("aws:redshift/securityGroup:SecurityGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type SecurityGroupState struct {
	// The description of the Redshift security group. Defaults to "Managed by Pulumi".
	Description pulumi.StringInput `pulumi:"description"`
	// A list of ingress rules.
	Ingress SecurityGroupIngressArrayInput `pulumi:"ingress"`
	// The name of the Redshift security group.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	// The description of the Redshift security group. Defaults to "Managed by Pulumi".
	Description pulumi.StringInput `pulumi:"description"`
	// A list of ingress rules.
	Ingress SecurityGroupIngressArrayInput `pulumi:"ingress"`
	// The name of the Redshift security group.
	Name pulumi.StringInput `pulumi:"name"`
}
type SecurityGroupIngress struct {
	// The CIDR block to accept
	Cidr *string `pulumi:"cidr"`
	// The name of the security group to authorize
	SecurityGroupName *string `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId *string `pulumi:"securityGroupOwnerId"`
}
var securityGroupIngressType = reflect.TypeOf((*SecurityGroupIngress)(nil)).Elem()

type SecurityGroupIngressInput interface {
	pulumi.Input

	ToSecurityGroupIngressOutput() SecurityGroupIngressOutput
	ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput
}

type SecurityGroupIngressArgs struct {
	// The CIDR block to accept
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// The name of the security group to authorize
	SecurityGroupName pulumi.StringInput `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId pulumi.StringInput `pulumi:"securityGroupOwnerId"`
}

func (SecurityGroupIngressArgs) ElementType() reflect.Type {
	return securityGroupIngressType
}

func (a SecurityGroupIngressArgs) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return pulumi.ToOutput(a).(SecurityGroupIngressOutput)
}

func (a SecurityGroupIngressArgs) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecurityGroupIngressOutput)
}

type SecurityGroupIngressOutput struct { *pulumi.OutputState }

// The CIDR block to accept
func (o SecurityGroupIngressOutput) Cidr() pulumi.StringOutput {
	return o.Apply(func(v SecurityGroupIngress) string {
		if v.Cidr == nil { return *new(string) } else { return *v.Cidr }
	}).(pulumi.StringOutput)
}

// The name of the security group to authorize
func (o SecurityGroupIngressOutput) SecurityGroupName() pulumi.StringOutput {
	return o.Apply(func(v SecurityGroupIngress) string {
		if v.SecurityGroupName == nil { return *new(string) } else { return *v.SecurityGroupName }
	}).(pulumi.StringOutput)
}

// The owner Id of the security group provided
// by `securityGroupName`.
func (o SecurityGroupIngressOutput) SecurityGroupOwnerId() pulumi.StringOutput {
	return o.Apply(func(v SecurityGroupIngress) string {
		if v.SecurityGroupOwnerId == nil { return *new(string) } else { return *v.SecurityGroupOwnerId }
	}).(pulumi.StringOutput)
}

func (SecurityGroupIngressOutput) ElementType() reflect.Type {
	return securityGroupIngressType
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return o
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SecurityGroupIngressOutput{}) }

var securityGroupIngressArrayType = reflect.TypeOf((*[]SecurityGroupIngress)(nil)).Elem()

type SecurityGroupIngressArrayInput interface {
	pulumi.Input

	ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput
	ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput
}

type SecurityGroupIngressArrayArgs []SecurityGroupIngressInput

func (SecurityGroupIngressArrayArgs) ElementType() reflect.Type {
	return securityGroupIngressArrayType
}

func (a SecurityGroupIngressArrayArgs) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return pulumi.ToOutput(a).(SecurityGroupIngressArrayOutput)
}

func (a SecurityGroupIngressArrayArgs) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SecurityGroupIngressArrayOutput)
}

type SecurityGroupIngressArrayOutput struct { *pulumi.OutputState }

func (o SecurityGroupIngressArrayOutput) Index(i pulumi.IntInput) SecurityGroupIngressOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) SecurityGroupIngress {
		return vs[0].([]SecurityGroupIngress)[vs[1].(int)]
	}).(SecurityGroupIngressOutput)
}

func (SecurityGroupIngressArrayOutput) ElementType() reflect.Type {
	return securityGroupIngressArrayType
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return o
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SecurityGroupIngressArrayOutput{}) }

