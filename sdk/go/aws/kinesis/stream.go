// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Kinesis Stream resource. Amazon Kinesis is a managed service that
// scales elastically for real-time processing of streaming big data.
// 
// For more details, see the [Amazon Kinesis Documentation][1].
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/kinesis_stream.html.markdown.
type Stream struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The encryption type to use. The only acceptable values are `NONE` or `KMS`. The default value is `NONE`.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`

	// A boolean that indicates all registered consumers should be deregistered from the stream so that the stream can be destroyed without error. The default value is `false`.
	EnforceConsumerDeletion pulumi.BoolOutput `pulumi:"enforceConsumerDeletion"`

	// The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias `alias/aws/kinesis`.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// A name to identify the stream. This is unique to the AWS account and region the Stream is created in.
	Name pulumi.StringOutput `pulumi:"name"`

	// Length of time data records are accessible after they are added to the stream. The maximum value of a stream's retention period is 168 hours. Minimum value is 24. Default is 24.
	RetentionPeriod pulumi.IntOutput `pulumi:"retentionPeriod"`

	// The number of shards that the stream will use.
	// Amazon has guidelines for specifying the Stream size that should be referenced when creating a Kinesis stream. See [Amazon Kinesis Streams][2] for more.
	ShardCount pulumi.IntOutput `pulumi:"shardCount"`

	// A list of shard-level CloudWatch metrics which can be enabled for the stream. See [Monitoring with CloudWatch][3] for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable.
	ShardLevelMetrics pulumi.StringArrayOutput `pulumi:"shardLevelMetrics"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewStream registers a new resource with the given unique name, arguments, and options.
func NewStream(ctx *pulumi.Context,
	name string, args *StreamArgs, opts ...pulumi.ResourceOption) (*Stream, error) {
	if args == nil || args.ShardCount == nil {
		return nil, errors.New("missing required argument 'ShardCount'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := args.EncryptionType; i != nil { inputs["encryptionType"] = i.ToStringOutput() }
		if i := args.EnforceConsumerDeletion; i != nil { inputs["enforceConsumerDeletion"] = i.ToBoolOutput() }
		if i := args.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.RetentionPeriod; i != nil { inputs["retentionPeriod"] = i.ToIntOutput() }
		if i := args.ShardCount; i != nil { inputs["shardCount"] = i.ToIntOutput() }
		if i := args.ShardLevelMetrics; i != nil { inputs["shardLevelMetrics"] = i.ToStringArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Stream
	err := ctx.RegisterResource("aws:kinesis/stream:Stream", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStream gets an existing Stream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamState, opts ...pulumi.ResourceOption) (*Stream, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.EncryptionType; i != nil { inputs["encryptionType"] = i.ToStringOutput() }
		if i := state.EnforceConsumerDeletion; i != nil { inputs["enforceConsumerDeletion"] = i.ToBoolOutput() }
		if i := state.KmsKeyId; i != nil { inputs["kmsKeyId"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RetentionPeriod; i != nil { inputs["retentionPeriod"] = i.ToIntOutput() }
		if i := state.ShardCount; i != nil { inputs["shardCount"] = i.ToIntOutput() }
		if i := state.ShardLevelMetrics; i != nil { inputs["shardLevelMetrics"] = i.ToStringArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Stream
	err := ctx.ReadResource("aws:kinesis/stream:Stream", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stream resources.
type StreamState struct {
	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn pulumi.StringInput `pulumi:"arn"`
	// The encryption type to use. The only acceptable values are `NONE` or `KMS`. The default value is `NONE`.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// A boolean that indicates all registered consumers should be deregistered from the stream so that the stream can be destroyed without error. The default value is `false`.
	EnforceConsumerDeletion pulumi.BoolInput `pulumi:"enforceConsumerDeletion"`
	// The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias `alias/aws/kinesis`.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A name to identify the stream. This is unique to the AWS account and region the Stream is created in.
	Name pulumi.StringInput `pulumi:"name"`
	// Length of time data records are accessible after they are added to the stream. The maximum value of a stream's retention period is 168 hours. Minimum value is 24. Default is 24.
	RetentionPeriod pulumi.IntInput `pulumi:"retentionPeriod"`
	// The number of shards that the stream will use.
	// Amazon has guidelines for specifying the Stream size that should be referenced when creating a Kinesis stream. See [Amazon Kinesis Streams][2] for more.
	ShardCount pulumi.IntInput `pulumi:"shardCount"`
	// A list of shard-level CloudWatch metrics which can be enabled for the stream. See [Monitoring with CloudWatch][3] for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable.
	ShardLevelMetrics pulumi.StringArrayInput `pulumi:"shardLevelMetrics"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Stream resource.
type StreamArgs struct {
	// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
	Arn pulumi.StringInput `pulumi:"arn"`
	// The encryption type to use. The only acceptable values are `NONE` or `KMS`. The default value is `NONE`.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// A boolean that indicates all registered consumers should be deregistered from the stream so that the stream can be destroyed without error. The default value is `false`.
	EnforceConsumerDeletion pulumi.BoolInput `pulumi:"enforceConsumerDeletion"`
	// The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias `alias/aws/kinesis`.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A name to identify the stream. This is unique to the AWS account and region the Stream is created in.
	Name pulumi.StringInput `pulumi:"name"`
	// Length of time data records are accessible after they are added to the stream. The maximum value of a stream's retention period is 168 hours. Minimum value is 24. Default is 24.
	RetentionPeriod pulumi.IntInput `pulumi:"retentionPeriod"`
	// The number of shards that the stream will use.
	// Amazon has guidelines for specifying the Stream size that should be referenced when creating a Kinesis stream. See [Amazon Kinesis Streams][2] for more.
	ShardCount pulumi.IntInput `pulumi:"shardCount"`
	// A list of shard-level CloudWatch metrics which can be enabled for the stream. See [Monitoring with CloudWatch][3] for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable.
	ShardLevelMetrics pulumi.StringArrayInput `pulumi:"shardLevelMetrics"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
