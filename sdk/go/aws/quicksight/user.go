// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Resource for managing QuickSight User
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/quicksight_user.html.markdown.
type User struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the user
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`

	// The email address of the user that you want to register.
	Email pulumi.StringOutput `pulumi:"email"`

	// The ARN of the IAM user or role that you are registering with Amazon QuickSight.
	IamArn pulumi.StringOutput `pulumi:"iamArn"`

	// Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values: `IAM` and `QUICKSIGHT`.
	IdentityType pulumi.StringOutput `pulumi:"identityType"`

	// The namespace. Currently, you should set this to `default`.
	Namespace pulumi.StringOutput `pulumi:"namespace"`

	// The name of the IAM session to use when assuming roles that can embed QuickSight dashboards.
	SessionName pulumi.StringOutput `pulumi:"sessionName"`

	// The Amazon QuickSight user name that you want to create for the user you are registering.
	UserName pulumi.StringOutput `pulumi:"userName"`

	// The Amazon QuickSight role of the user. The user role can be one of the following: `READER`, `AUTHOR`, or `ADMIN`
	UserRole pulumi.StringOutput `pulumi:"userRole"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.IdentityType == nil {
		return nil, errors.New("missing required argument 'IdentityType'")
	}
	if args == nil || args.UserRole == nil {
		return nil, errors.New("missing required argument 'UserRole'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AwsAccountId; i != nil { inputs["awsAccountId"] = i.ToStringOutput() }
		if i := args.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := args.IamArn; i != nil { inputs["iamArn"] = i.ToStringOutput() }
		if i := args.IdentityType; i != nil { inputs["identityType"] = i.ToStringOutput() }
		if i := args.Namespace; i != nil { inputs["namespace"] = i.ToStringOutput() }
		if i := args.SessionName; i != nil { inputs["sessionName"] = i.ToStringOutput() }
		if i := args.UserName; i != nil { inputs["userName"] = i.ToStringOutput() }
		if i := args.UserRole; i != nil { inputs["userRole"] = i.ToStringOutput() }
	}
	var resource User
	err := ctx.RegisterResource("aws:quicksight/user:User", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.AwsAccountId; i != nil { inputs["awsAccountId"] = i.ToStringOutput() }
		if i := state.Email; i != nil { inputs["email"] = i.ToStringOutput() }
		if i := state.IamArn; i != nil { inputs["iamArn"] = i.ToStringOutput() }
		if i := state.IdentityType; i != nil { inputs["identityType"] = i.ToStringOutput() }
		if i := state.Namespace; i != nil { inputs["namespace"] = i.ToStringOutput() }
		if i := state.SessionName; i != nil { inputs["sessionName"] = i.ToStringOutput() }
		if i := state.UserName; i != nil { inputs["userName"] = i.ToStringOutput() }
		if i := state.UserRole; i != nil { inputs["userRole"] = i.ToStringOutput() }
	}
	var resource User
	err := ctx.ReadResource("aws:quicksight/user:User", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// Amazon Resource Name (ARN) of the user
	Arn pulumi.StringInput `pulumi:"arn"`
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	// The email address of the user that you want to register.
	Email pulumi.StringInput `pulumi:"email"`
	// The ARN of the IAM user or role that you are registering with Amazon QuickSight.
	IamArn pulumi.StringInput `pulumi:"iamArn"`
	// Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values: `IAM` and `QUICKSIGHT`.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
	// The namespace. Currently, you should set this to `default`.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The name of the IAM session to use when assuming roles that can embed QuickSight dashboards.
	SessionName pulumi.StringInput `pulumi:"sessionName"`
	// The Amazon QuickSight user name that you want to create for the user you are registering.
	UserName pulumi.StringInput `pulumi:"userName"`
	// The Amazon QuickSight role of the user. The user role can be one of the following: `READER`, `AUTHOR`, or `ADMIN`
	UserRole pulumi.StringInput `pulumi:"userRole"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	// The email address of the user that you want to register.
	Email pulumi.StringInput `pulumi:"email"`
	// The ARN of the IAM user or role that you are registering with Amazon QuickSight.
	IamArn pulumi.StringInput `pulumi:"iamArn"`
	// Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values: `IAM` and `QUICKSIGHT`.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
	// The namespace. Currently, you should set this to `default`.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The name of the IAM session to use when assuming roles that can embed QuickSight dashboards.
	SessionName pulumi.StringInput `pulumi:"sessionName"`
	// The Amazon QuickSight user name that you want to create for the user you are registering.
	UserName pulumi.StringInput `pulumi:"userName"`
	// The Amazon QuickSight role of the user. The user role can be one of the following: `READER`, `AUTHOR`, or `ADMIN`
	UserRole pulumi.StringInput `pulumi:"userRole"`
}
