// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS App Mesh service mesh resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appmesh_mesh.html.markdown.
type Mesh struct {
	pulumi.CustomResourceState

	// The ARN of the service mesh.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The creation date of the service mesh.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`

	// The last update date of the service mesh.
	LastUpdatedDate pulumi.StringOutput `pulumi:"lastUpdatedDate"`

	// The name to use for the service mesh.
	Name pulumi.StringOutput `pulumi:"name"`

	// The service mesh specification to apply.
	Spec MeshSpecOutput `pulumi:"spec"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewMesh registers a new resource with the given unique name, arguments, and options.
func NewMesh(ctx *pulumi.Context,
	name string, args *MeshArgs, opts ...pulumi.ResourceOption) (*Mesh, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Spec; i != nil { inputs["spec"] = i.ToMeshSpecOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Mesh
	err := ctx.RegisterResource("aws:appmesh/mesh:Mesh", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMesh gets an existing Mesh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMesh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeshState, opts ...pulumi.ResourceOption) (*Mesh, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CreatedDate; i != nil { inputs["createdDate"] = i.ToStringOutput() }
		if i := state.LastUpdatedDate; i != nil { inputs["lastUpdatedDate"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Spec; i != nil { inputs["spec"] = i.ToMeshSpecOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Mesh
	err := ctx.ReadResource("aws:appmesh/mesh:Mesh", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mesh resources.
type MeshState struct {
	// The ARN of the service mesh.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The creation date of the service mesh.
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// The last update date of the service mesh.
	LastUpdatedDate pulumi.StringInput `pulumi:"lastUpdatedDate"`
	// The name to use for the service mesh.
	Name pulumi.StringInput `pulumi:"name"`
	// The service mesh specification to apply.
	Spec MeshSpecInput `pulumi:"spec"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Mesh resource.
type MeshArgs struct {
	// The name to use for the service mesh.
	Name pulumi.StringInput `pulumi:"name"`
	// The service mesh specification to apply.
	Spec MeshSpecInput `pulumi:"spec"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type MeshSpec struct {
	EgressFilter *MeshSpecEgressFilter `pulumi:"egressFilter"`
}
var meshSpecType = reflect.TypeOf((*MeshSpec)(nil)).Elem()

type MeshSpecInput interface {
	pulumi.Input

	ToMeshSpecOutput() MeshSpecOutput
	ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput
}

type MeshSpecArgs struct {
	EgressFilter MeshSpecEgressFilterInput `pulumi:"egressFilter"`
}

func (MeshSpecArgs) ElementType() reflect.Type {
	return meshSpecType
}

func (a MeshSpecArgs) ToMeshSpecOutput() MeshSpecOutput {
	return pulumi.ToOutput(a).(MeshSpecOutput)
}

func (a MeshSpecArgs) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MeshSpecOutput)
}

type MeshSpecOutput struct { *pulumi.OutputState }

func (o MeshSpecOutput) EgressFilter() MeshSpecEgressFilterOutput {
	return o.Apply(func(v MeshSpec) MeshSpecEgressFilter {
		if v.EgressFilter == nil { return *new(MeshSpecEgressFilter) } else { return *v.EgressFilter }
	}).(MeshSpecEgressFilterOutput)
}

func (MeshSpecOutput) ElementType() reflect.Type {
	return meshSpecType
}

func (o MeshSpecOutput) ToMeshSpecOutput() MeshSpecOutput {
	return o
}

func (o MeshSpecOutput) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return o
}

func init() { pulumi.RegisterOutputType(MeshSpecOutput{}) }

type MeshSpecEgressFilter struct {
	// The egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type *string `pulumi:"type"`
}
var meshSpecEgressFilterType = reflect.TypeOf((*MeshSpecEgressFilter)(nil)).Elem()

type MeshSpecEgressFilterInput interface {
	pulumi.Input

	ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput
	ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput
}

type MeshSpecEgressFilterArgs struct {
	// The egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MeshSpecEgressFilterArgs) ElementType() reflect.Type {
	return meshSpecEgressFilterType
}

func (a MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return pulumi.ToOutput(a).(MeshSpecEgressFilterOutput)
}

func (a MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MeshSpecEgressFilterOutput)
}

type MeshSpecEgressFilterOutput struct { *pulumi.OutputState }

// The egress filter type. By default, the type is `DROP_ALL`.
// Valid values are `ALLOW_ALL` and `DROP_ALL`.
func (o MeshSpecEgressFilterOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v MeshSpecEgressFilter) string {
		if v.Type == nil { return *new(string) } else { return *v.Type }
	}).(pulumi.StringOutput)
}

func (MeshSpecEgressFilterOutput) ElementType() reflect.Type {
	return meshSpecEgressFilterType
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return o
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return o
}

func init() { pulumi.RegisterOutputType(MeshSpecEgressFilterOutput{}) }

