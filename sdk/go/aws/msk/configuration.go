// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Amazon Managed Streaming for Kafka configuration. More information can be found on the [MSK Developer Guide](https://docs.aws.amazon.com/msk/latest/developerguide/msk-configuration.html).
// 
// > **NOTE:** The API does not support deleting MSK configurations. Removing this resource will only remove the this provider state for it.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/msk_configuration.html.markdown.
type Configuration struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the configuration.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Description of the configuration.
	Description pulumi.StringOutput `pulumi:"description"`

	// List of Apache Kafka versions which can use this configuration.
	KafkaVersions pulumi.StringArrayOutput `pulumi:"kafkaVersions"`

	// Latest revision of the configuration.
	LatestRevision pulumi.IntOutput `pulumi:"latestRevision"`

	// Name of the configuration.
	Name pulumi.StringOutput `pulumi:"name"`

	// Contents of the server.properties file. Supported properties are documented in the [MSK Developer Guide](https://docs.aws.amazon.com/msk/latest/developerguide/msk-configuration-properties.html).
	ServerProperties pulumi.StringOutput `pulumi:"serverProperties"`
}

// NewConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConfiguration(ctx *pulumi.Context,
	name string, args *ConfigurationArgs, opts ...pulumi.ResourceOption) (*Configuration, error) {
	if args == nil || args.KafkaVersions == nil {
		return nil, errors.New("missing required argument 'KafkaVersions'")
	}
	if args == nil || args.ServerProperties == nil {
		return nil, errors.New("missing required argument 'ServerProperties'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.KafkaVersions; i != nil { inputs["kafkaVersions"] = i.ToStringArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ServerProperties; i != nil { inputs["serverProperties"] = i.ToStringOutput() }
	}
	var resource Configuration
	err := ctx.RegisterResource("aws:msk/configuration:Configuration", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguration gets an existing Configuration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationState, opts ...pulumi.ResourceOption) (*Configuration, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.KafkaVersions; i != nil { inputs["kafkaVersions"] = i.ToStringArrayOutput() }
		if i := state.LatestRevision; i != nil { inputs["latestRevision"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ServerProperties; i != nil { inputs["serverProperties"] = i.ToStringOutput() }
	}
	var resource Configuration
	err := ctx.ReadResource("aws:msk/configuration:Configuration", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Configuration resources.
type ConfigurationState struct {
	// Amazon Resource Name (ARN) of the configuration.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Description of the configuration.
	Description pulumi.StringInput `pulumi:"description"`
	// List of Apache Kafka versions which can use this configuration.
	KafkaVersions pulumi.StringArrayInput `pulumi:"kafkaVersions"`
	// Latest revision of the configuration.
	LatestRevision pulumi.IntInput `pulumi:"latestRevision"`
	// Name of the configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// Contents of the server.properties file. Supported properties are documented in the [MSK Developer Guide](https://docs.aws.amazon.com/msk/latest/developerguide/msk-configuration-properties.html).
	ServerProperties pulumi.StringInput `pulumi:"serverProperties"`
}

// The set of arguments for constructing a Configuration resource.
type ConfigurationArgs struct {
	// Description of the configuration.
	Description pulumi.StringInput `pulumi:"description"`
	// List of Apache Kafka versions which can use this configuration.
	KafkaVersions pulumi.StringArrayInput `pulumi:"kafkaVersions"`
	// Name of the configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// Contents of the server.properties file. Supported properties are documented in the [MSK Developer Guide](https://docs.aws.amazon.com/msk/latest/developerguide/msk-configuration-properties.html).
	ServerProperties pulumi.StringInput `pulumi:"serverProperties"`
}
