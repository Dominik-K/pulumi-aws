// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a S3 bucket [metrics configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html) resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/s3_bucket_metric.html.markdown.
type BucketMetric struct {
	pulumi.CustomResourceState

	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringOutput `pulumi:"bucket"`

	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter BucketMetricFilterOutput `pulumi:"filter"`

	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewBucketMetric registers a new resource with the given unique name, arguments, and options.
func NewBucketMetric(ctx *pulumi.Context,
	name string, args *BucketMetricArgs, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Bucket; i != nil { inputs["bucket"] = i.ToStringOutput() }
		if i := args.Filter; i != nil { inputs["filter"] = i.ToBucketMetricFilterOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource BucketMetric
	err := ctx.RegisterResource("aws:s3/bucketMetric:BucketMetric", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketMetric gets an existing BucketMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketMetricState, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Bucket; i != nil { inputs["bucket"] = i.ToStringOutput() }
		if i := state.Filter; i != nil { inputs["filter"] = i.ToBucketMetricFilterOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
	}
	var resource BucketMetric
	err := ctx.ReadResource("aws:s3/bucketMetric:BucketMetric", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketMetric resources.
type BucketMetricState struct {
	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter BucketMetricFilterInput `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a BucketMetric resource.
type BucketMetricArgs struct {
	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter BucketMetricFilterInput `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringInput `pulumi:"name"`
}
type BucketMetricFilter struct {
	// Object prefix for filtering (singular).
	Prefix *string `pulumi:"prefix"`
	// Object tags for filtering (up to 10).
	Tags *map[string]string `pulumi:"tags"`
}
var bucketMetricFilterType = reflect.TypeOf((*BucketMetricFilter)(nil)).Elem()

type BucketMetricFilterInput interface {
	pulumi.Input

	ToBucketMetricFilterOutput() BucketMetricFilterOutput
	ToBucketMetricFilterOutputWithContext(ctx context.Context) BucketMetricFilterOutput
}

type BucketMetricFilterArgs struct {
	// Object prefix for filtering (singular).
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// Object tags for filtering (up to 10).
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (BucketMetricFilterArgs) ElementType() reflect.Type {
	return bucketMetricFilterType
}

func (a BucketMetricFilterArgs) ToBucketMetricFilterOutput() BucketMetricFilterOutput {
	return pulumi.ToOutput(a).(BucketMetricFilterOutput)
}

func (a BucketMetricFilterArgs) ToBucketMetricFilterOutputWithContext(ctx context.Context) BucketMetricFilterOutput {
	return pulumi.ToOutputWithContext(ctx, a).(BucketMetricFilterOutput)
}

type BucketMetricFilterOutput struct { *pulumi.OutputState }

// Object prefix for filtering (singular).
func (o BucketMetricFilterOutput) Prefix() pulumi.StringOutput {
	return o.Apply(func(v BucketMetricFilter) string {
		if v.Prefix == nil { return *new(string) } else { return *v.Prefix }
	}).(pulumi.StringOutput)
}

// Object tags for filtering (up to 10).
func (o BucketMetricFilterOutput) Tags() pulumi.MapOutput {
	return o.Apply(func(v BucketMetricFilter) map[string]string {
		if v.Tags == nil { return *new(map[string]string) } else { return *v.Tags }
	}).(pulumi.MapOutput)
}

func (BucketMetricFilterOutput) ElementType() reflect.Type {
	return bucketMetricFilterType
}

func (o BucketMetricFilterOutput) ToBucketMetricFilterOutput() BucketMetricFilterOutput {
	return o
}

func (o BucketMetricFilterOutput) ToBucketMetricFilterOutputWithContext(ctx context.Context) BucketMetricFilterOutput {
	return o
}

func init() { pulumi.RegisterOutputType(BucketMetricFilterOutput{}) }

