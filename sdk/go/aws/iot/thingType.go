// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates and manages an AWS IoT Thing Type.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iot_thing_type.html.markdown.
type ThingType struct {
	pulumi.CustomResourceState

	// The ARN of the created AWS IoT Thing Type.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolOutput `pulumi:"deprecated"`

	// The name of the thing type.
	Name pulumi.StringOutput `pulumi:"name"`

	Properties ThingTypePropertiesOutput `pulumi:"properties"`
}

// NewThingType registers a new resource with the given unique name, arguments, and options.
func NewThingType(ctx *pulumi.Context,
	name string, args *ThingTypeArgs, opts ...pulumi.ResourceOption) (*ThingType, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Deprecated; i != nil { inputs["deprecated"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Properties; i != nil { inputs["properties"] = i.ToThingTypePropertiesOutput() }
	}
	var resource ThingType
	err := ctx.RegisterResource("aws:iot/thingType:ThingType", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThingType gets an existing ThingType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThingType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThingTypeState, opts ...pulumi.ResourceOption) (*ThingType, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.Deprecated; i != nil { inputs["deprecated"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Properties; i != nil { inputs["properties"] = i.ToThingTypePropertiesOutput() }
	}
	var resource ThingType
	err := ctx.ReadResource("aws:iot/thingType:ThingType", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThingType resources.
type ThingTypeState struct {
	// The ARN of the created AWS IoT Thing Type.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolInput `pulumi:"deprecated"`
	// The name of the thing type.
	Name pulumi.StringInput `pulumi:"name"`
	Properties ThingTypePropertiesInput `pulumi:"properties"`
}

// The set of arguments for constructing a ThingType resource.
type ThingTypeArgs struct {
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolInput `pulumi:"deprecated"`
	// The name of the thing type.
	Name pulumi.StringInput `pulumi:"name"`
	Properties ThingTypePropertiesInput `pulumi:"properties"`
}
type ThingTypeProperties struct {
	// The description of the thing type.
	Description *string `pulumi:"description"`
	// A list of searchable thing attribute names.
	SearchableAttributes *[]string `pulumi:"searchableAttributes"`
}
var thingTypePropertiesType = reflect.TypeOf((*ThingTypeProperties)(nil)).Elem()

type ThingTypePropertiesInput interface {
	pulumi.Input

	ToThingTypePropertiesOutput() ThingTypePropertiesOutput
	ToThingTypePropertiesOutputWithContext(ctx context.Context) ThingTypePropertiesOutput
}

type ThingTypePropertiesArgs struct {
	// The description of the thing type.
	Description pulumi.StringInput `pulumi:"description"`
	// A list of searchable thing attribute names.
	SearchableAttributes pulumi.StringArrayInput `pulumi:"searchableAttributes"`
}

func (ThingTypePropertiesArgs) ElementType() reflect.Type {
	return thingTypePropertiesType
}

func (a ThingTypePropertiesArgs) ToThingTypePropertiesOutput() ThingTypePropertiesOutput {
	return pulumi.ToOutput(a).(ThingTypePropertiesOutput)
}

func (a ThingTypePropertiesArgs) ToThingTypePropertiesOutputWithContext(ctx context.Context) ThingTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ThingTypePropertiesOutput)
}

type ThingTypePropertiesOutput struct { *pulumi.OutputState }

// The description of the thing type.
func (o ThingTypePropertiesOutput) Description() pulumi.StringOutput {
	return o.Apply(func(v ThingTypeProperties) string {
		if v.Description == nil { return *new(string) } else { return *v.Description }
	}).(pulumi.StringOutput)
}

// A list of searchable thing attribute names.
func (o ThingTypePropertiesOutput) SearchableAttributes() pulumi.StringArrayOutput {
	return o.Apply(func(v ThingTypeProperties) []string {
		if v.SearchableAttributes == nil { return *new([]string) } else { return *v.SearchableAttributes }
	}).(pulumi.StringArrayOutput)
}

func (ThingTypePropertiesOutput) ElementType() reflect.Type {
	return thingTypePropertiesType
}

func (o ThingTypePropertiesOutput) ToThingTypePropertiesOutput() ThingTypePropertiesOutput {
	return o
}

func (o ThingTypePropertiesOutput) ToThingTypePropertiesOutputWithContext(ctx context.Context) ThingTypePropertiesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ThingTypePropertiesOutput{}) }

