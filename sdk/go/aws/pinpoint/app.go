// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Pinpoint App resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/pinpoint_app.html.markdown.
type App struct {
	pulumi.CustomResourceState

	// The Application ID of the Pinpoint App.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`

	// Amazon Resource Name (ARN) of the PinPoint Application
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	CampaignHook AppCampaignHookOutput `pulumi:"campaignHook"`

	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	Limits AppLimitsOutput `pulumi:"limits"`

	// The application name. By default generated by this provider
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Pinpoint application. Conflicts with `name`
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
	QuietTime AppQuietTimeOutput `pulumi:"quietTime"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CampaignHook; i != nil { inputs["campaignHook"] = i.ToAppCampaignHookOutput() }
		if i := args.Limits; i != nil { inputs["limits"] = i.ToAppLimitsOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := args.QuietTime; i != nil { inputs["quietTime"] = i.ToAppQuietTimeOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource App
	err := ctx.RegisterResource("aws:pinpoint/app:App", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApplicationId; i != nil { inputs["applicationId"] = i.ToStringOutput() }
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.CampaignHook; i != nil { inputs["campaignHook"] = i.ToAppCampaignHookOutput() }
		if i := state.Limits; i != nil { inputs["limits"] = i.ToAppLimitsOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamePrefix; i != nil { inputs["namePrefix"] = i.ToStringOutput() }
		if i := state.QuietTime; i != nil { inputs["quietTime"] = i.ToAppQuietTimeOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource App
	err := ctx.ReadResource("aws:pinpoint/app:App", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type AppState struct {
	// The Application ID of the Pinpoint App.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// Amazon Resource Name (ARN) of the PinPoint Application
	Arn pulumi.StringInput `pulumi:"arn"`
	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	CampaignHook AppCampaignHookInput `pulumi:"campaignHook"`
	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	Limits AppLimitsInput `pulumi:"limits"`
	// The application name. By default generated by this provider
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Pinpoint application. Conflicts with `name`
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
	QuietTime AppQuietTimeInput `pulumi:"quietTime"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	CampaignHook AppCampaignHookInput `pulumi:"campaignHook"`
	// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
	Limits AppLimitsInput `pulumi:"limits"`
	// The application name. By default generated by this provider
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Pinpoint application. Conflicts with `name`
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
	QuietTime AppQuietTimeInput `pulumi:"quietTime"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}
type AppCampaignHook struct {
	// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
	LambdaFunctionName *string `pulumi:"lambdaFunctionName"`
	// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.  
	Mode *string `pulumi:"mode"`
	// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
	WebUrl *string `pulumi:"webUrl"`
}
var appCampaignHookType = reflect.TypeOf((*AppCampaignHook)(nil)).Elem()

type AppCampaignHookInput interface {
	pulumi.Input

	ToAppCampaignHookOutput() AppCampaignHookOutput
	ToAppCampaignHookOutputWithContext(ctx context.Context) AppCampaignHookOutput
}

type AppCampaignHookArgs struct {
	// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
	LambdaFunctionName pulumi.StringInput `pulumi:"lambdaFunctionName"`
	// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.  
	Mode pulumi.StringInput `pulumi:"mode"`
	// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (AppCampaignHookArgs) ElementType() reflect.Type {
	return appCampaignHookType
}

func (a AppCampaignHookArgs) ToAppCampaignHookOutput() AppCampaignHookOutput {
	return pulumi.ToOutput(a).(AppCampaignHookOutput)
}

func (a AppCampaignHookArgs) ToAppCampaignHookOutputWithContext(ctx context.Context) AppCampaignHookOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AppCampaignHookOutput)
}

type AppCampaignHookOutput struct { *pulumi.OutputState }

// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
func (o AppCampaignHookOutput) LambdaFunctionName() pulumi.StringOutput {
	return o.Apply(func(v AppCampaignHook) string {
		if v.LambdaFunctionName == nil { return *new(string) } else { return *v.LambdaFunctionName }
	}).(pulumi.StringOutput)
}

// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.  
func (o AppCampaignHookOutput) Mode() pulumi.StringOutput {
	return o.Apply(func(v AppCampaignHook) string {
		if v.Mode == nil { return *new(string) } else { return *v.Mode }
	}).(pulumi.StringOutput)
}

// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
func (o AppCampaignHookOutput) WebUrl() pulumi.StringOutput {
	return o.Apply(func(v AppCampaignHook) string {
		if v.WebUrl == nil { return *new(string) } else { return *v.WebUrl }
	}).(pulumi.StringOutput)
}

func (AppCampaignHookOutput) ElementType() reflect.Type {
	return appCampaignHookType
}

func (o AppCampaignHookOutput) ToAppCampaignHookOutput() AppCampaignHookOutput {
	return o
}

func (o AppCampaignHookOutput) ToAppCampaignHookOutputWithContext(ctx context.Context) AppCampaignHookOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AppCampaignHookOutput{}) }

type AppLimits struct {
	// The maximum number of messages that the campaign can send daily. 
	Daily *int `pulumi:"daily"`
	// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
	MaximumDuration *int `pulumi:"maximumDuration"`
	// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
	MessagesPerSecond *int `pulumi:"messagesPerSecond"`
	// The maximum total number of messages that the campaign can send.
	Total *int `pulumi:"total"`
}
var appLimitsType = reflect.TypeOf((*AppLimits)(nil)).Elem()

type AppLimitsInput interface {
	pulumi.Input

	ToAppLimitsOutput() AppLimitsOutput
	ToAppLimitsOutputWithContext(ctx context.Context) AppLimitsOutput
}

type AppLimitsArgs struct {
	// The maximum number of messages that the campaign can send daily. 
	Daily pulumi.IntInput `pulumi:"daily"`
	// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
	MaximumDuration pulumi.IntInput `pulumi:"maximumDuration"`
	// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
	MessagesPerSecond pulumi.IntInput `pulumi:"messagesPerSecond"`
	// The maximum total number of messages that the campaign can send.
	Total pulumi.IntInput `pulumi:"total"`
}

func (AppLimitsArgs) ElementType() reflect.Type {
	return appLimitsType
}

func (a AppLimitsArgs) ToAppLimitsOutput() AppLimitsOutput {
	return pulumi.ToOutput(a).(AppLimitsOutput)
}

func (a AppLimitsArgs) ToAppLimitsOutputWithContext(ctx context.Context) AppLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AppLimitsOutput)
}

type AppLimitsOutput struct { *pulumi.OutputState }

// The maximum number of messages that the campaign can send daily. 
func (o AppLimitsOutput) Daily() pulumi.IntOutput {
	return o.Apply(func(v AppLimits) int {
		if v.Daily == nil { return *new(int) } else { return *v.Daily }
	}).(pulumi.IntOutput)
}

// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
func (o AppLimitsOutput) MaximumDuration() pulumi.IntOutput {
	return o.Apply(func(v AppLimits) int {
		if v.MaximumDuration == nil { return *new(int) } else { return *v.MaximumDuration }
	}).(pulumi.IntOutput)
}

// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
func (o AppLimitsOutput) MessagesPerSecond() pulumi.IntOutput {
	return o.Apply(func(v AppLimits) int {
		if v.MessagesPerSecond == nil { return *new(int) } else { return *v.MessagesPerSecond }
	}).(pulumi.IntOutput)
}

// The maximum total number of messages that the campaign can send.
func (o AppLimitsOutput) Total() pulumi.IntOutput {
	return o.Apply(func(v AppLimits) int {
		if v.Total == nil { return *new(int) } else { return *v.Total }
	}).(pulumi.IntOutput)
}

func (AppLimitsOutput) ElementType() reflect.Type {
	return appLimitsType
}

func (o AppLimitsOutput) ToAppLimitsOutput() AppLimitsOutput {
	return o
}

func (o AppLimitsOutput) ToAppLimitsOutputWithContext(ctx context.Context) AppLimitsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AppLimitsOutput{}) }

type AppQuietTime struct {
	// The default end time for quiet time in ISO 8601 format. Required if `start` is set
	End *string `pulumi:"end"`
	// The default start time for quiet time in ISO 8601 format. Required if `end` is set
	Start *string `pulumi:"start"`
}
var appQuietTimeType = reflect.TypeOf((*AppQuietTime)(nil)).Elem()

type AppQuietTimeInput interface {
	pulumi.Input

	ToAppQuietTimeOutput() AppQuietTimeOutput
	ToAppQuietTimeOutputWithContext(ctx context.Context) AppQuietTimeOutput
}

type AppQuietTimeArgs struct {
	// The default end time for quiet time in ISO 8601 format. Required if `start` is set
	End pulumi.StringInput `pulumi:"end"`
	// The default start time for quiet time in ISO 8601 format. Required if `end` is set
	Start pulumi.StringInput `pulumi:"start"`
}

func (AppQuietTimeArgs) ElementType() reflect.Type {
	return appQuietTimeType
}

func (a AppQuietTimeArgs) ToAppQuietTimeOutput() AppQuietTimeOutput {
	return pulumi.ToOutput(a).(AppQuietTimeOutput)
}

func (a AppQuietTimeArgs) ToAppQuietTimeOutputWithContext(ctx context.Context) AppQuietTimeOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AppQuietTimeOutput)
}

type AppQuietTimeOutput struct { *pulumi.OutputState }

// The default end time for quiet time in ISO 8601 format. Required if `start` is set
func (o AppQuietTimeOutput) End() pulumi.StringOutput {
	return o.Apply(func(v AppQuietTime) string {
		if v.End == nil { return *new(string) } else { return *v.End }
	}).(pulumi.StringOutput)
}

// The default start time for quiet time in ISO 8601 format. Required if `end` is set
func (o AppQuietTimeOutput) Start() pulumi.StringOutput {
	return o.Apply(func(v AppQuietTime) string {
		if v.Start == nil { return *new(string) } else { return *v.Start }
	}).(pulumi.StringOutput)
}

func (AppQuietTimeOutput) ElementType() reflect.Type {
	return appQuietTimeType
}

func (o AppQuietTimeOutput) ToAppQuietTimeOutput() AppQuietTimeOutput {
	return o
}

func (o AppQuietTimeOutput) ToAppQuietTimeOutputWithContext(ctx context.Context) AppQuietTimeOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AppQuietTimeOutput{}) }

