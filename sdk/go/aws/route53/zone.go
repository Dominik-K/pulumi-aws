// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Route53 Hosted Zone.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route53_zone.html.markdown.
type Zone struct {
	pulumi.CustomResourceState

	// A comment for the hosted zone. Defaults to 'Managed by Pulumi'.
	Comment pulumi.StringOutput `pulumi:"comment"`

	// The ID of the reusable delegation set whose NS records you want to assign to the hosted zone. Conflicts with `vpc` as delegation sets can only be used for public zones.
	DelegationSetId pulumi.StringOutput `pulumi:"delegationSetId"`

	// Whether to destroy all records (possibly managed outside of this provider) in the zone when destroying the zone.
	ForceDestroy pulumi.BoolOutput `pulumi:"forceDestroy"`

	// This is the name of the hosted zone.
	Name pulumi.StringOutput `pulumi:"name"`

	// A list of name servers in associated (or default) delegation set.
	// Find more about delegation sets in [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/actions-on-reusable-delegation-sets.html).
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`

	// A mapping of tags to assign to the zone.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Configuration block(s) specifying VPC(s) to associate with a private hosted zone. Conflicts with the `delegationSetId` argument in this resource and any [`route53.ZoneAssociation` resource](https://www.terraform.io/docs/providers/aws/r/route53_zone_association.html) specifying the same zone ID. Detailed below.
	Vpcs ZoneVpcsArrayOutput `pulumi:"vpcs"`

	// The Hosted Zone ID. This can be referenced by zone records.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	inputs := map[string]pulumi.Input{}
	inputs["comment"] = pulumi.Any("Managed by Pulumi")
	if args != nil {
		if i := args.Comment; i != nil { inputs["comment"] = i.ToStringOutput() }
		if i := args.DelegationSetId; i != nil { inputs["delegationSetId"] = i.ToStringOutput() }
		if i := args.ForceDestroy; i != nil { inputs["forceDestroy"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Vpcs; i != nil { inputs["vpcs"] = i.ToZoneVpcsArrayOutput() }
	}
	var resource Zone
	err := ctx.RegisterResource("aws:route53/zone:Zone", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Comment; i != nil { inputs["comment"] = i.ToStringOutput() }
		if i := state.DelegationSetId; i != nil { inputs["delegationSetId"] = i.ToStringOutput() }
		if i := state.ForceDestroy; i != nil { inputs["forceDestroy"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NameServers; i != nil { inputs["nameServers"] = i.ToStringArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Vpcs; i != nil { inputs["vpcs"] = i.ToZoneVpcsArrayOutput() }
		if i := state.ZoneId; i != nil { inputs["zoneId"] = i.ToStringOutput() }
	}
	var resource Zone
	err := ctx.ReadResource("aws:route53/zone:Zone", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type ZoneState struct {
	// A comment for the hosted zone. Defaults to 'Managed by Pulumi'.
	Comment pulumi.StringInput `pulumi:"comment"`
	// The ID of the reusable delegation set whose NS records you want to assign to the hosted zone. Conflicts with `vpc` as delegation sets can only be used for public zones.
	DelegationSetId pulumi.StringInput `pulumi:"delegationSetId"`
	// Whether to destroy all records (possibly managed outside of this provider) in the zone when destroying the zone.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// This is the name of the hosted zone.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of name servers in associated (or default) delegation set.
	// Find more about delegation sets in [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/actions-on-reusable-delegation-sets.html).
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// A mapping of tags to assign to the zone.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Configuration block(s) specifying VPC(s) to associate with a private hosted zone. Conflicts with the `delegationSetId` argument in this resource and any [`route53.ZoneAssociation` resource](https://www.terraform.io/docs/providers/aws/r/route53_zone_association.html) specifying the same zone ID. Detailed below.
	Vpcs ZoneVpcsArrayInput `pulumi:"vpcs"`
	// The Hosted Zone ID. This can be referenced by zone records.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// A comment for the hosted zone. Defaults to 'Managed by Pulumi'.
	Comment pulumi.StringInput `pulumi:"comment"`
	// The ID of the reusable delegation set whose NS records you want to assign to the hosted zone. Conflicts with `vpc` as delegation sets can only be used for public zones.
	DelegationSetId pulumi.StringInput `pulumi:"delegationSetId"`
	// Whether to destroy all records (possibly managed outside of this provider) in the zone when destroying the zone.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// This is the name of the hosted zone.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the zone.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Configuration block(s) specifying VPC(s) to associate with a private hosted zone. Conflicts with the `delegationSetId` argument in this resource and any [`route53.ZoneAssociation` resource](https://www.terraform.io/docs/providers/aws/r/route53_zone_association.html) specifying the same zone ID. Detailed below.
	Vpcs ZoneVpcsArrayInput `pulumi:"vpcs"`
}
type ZoneVpcs struct {
	// ID of the VPC to associate.
	VpcId string `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion *string `pulumi:"vpcRegion"`
}
var zoneVpcsType = reflect.TypeOf((*ZoneVpcs)(nil)).Elem()

type ZoneVpcsInput interface {
	pulumi.Input

	ToZoneVpcsOutput() ZoneVpcsOutput
	ToZoneVpcsOutputWithContext(ctx context.Context) ZoneVpcsOutput
}

type ZoneVpcsArgs struct {
	// ID of the VPC to associate.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion pulumi.StringInput `pulumi:"vpcRegion"`
}

func (ZoneVpcsArgs) ElementType() reflect.Type {
	return zoneVpcsType
}

func (a ZoneVpcsArgs) ToZoneVpcsOutput() ZoneVpcsOutput {
	return pulumi.ToOutput(a).(ZoneVpcsOutput)
}

func (a ZoneVpcsArgs) ToZoneVpcsOutputWithContext(ctx context.Context) ZoneVpcsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ZoneVpcsOutput)
}

type ZoneVpcsOutput struct { *pulumi.OutputState }

// ID of the VPC to associate.
func (o ZoneVpcsOutput) VpcId() pulumi.StringOutput {
	return o.Apply(func(v ZoneVpcs) string {
		return v.VpcId
	}).(pulumi.StringOutput)
}

// Region of the VPC to associate. Defaults to AWS provider region.
func (o ZoneVpcsOutput) VpcRegion() pulumi.StringOutput {
	return o.Apply(func(v ZoneVpcs) string {
		if v.VpcRegion == nil { return *new(string) } else { return *v.VpcRegion }
	}).(pulumi.StringOutput)
}

func (ZoneVpcsOutput) ElementType() reflect.Type {
	return zoneVpcsType
}

func (o ZoneVpcsOutput) ToZoneVpcsOutput() ZoneVpcsOutput {
	return o
}

func (o ZoneVpcsOutput) ToZoneVpcsOutputWithContext(ctx context.Context) ZoneVpcsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ZoneVpcsOutput{}) }

var zoneVpcsArrayType = reflect.TypeOf((*[]ZoneVpcs)(nil)).Elem()

type ZoneVpcsArrayInput interface {
	pulumi.Input

	ToZoneVpcsArrayOutput() ZoneVpcsArrayOutput
	ToZoneVpcsArrayOutputWithContext(ctx context.Context) ZoneVpcsArrayOutput
}

type ZoneVpcsArrayArgs []ZoneVpcsInput

func (ZoneVpcsArrayArgs) ElementType() reflect.Type {
	return zoneVpcsArrayType
}

func (a ZoneVpcsArrayArgs) ToZoneVpcsArrayOutput() ZoneVpcsArrayOutput {
	return pulumi.ToOutput(a).(ZoneVpcsArrayOutput)
}

func (a ZoneVpcsArrayArgs) ToZoneVpcsArrayOutputWithContext(ctx context.Context) ZoneVpcsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ZoneVpcsArrayOutput)
}

type ZoneVpcsArrayOutput struct { *pulumi.OutputState }

func (o ZoneVpcsArrayOutput) Index(i pulumi.IntInput) ZoneVpcsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ZoneVpcs {
		return vs[0].([]ZoneVpcs)[vs[1].(int)]
	}).(ZoneVpcsOutput)
}

func (ZoneVpcsArrayOutput) ElementType() reflect.Type {
	return zoneVpcsArrayType
}

func (o ZoneVpcsArrayOutput) ToZoneVpcsArrayOutput() ZoneVpcsArrayOutput {
	return o
}

func (o ZoneVpcsArrayOutput) ToZoneVpcsArrayOutputWithContext(ctx context.Context) ZoneVpcsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ZoneVpcsArrayOutput{}) }

