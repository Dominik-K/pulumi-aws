// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Container Registry Repository Policy.
// 
// Note that currently only one policy may be applied to a repository.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecr_repository_policy.html.markdown.
type RepositoryPolicy struct {
	pulumi.CustomResourceState

	Policy pulumi.StringOutput `pulumi:"policy"`

	// The registry ID where the repository was created.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`

	// Name of the repository to apply the policy.
	Repository pulumi.StringOutput `pulumi:"repository"`
}

// NewRepositoryPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPolicy(ctx *pulumi.Context,
	name string, args *RepositoryPolicyArgs, opts ...pulumi.ResourceOption) (*RepositoryPolicy, error) {
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
		if i := args.Repository; i != nil { inputs["repository"] = i.ToStringOutput() }
	}
	var resource RepositoryPolicy
	err := ctx.RegisterResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryPolicy gets an existing RepositoryPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryPolicyState, opts ...pulumi.ResourceOption) (*RepositoryPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Policy; i != nil { inputs["policy"] = i.ToStringOutput() }
		if i := state.RegistryId; i != nil { inputs["registryId"] = i.ToStringOutput() }
		if i := state.Repository; i != nil { inputs["repository"] = i.ToStringOutput() }
	}
	var resource RepositoryPolicy
	err := ctx.ReadResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryPolicy resources.
type RepositoryPolicyState struct {
	Policy pulumi.StringInput `pulumi:"policy"`
	// The registry ID where the repository was created.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
	// Name of the repository to apply the policy.
	Repository pulumi.StringInput `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryPolicy resource.
type RepositoryPolicyArgs struct {
	Policy pulumi.StringInput `pulumi:"policy"`
	// Name of the repository to apply the policy.
	Repository pulumi.StringInput `pulumi:"repository"`
}
