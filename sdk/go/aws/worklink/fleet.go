// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package worklink

import (
	"context"
	"reflect"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Fleet struct {
	pulumi.CustomResourceState

	// The ARN of the created WorkLink Fleet.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The ARN of the Amazon Kinesis data stream that receives the audit events.
	AuditStreamArn pulumi.StringOutput `pulumi:"auditStreamArn"`

	// The identifier used by users to sign in to the Amazon WorkLink app.
	CompanyCode pulumi.StringOutput `pulumi:"companyCode"`

	// The time that the fleet was created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`

	// The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.
	DeviceCaCertificate pulumi.StringOutput `pulumi:"deviceCaCertificate"`

	// The name of the fleet.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// Provide this to allow manage the identity provider configuration for the fleet. Fields documented below.
	IdentityProvider FleetIdentityProviderOutput `pulumi:"identityProvider"`

	// The time that the fleet was last updated.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`

	// A region-unique name for the AMI.
	Name pulumi.StringOutput `pulumi:"name"`

	// Provide this to allow manage the company network configuration for the fleet. Fields documented below.
	Network FleetNetworkOutput `pulumi:"network"`

	// The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region. Defaults to `true`.
	OptimizeForEndUserLocation pulumi.BoolOutput `pulumi:"optimizeForEndUserLocation"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AuditStreamArn; i != nil { inputs["auditStreamArn"] = i.ToStringOutput() }
		if i := args.DeviceCaCertificate; i != nil { inputs["deviceCaCertificate"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.IdentityProvider; i != nil { inputs["identityProvider"] = i.ToFleetIdentityProviderOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Network; i != nil { inputs["network"] = i.ToFleetNetworkOutput() }
		if i := args.OptimizeForEndUserLocation; i != nil { inputs["optimizeForEndUserLocation"] = i.ToBoolOutput() }
	}
	var resource Fleet
	err := ctx.RegisterResource("aws:worklink/fleet:Fleet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Arn; i != nil { inputs["arn"] = i.ToStringOutput() }
		if i := state.AuditStreamArn; i != nil { inputs["auditStreamArn"] = i.ToStringOutput() }
		if i := state.CompanyCode; i != nil { inputs["companyCode"] = i.ToStringOutput() }
		if i := state.CreatedTime; i != nil { inputs["createdTime"] = i.ToStringOutput() }
		if i := state.DeviceCaCertificate; i != nil { inputs["deviceCaCertificate"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.IdentityProvider; i != nil { inputs["identityProvider"] = i.ToFleetIdentityProviderOutput() }
		if i := state.LastUpdatedTime; i != nil { inputs["lastUpdatedTime"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Network; i != nil { inputs["network"] = i.ToFleetNetworkOutput() }
		if i := state.OptimizeForEndUserLocation; i != nil { inputs["optimizeForEndUserLocation"] = i.ToBoolOutput() }
	}
	var resource Fleet
	err := ctx.ReadResource("aws:worklink/fleet:Fleet", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type FleetState struct {
	// The ARN of the created WorkLink Fleet.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The ARN of the Amazon Kinesis data stream that receives the audit events.
	AuditStreamArn pulumi.StringInput `pulumi:"auditStreamArn"`
	// The identifier used by users to sign in to the Amazon WorkLink app.
	CompanyCode pulumi.StringInput `pulumi:"companyCode"`
	// The time that the fleet was created.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.
	DeviceCaCertificate pulumi.StringInput `pulumi:"deviceCaCertificate"`
	// The name of the fleet.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Provide this to allow manage the identity provider configuration for the fleet. Fields documented below.
	IdentityProvider FleetIdentityProviderInput `pulumi:"identityProvider"`
	// The time that the fleet was last updated.
	LastUpdatedTime pulumi.StringInput `pulumi:"lastUpdatedTime"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// Provide this to allow manage the company network configuration for the fleet. Fields documented below.
	Network FleetNetworkInput `pulumi:"network"`
	// The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region. Defaults to `true`.
	OptimizeForEndUserLocation pulumi.BoolInput `pulumi:"optimizeForEndUserLocation"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// The ARN of the Amazon Kinesis data stream that receives the audit events.
	AuditStreamArn pulumi.StringInput `pulumi:"auditStreamArn"`
	// The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.
	DeviceCaCertificate pulumi.StringInput `pulumi:"deviceCaCertificate"`
	// The name of the fleet.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Provide this to allow manage the identity provider configuration for the fleet. Fields documented below.
	IdentityProvider FleetIdentityProviderInput `pulumi:"identityProvider"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// Provide this to allow manage the company network configuration for the fleet. Fields documented below.
	Network FleetNetworkInput `pulumi:"network"`
	// The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region. Defaults to `true`.
	OptimizeForEndUserLocation pulumi.BoolInput `pulumi:"optimizeForEndUserLocation"`
}
type FleetIdentityProvider struct {
	// The SAML metadata document provided by the customer’s identity provider.
	SamlMetadata string `pulumi:"samlMetadata"`
	// The type of identity provider.
	Type string `pulumi:"type"`
}
var fleetIdentityProviderType = reflect.TypeOf((*FleetIdentityProvider)(nil)).Elem()

type FleetIdentityProviderInput interface {
	pulumi.Input

	ToFleetIdentityProviderOutput() FleetIdentityProviderOutput
	ToFleetIdentityProviderOutputWithContext(ctx context.Context) FleetIdentityProviderOutput
}

type FleetIdentityProviderArgs struct {
	// The SAML metadata document provided by the customer’s identity provider.
	SamlMetadata pulumi.StringInput `pulumi:"samlMetadata"`
	// The type of identity provider.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FleetIdentityProviderArgs) ElementType() reflect.Type {
	return fleetIdentityProviderType
}

func (a FleetIdentityProviderArgs) ToFleetIdentityProviderOutput() FleetIdentityProviderOutput {
	return pulumi.ToOutput(a).(FleetIdentityProviderOutput)
}

func (a FleetIdentityProviderArgs) ToFleetIdentityProviderOutputWithContext(ctx context.Context) FleetIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, a).(FleetIdentityProviderOutput)
}

type FleetIdentityProviderOutput struct { *pulumi.OutputState }

// The SAML metadata document provided by the customer’s identity provider.
func (o FleetIdentityProviderOutput) SamlMetadata() pulumi.StringOutput {
	return o.Apply(func(v FleetIdentityProvider) string {
		return v.SamlMetadata
	}).(pulumi.StringOutput)
}

// The type of identity provider.
func (o FleetIdentityProviderOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v FleetIdentityProvider) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (FleetIdentityProviderOutput) ElementType() reflect.Type {
	return fleetIdentityProviderType
}

func (o FleetIdentityProviderOutput) ToFleetIdentityProviderOutput() FleetIdentityProviderOutput {
	return o
}

func (o FleetIdentityProviderOutput) ToFleetIdentityProviderOutputWithContext(ctx context.Context) FleetIdentityProviderOutput {
	return o
}

func init() { pulumi.RegisterOutputType(FleetIdentityProviderOutput{}) }

type FleetNetwork struct {
	// A list of security group IDs associated with access to the provided subnets.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs used for X-ENI connections from Amazon WorkLink rendering containers.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC ID with connectivity to associated websites.
	VpcId string `pulumi:"vpcId"`
}
var fleetNetworkType = reflect.TypeOf((*FleetNetwork)(nil)).Elem()

type FleetNetworkInput interface {
	pulumi.Input

	ToFleetNetworkOutput() FleetNetworkOutput
	ToFleetNetworkOutputWithContext(ctx context.Context) FleetNetworkOutput
}

type FleetNetworkArgs struct {
	// A list of security group IDs associated with access to the provided subnets.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of subnet IDs used for X-ENI connections from Amazon WorkLink rendering containers.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The VPC ID with connectivity to associated websites.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (FleetNetworkArgs) ElementType() reflect.Type {
	return fleetNetworkType
}

func (a FleetNetworkArgs) ToFleetNetworkOutput() FleetNetworkOutput {
	return pulumi.ToOutput(a).(FleetNetworkOutput)
}

func (a FleetNetworkArgs) ToFleetNetworkOutputWithContext(ctx context.Context) FleetNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, a).(FleetNetworkOutput)
}

type FleetNetworkOutput struct { *pulumi.OutputState }

// A list of security group IDs associated with access to the provided subnets.
func (o FleetNetworkOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.Apply(func(v FleetNetwork) []string {
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of subnet IDs used for X-ENI connections from Amazon WorkLink rendering containers.
func (o FleetNetworkOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.Apply(func(v FleetNetwork) []string {
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The VPC ID with connectivity to associated websites.
func (o FleetNetworkOutput) VpcId() pulumi.StringOutput {
	return o.Apply(func(v FleetNetwork) string {
		return v.VpcId
	}).(pulumi.StringOutput)
}

func (FleetNetworkOutput) ElementType() reflect.Type {
	return fleetNetworkType
}

func (o FleetNetworkOutput) ToFleetNetworkOutput() FleetNetworkOutput {
	return o
}

func (o FleetNetworkOutput) ToFleetNetworkOutputWithContext(ctx context.Context) FleetNetworkOutput {
	return o
}

func init() { pulumi.RegisterOutputType(FleetNetworkOutput{}) }

