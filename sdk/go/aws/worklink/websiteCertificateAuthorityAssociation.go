// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package worklink

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type WebsiteCertificateAuthorityAssociation struct {
	pulumi.CustomResourceState

	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringOutput `pulumi:"certificate"`

	// The certificate name to display.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The ARN of the fleet.
	FleetArn pulumi.StringOutput `pulumi:"fleetArn"`

	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumi.StringOutput `pulumi:"websiteCaId"`
}

// NewWebsiteCertificateAuthorityAssociation registers a new resource with the given unique name, arguments, and options.
func NewWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, args *WebsiteCertificateAuthorityAssociationArgs, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.FleetArn == nil {
		return nil, errors.New("missing required argument 'FleetArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Certificate; i != nil { inputs["certificate"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.FleetArn; i != nil { inputs["fleetArn"] = i.ToStringOutput() }
	}
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.RegisterResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebsiteCertificateAuthorityAssociation gets an existing WebsiteCertificateAuthorityAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebsiteCertificateAuthorityAssociationState, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Certificate; i != nil { inputs["certificate"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.FleetArn; i != nil { inputs["fleetArn"] = i.ToStringOutput() }
		if i := state.WebsiteCaId; i != nil { inputs["websiteCaId"] = i.ToStringOutput() }
	}
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.ReadResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebsiteCertificateAuthorityAssociation resources.
type WebsiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn pulumi.StringInput `pulumi:"fleetArn"`
	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumi.StringInput `pulumi:"websiteCaId"`
}

// The set of arguments for constructing a WebsiteCertificateAuthorityAssociation resource.
type WebsiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn pulumi.StringInput `pulumi:"fleetArn"`
}
